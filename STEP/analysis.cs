/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using STEP.node;

namespace STEP.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAOneSetuploop(AOneSetuploop node);
    void CaseATwoSetuploop(ATwoSetuploop node);
    void CaseAThreeSetuploop(AThreeSetuploop node);
    void CaseASetup(ASetup node);
    void CaseALoop(ALoop node);
    void CaseAFunctions(AFunctions node);
    void CaseAOneFuncdcl(AOneFuncdcl node);
    void CaseATwoFuncdcl(ATwoFuncdcl node);
    void CaseABrackets(ABrackets node);
    void CaseAParams(AParams node);
    void CaseAParamsContent(AParamsContent node);
    void CaseAParamsMulti(AParamsMulti node);
    void CaseAOneType(AOneType node);
    void CaseATwoType(ATwoType node);
    void CaseAThreeType(AThreeType node);
    void CaseAOneStmt(AOneStmt node);
    void CaseATwoStmt(ATwoStmt node);
    void CaseAThreeStmt(AThreeStmt node);
    void CaseAFourStmt(AFourStmt node);
    void CaseAFiveStmt(AFiveStmt node);
    void CaseASixStmt(ASixStmt node);
    void CaseASevenStmt(ASevenStmt node);
    void CaseAEightStmt(AEightStmt node);
    void CaseANineStmt(ANineStmt node);
    void CaseANonelseIfstmt(ANonelseIfstmt node);
    void CaseAWithelseIfstmt(AWithelseIfstmt node);
    void CaseAWhilestmt(AWhilestmt node);
    void CaseAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node);
    void CaseATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node);
    void CaseAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node);
    void CaseAForstmt(AForstmt node);
    void CaseAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node);
    void CaseATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node);
    void CaseAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node);
    void CaseAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node);
    void CaseATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node);
    void CaseASwitchstmt(ASwitchstmt node);
    void CaseAWhencase(AWhencase node);
    void CaseAOtherwisecase(AOtherwisecase node);
    void CaseAAssstmt(AAssstmt node);
    void CaseAFunccall(AFunccall node);
    void CaseAParamsOptions(AParamsOptions node);
    void CaseAMultiExpr(AMultiExpr node);
    void CaseAOneRetstmt(AOneRetstmt node);
    void CaseAArrindex(AArrindex node);
    void CaseASkipstmt(ASkipstmt node);
    void CaseAOneExpr(AOneExpr node);
    void CaseATwoExpr(ATwoExpr node);
    void CaseAOneAop(AOneAop node);
    void CaseATwoAop(ATwoAop node);
    void CaseAThreeAop(AThreeAop node);
    void CaseAFourAop(AFourAop node);
    void CaseAFiveAop(AFiveAop node);
    void CaseAOneValue(AOneValue node);
    void CaseATwoValue(ATwoValue node);
    void CaseAThreeValue(AThreeValue node);
    void CaseAOneConstant(AOneConstant node);
    void CaseATwoConstant(ATwoConstant node);
    void CaseAThreeConstant(AThreeConstant node);
    void CaseAOneComp(AOneComp node);
    void CaseATwoComp(ATwoComp node);
    void CaseAOneRelop(AOneRelop node);
    void CaseATwoRelop(ATwoRelop node);
    void CaseAThreeRelop(AThreeRelop node);
    void CaseAFourRelop(AFourRelop node);
    void CaseAFiveRelop(AFiveRelop node);
    void CaseASixRelop(ASixRelop node);
    void CaseAOneCond(AOneCond node);
    void CaseATwoCond(ATwoCond node);
    void CaseAOneBop(AOneBop node);
    void CaseATwoBop(ATwoBop node);
    void CaseAVardcl(AVardcl node);
    void CaseAOneVarOptions(AOneVarOptions node);
    void CaseATwoVarOptions(ATwoVarOptions node);
    void CaseAThreeVarOptions(AThreeVarOptions node);
    void CaseAFourVarOptions(AFourVarOptions node);
    void CaseANumdcl(ANumdcl node);
    void CaseAStringdcl(AStringdcl node);
    void CaseABooldcl(ABooldcl node);
    void CaseAArrdcl(AArrdcl node);
    void CaseAOneArrIdOrExpr(AOneArrIdOrExpr node);
    void CaseATwoArrIdOrExpr(ATwoArrIdOrExpr node);
    void CaseAArrsizedcl(AArrsizedcl node);

    void CaseTLparen(TLparen node);
    void CaseTRparen(TRparen node);
    void CaseTLbrack(TLbrack node);
    void CaseTRbrack(TRbrack node);
    void CaseTNumliteral(TNumliteral node);
    void CaseTStrliteral(TStrliteral node);
    void CaseTBoolliteral(TBoolliteral node);
    void CaseTId(TId node);
    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTDivide(TDivide node);
    void CaseTMult(TMult node);
    void CaseTPow(TPow node);
    void CaseTGrthan(TGrthan node);
    void CaseTGrthaneq(TGrthaneq node);
    void CaseTLthan(TLthan node);
    void CaseTLthaneq(TLthaneq node);
    void CaseTEq(TEq node);
    void CaseTNeq(TNeq node);
    void CaseTNeg(TNeg node);
    void CaseTNl(TNl node);
    void CaseTWhitespace(TWhitespace node);
    void CaseTComma(TComma node);
    void CaseTSetup(TSetup node);
    void CaseTEndsetup(TEndsetup node);
    void CaseTLoop(TLoop node);
    void CaseTEndloop(TEndloop node);
    void CaseTFunction(TFunction node);
    void CaseTEndfunction(TEndfunction node);
    void CaseTFunctions(TFunctions node);
    void CaseTEndfunctions(TEndfunctions node);
    void CaseTBlank(TBlank node);
    void CaseTNumber(TNumber node);
    void CaseTString(TString node);
    void CaseTBoolean(TBoolean node);
    void CaseTIf(TIf node);
    void CaseTEndif(TEndif node);
    void CaseTElse(TElse node);
    void CaseTContinue(TContinue node);
    void CaseTBreak(TBreak node);
    void CaseTRepeatwhile(TRepeatwhile node);
    void CaseTEndwhile(TEndwhile node);
    void CaseTRepeatfor(TRepeatfor node);
    void CaseTEndfor(TEndfor node);
    void CaseTTo(TTo node);
    void CaseTIncreaseby(TIncreaseby node);
    void CaseTDecreaseby(TDecreaseby node);
    void CaseTSwitch(TSwitch node);
    void CaseTEndswitch(TEndswitch node);
    void CaseTWhen(TWhen node);
    void CaseTDo(TDo node);
    void CaseTFallthrough(TFallthrough node);
    void CaseTOtherwisedo(TOtherwisedo node);
    void CaseTReturn(TReturn node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTConstant(TConstant node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneSetuploop(AOneSetuploop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoSetuploop(ATwoSetuploop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeSetuploop(AThreeSetuploop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASetup(ASetup node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoop(ALoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctions(AFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneFuncdcl(AOneFuncdcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoFuncdcl(ATwoFuncdcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABrackets(ABrackets node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParams(AParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsContent(AParamsContent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsMulti(AParamsMulti node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneType(AOneType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoType(ATwoType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeType(AThreeType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneStmt(AOneStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoStmt(ATwoStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeStmt(AThreeStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFourStmt(AFourStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFiveStmt(AFiveStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASixStmt(ASixStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASevenStmt(ASevenStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEightStmt(AEightStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANineStmt(ANineStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANonelseIfstmt(ANonelseIfstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWithelseIfstmt(AWithelseIfstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhilestmt(AWhilestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAForstmt(AForstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASwitchstmt(ASwitchstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhencase(AWhencase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOtherwisecase(AOtherwisecase node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssstmt(AAssstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunccall(AFunccall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsOptions(AParamsOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiExpr(AMultiExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneRetstmt(AOneRetstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrindex(AArrindex node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASkipstmt(ASkipstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneExpr(AOneExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoExpr(ATwoExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneAop(AOneAop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoAop(ATwoAop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeAop(AThreeAop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFourAop(AFourAop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFiveAop(AFiveAop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneValue(AOneValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoValue(ATwoValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeValue(AThreeValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneConstant(AOneConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoConstant(ATwoConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeConstant(AThreeConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneComp(AOneComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoComp(ATwoComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneRelop(AOneRelop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoRelop(ATwoRelop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeRelop(AThreeRelop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFourRelop(AFourRelop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFiveRelop(AFiveRelop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASixRelop(ASixRelop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneCond(AOneCond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoCond(ATwoCond node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneBop(AOneBop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoBop(ATwoBop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVardcl(AVardcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneVarOptions(AOneVarOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoVarOptions(ATwoVarOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThreeVarOptions(AThreeVarOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFourVarOptions(AFourVarOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumdcl(ANumdcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringdcl(AStringdcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABooldcl(ABooldcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrdcl(AArrdcl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrsizedcl(AArrsizedcl node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTLparen(TLparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRparen(TRparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLbrack(TLbrack node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRbrack(TRbrack node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumliteral(TNumliteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStrliteral(TStrliteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBoolliteral(TBoolliteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPow(TPow node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGrthan(TGrthan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGrthaneq(TGrthaneq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLthan(TLthan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLthaneq(TLthaneq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEq(TEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNeq(TNeq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNeg(TNeg node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNl(TNl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSetup(TSetup node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndsetup(TEndsetup node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLoop(TLoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndloop(TEndloop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunction(TFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndfunction(TEndfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunctions(TFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndfunctions(TEndfunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumber(TNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBoolean(TBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndif(TEndif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTContinue(TContinue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBreak(TBreak node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRepeatwhile(TRepeatwhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndwhile(TEndwhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRepeatfor(TRepeatfor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndfor(TEndfor node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTo(TTo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIncreaseby(TIncreaseby node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDecreaseby(TDecreaseby node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSwitch(TSwitch node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndswitch(TEndswitch node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhen(TWhen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDo(TDo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFallthrough(TFallthrough node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOtherwisedo(TOtherwisedo node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetSetuploop() != null)
        {
            node.GetSetuploop().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAOneSetuploop(AOneSetuploop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneSetuploop(AOneSetuploop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneSetuploop(AOneSetuploop node)
    {
        InAOneSetuploop(node);
        if(node.GetSetup() != null)
        {
            node.GetSetup().Apply(this);
        }
        OutAOneSetuploop(node);
    }
    public virtual void InATwoSetuploop(ATwoSetuploop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoSetuploop(ATwoSetuploop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoSetuploop(ATwoSetuploop node)
    {
        InATwoSetuploop(node);
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        OutATwoSetuploop(node);
    }
    public virtual void InAThreeSetuploop(AThreeSetuploop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeSetuploop(AThreeSetuploop node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeSetuploop(AThreeSetuploop node)
    {
        InAThreeSetuploop(node);
        if(node.GetSetup() != null)
        {
            node.GetSetup().Apply(this);
        }
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        OutAThreeSetuploop(node);
    }
    public virtual void InASetup(ASetup node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetup(ASetup node)
    {
        DefaultOut(node);
    }

    public override void CaseASetup(ASetup node)
    {
        InASetup(node);
        if(node.GetSetup() != null)
        {
            node.GetSetup().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetEndsetup() != null)
        {
            node.GetEndsetup().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutASetup(node);
    }
    public virtual void InALoop(ALoop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoop(ALoop node)
    {
        DefaultOut(node);
    }

    public override void CaseALoop(ALoop node)
    {
        InALoop(node);
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetEndloop() != null)
        {
            node.GetEndloop().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutALoop(node);
    }
    public virtual void InAFunctions(AFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctions(AFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctions(AFunctions node)
    {
        InAFunctions(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFuncdcl().Count];
            node.GetFuncdcl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PFuncdcl) temp[i]).Apply(this);
            }
        }
        if(node.GetEndfunctions() != null)
        {
            node.GetEndfunctions().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAFunctions(node);
    }
    public virtual void InAOneFuncdcl(AOneFuncdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneFuncdcl(AOneFuncdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneFuncdcl(AOneFuncdcl node)
    {
        InAOneFuncdcl(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetBrackets() != null)
        {
            node.GetBrackets().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetRetstmt() != null)
        {
            node.GetRetstmt().Apply(this);
        }
        if(node.GetEndfunction() != null)
        {
            node.GetEndfunction().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAOneFuncdcl(node);
    }
    public virtual void InATwoFuncdcl(ATwoFuncdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoFuncdcl(ATwoFuncdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoFuncdcl(ATwoFuncdcl node)
    {
        InATwoFuncdcl(node);
        if(node.GetBlank() != null)
        {
            node.GetBlank().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetEndfunction() != null)
        {
            node.GetEndfunction().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutATwoFuncdcl(node);
    }
    public virtual void InABrackets(ABrackets node)
    {
        DefaultIn(node);
    }

    public virtual void OutABrackets(ABrackets node)
    {
        DefaultOut(node);
    }

    public override void CaseABrackets(ABrackets node)
    {
        InABrackets(node);
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        OutABrackets(node);
    }
    public virtual void InAParams(AParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParams(AParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAParams(AParams node)
    {
        InAParams(node);
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetParamsContent() != null)
        {
            node.GetParamsContent().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutAParams(node);
    }
    public virtual void InAParamsContent(AParamsContent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsContent(AParamsContent node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsContent(AParamsContent node)
    {
        InAParamsContent(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetBrackets().Count];
            node.GetBrackets().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PBrackets) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParamsMulti().Count];
            node.GetParamsMulti().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PParamsMulti) temp[i]).Apply(this);
            }
        }
        OutAParamsContent(node);
    }
    public virtual void InAParamsMulti(AParamsMulti node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsMulti(AParamsMulti node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsMulti(AParamsMulti node)
    {
        InAParamsMulti(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetBrackets().Count];
            node.GetBrackets().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PBrackets) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAParamsMulti(node);
    }
    public virtual void InAOneType(AOneType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneType(AOneType node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneType(AOneType node)
    {
        InAOneType(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutAOneType(node);
    }
    public virtual void InATwoType(ATwoType node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoType(ATwoType node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoType(ATwoType node)
    {
        InATwoType(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutATwoType(node);
    }
    public virtual void InAThreeType(AThreeType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeType(AThreeType node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeType(AThreeType node)
    {
        InAThreeType(node);
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        OutAThreeType(node);
    }
    public virtual void InAOneStmt(AOneStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneStmt(AOneStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneStmt(AOneStmt node)
    {
        InAOneStmt(node);
        if(node.GetIfstmt() != null)
        {
            node.GetIfstmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAOneStmt(node);
    }
    public virtual void InATwoStmt(ATwoStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoStmt(ATwoStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoStmt(ATwoStmt node)
    {
        InATwoStmt(node);
        if(node.GetWhilestmt() != null)
        {
            node.GetWhilestmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutATwoStmt(node);
    }
    public virtual void InAThreeStmt(AThreeStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeStmt(AThreeStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeStmt(AThreeStmt node)
    {
        InAThreeStmt(node);
        if(node.GetForstmt() != null)
        {
            node.GetForstmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAThreeStmt(node);
    }
    public virtual void InAFourStmt(AFourStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourStmt(AFourStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourStmt(AFourStmt node)
    {
        InAFourStmt(node);
        if(node.GetVardcl() != null)
        {
            node.GetVardcl().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAFourStmt(node);
    }
    public virtual void InAFiveStmt(AFiveStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFiveStmt(AFiveStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFiveStmt(AFiveStmt node)
    {
        InAFiveStmt(node);
        if(node.GetAssstmt() != null)
        {
            node.GetAssstmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAFiveStmt(node);
    }
    public virtual void InASixStmt(ASixStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASixStmt(ASixStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASixStmt(ASixStmt node)
    {
        InASixStmt(node);
        if(node.GetFunccall() != null)
        {
            node.GetFunccall().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutASixStmt(node);
    }
    public virtual void InASevenStmt(ASevenStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASevenStmt(ASevenStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASevenStmt(ASevenStmt node)
    {
        InASevenStmt(node);
        if(node.GetRetstmt() != null)
        {
            node.GetRetstmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutASevenStmt(node);
    }
    public virtual void InAEightStmt(AEightStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEightStmt(AEightStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAEightStmt(AEightStmt node)
    {
        InAEightStmt(node);
        if(node.GetSwitchstmt() != null)
        {
            node.GetSwitchstmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAEightStmt(node);
    }
    public virtual void InANineStmt(ANineStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANineStmt(ANineStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANineStmt(ANineStmt node)
    {
        InANineStmt(node);
        if(node.GetSkipstmt() != null)
        {
            node.GetSkipstmt().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutANineStmt(node);
    }
    public virtual void InANonelseIfstmt(ANonelseIfstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonelseIfstmt(ANonelseIfstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANonelseIfstmt(ANonelseIfstmt node)
    {
        InANonelseIfstmt(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetEndif() != null)
        {
            node.GetEndif().Apply(this);
        }
        OutANonelseIfstmt(node);
    }
    public virtual void InAWithelseIfstmt(AWithelseIfstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithelseIfstmt(AWithelseIfstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithelseIfstmt(AWithelseIfstmt node)
    {
        InAWithelseIfstmt(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFst().Count];
            node.GetFst().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetSnd().Count];
            node.GetSnd().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetEndif() != null)
        {
            node.GetEndif().Apply(this);
        }
        OutAWithelseIfstmt(node);
    }
    public virtual void InAWhilestmt(AWhilestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilestmt(AWhilestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilestmt(AWhilestmt node)
    {
        InAWhilestmt(node);
        if(node.GetRepeatwhile() != null)
        {
            node.GetRepeatwhile().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetOptionStmtContinueBreak().Count];
            node.GetOptionStmtContinueBreak().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((POptionStmtContinueBreak) temp[i]).Apply(this);
            }
        }
        if(node.GetEndwhile() != null)
        {
            node.GetEndwhile().Apply(this);
        }
        OutAWhilestmt(node);
    }
    public virtual void InAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        InAOneOptionStmtContinueBreak(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutAOneOptionStmtContinueBreak(node);
    }
    public virtual void InATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        InATwoOptionStmtContinueBreak(node);
        if(node.GetContinue() != null)
        {
            node.GetContinue().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutATwoOptionStmtContinueBreak(node);
    }
    public virtual void InAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        InAThreeOptionStmtContinueBreak(node);
        if(node.GetBreak() != null)
        {
            node.GetBreak().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAThreeOptionStmtContinueBreak(node);
    }
    public virtual void InAForstmt(AForstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForstmt(AForstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAForstmt(AForstmt node)
    {
        InAForstmt(node);
        if(node.GetRepeatfor() != null)
        {
            node.GetRepeatfor().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetForstmtIteratorOptions() != null)
        {
            node.GetForstmtIteratorOptions().Apply(this);
        }
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetOptionIncreaseDecrease() != null)
        {
            node.GetOptionIncreaseDecrease().Apply(this);
        }
        if(node.GetSnd() != null)
        {
            node.GetSnd().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetOptionStmtContinueBreak().Count];
            node.GetOptionStmtContinueBreak().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((POptionStmtContinueBreak) temp[i]).Apply(this);
            }
        }
        if(node.GetEndfor() != null)
        {
            node.GetEndfor().Apply(this);
        }
        OutAForstmt(node);
    }
    public virtual void InAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        InAOneForstmtIteratorOptions(node);
        if(node.GetNumdcl() != null)
        {
            node.GetNumdcl().Apply(this);
        }
        OutAOneForstmtIteratorOptions(node);
    }
    public virtual void InATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        InATwoForstmtIteratorOptions(node);
        if(node.GetAssstmt() != null)
        {
            node.GetAssstmt().Apply(this);
        }
        OutATwoForstmtIteratorOptions(node);
    }
    public virtual void InAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        InAThreeForstmtIteratorOptions(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetArrindex() != null)
        {
            node.GetArrindex().Apply(this);
        }
        OutAThreeForstmtIteratorOptions(node);
    }
    public virtual void InAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        InAOneOptionIncreaseDecrease(node);
        if(node.GetIncreaseby() != null)
        {
            node.GetIncreaseby().Apply(this);
        }
        OutAOneOptionIncreaseDecrease(node);
    }
    public virtual void InATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        InATwoOptionIncreaseDecrease(node);
        if(node.GetDecreaseby() != null)
        {
            node.GetDecreaseby().Apply(this);
        }
        OutATwoOptionIncreaseDecrease(node);
    }
    public virtual void InASwitchstmt(ASwitchstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASwitchstmt(ASwitchstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASwitchstmt(ASwitchstmt node)
    {
        InASwitchstmt(node);
        if(node.GetSwitch() != null)
        {
            node.GetSwitch().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetArrindex() != null)
        {
            node.GetArrindex().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetWhencase().Count];
            node.GetWhencase().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PWhencase) temp[i]).Apply(this);
            }
        }
        if(node.GetOtherwisecase() != null)
        {
            node.GetOtherwisecase().Apply(this);
        }
        if(node.GetEndswitch() != null)
        {
            node.GetEndswitch().Apply(this);
        }
        OutASwitchstmt(node);
    }
    public virtual void InAWhencase(AWhencase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhencase(AWhencase node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhencase(AWhencase node)
    {
        InAWhencase(node);
        if(node.GetWhen() != null)
        {
            node.GetWhen().Apply(this);
        }
        if(node.GetNumliteral() != null)
        {
            node.GetNumliteral().Apply(this);
        }
        if(node.GetDo() != null)
        {
            node.GetDo().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetFallthrough() != null)
        {
            node.GetFallthrough().Apply(this);
        }
        OutAWhencase(node);
    }
    public virtual void InAOtherwisecase(AOtherwisecase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOtherwisecase(AOtherwisecase node)
    {
        DefaultOut(node);
    }

    public override void CaseAOtherwisecase(AOtherwisecase node)
    {
        InAOtherwisecase(node);
        if(node.GetOtherwisedo() != null)
        {
            node.GetOtherwisedo().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        OutAOtherwisecase(node);
    }
    public virtual void InAAssstmt(AAssstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssstmt(AAssstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssstmt(AAssstmt node)
    {
        InAAssstmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetArrindex() != null)
        {
            node.GetArrindex().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAAssstmt(node);
    }
    public virtual void InAFunccall(AFunccall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunccall(AFunccall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunccall(AFunccall node)
    {
        InAFunccall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetParamsOptions() != null)
        {
            node.GetParamsOptions().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutAFunccall(node);
    }
    public virtual void InAParamsOptions(AParamsOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsOptions(AParamsOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsOptions(AParamsOptions node)
    {
        InAParamsOptions(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetMultiExpr().Count];
            node.GetMultiExpr().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PMultiExpr) temp[i]).Apply(this);
            }
        }
        OutAParamsOptions(node);
    }
    public virtual void InAMultiExpr(AMultiExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiExpr(AMultiExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiExpr(AMultiExpr node)
    {
        InAMultiExpr(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAMultiExpr(node);
    }
    public virtual void InAOneRetstmt(AOneRetstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneRetstmt(AOneRetstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneRetstmt(AOneRetstmt node)
    {
        InAOneRetstmt(node);
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        OutAOneRetstmt(node);
    }
    public virtual void InAArrindex(AArrindex node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrindex(AArrindex node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrindex(AArrindex node)
    {
        InAArrindex(node);
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        OutAArrindex(node);
    }
    public virtual void InASkipstmt(ASkipstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASkipstmt(ASkipstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASkipstmt(ASkipstmt node)
    {
        InASkipstmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutASkipstmt(node);
    }
    public virtual void InAOneExpr(AOneExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneExpr(AOneExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneExpr(AOneExpr node)
    {
        InAOneExpr(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAOneExpr(node);
    }
    public virtual void InATwoExpr(ATwoExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoExpr(ATwoExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoExpr(ATwoExpr node)
    {
        InATwoExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetAop() != null)
        {
            node.GetAop().Apply(this);
        }
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutATwoExpr(node);
    }
    public virtual void InAOneAop(AOneAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneAop(AOneAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneAop(AOneAop node)
    {
        InAOneAop(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAOneAop(node);
    }
    public virtual void InATwoAop(ATwoAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoAop(ATwoAop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoAop(ATwoAop node)
    {
        InATwoAop(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutATwoAop(node);
    }
    public virtual void InAThreeAop(AThreeAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeAop(AThreeAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeAop(AThreeAop node)
    {
        InAThreeAop(node);
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        OutAThreeAop(node);
    }
    public virtual void InAFourAop(AFourAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourAop(AFourAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourAop(AFourAop node)
    {
        InAFourAop(node);
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        OutAFourAop(node);
    }
    public virtual void InAFiveAop(AFiveAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFiveAop(AFiveAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFiveAop(AFiveAop node)
    {
        InAFiveAop(node);
        if(node.GetPow() != null)
        {
            node.GetPow().Apply(this);
        }
        OutAFiveAop(node);
    }
    public virtual void InAOneValue(AOneValue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneValue(AOneValue node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneValue(AOneValue node)
    {
        InAOneValue(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAOneValue(node);
    }
    public virtual void InATwoValue(ATwoValue node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoValue(ATwoValue node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoValue(ATwoValue node)
    {
        InATwoValue(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutATwoValue(node);
    }
    public virtual void InAThreeValue(AThreeValue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeValue(AThreeValue node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeValue(AThreeValue node)
    {
        InAThreeValue(node);
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutAThreeValue(node);
    }
    public virtual void InAOneConstant(AOneConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneConstant(AOneConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneConstant(AOneConstant node)
    {
        InAOneConstant(node);
        if(node.GetNumliteral() != null)
        {
            node.GetNumliteral().Apply(this);
        }
        OutAOneConstant(node);
    }
    public virtual void InATwoConstant(ATwoConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoConstant(ATwoConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoConstant(ATwoConstant node)
    {
        InATwoConstant(node);
        if(node.GetStrliteral() != null)
        {
            node.GetStrliteral().Apply(this);
        }
        OutATwoConstant(node);
    }
    public virtual void InAThreeConstant(AThreeConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeConstant(AThreeConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeConstant(AThreeConstant node)
    {
        InAThreeConstant(node);
        if(node.GetBoolliteral() != null)
        {
            node.GetBoolliteral().Apply(this);
        }
        OutAThreeConstant(node);
    }
    public virtual void InAOneComp(AOneComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneComp(AOneComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneComp(AOneComp node)
    {
        InAOneComp(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAOneComp(node);
    }
    public virtual void InATwoComp(ATwoComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoComp(ATwoComp node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoComp(ATwoComp node)
    {
        InATwoComp(node);
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        if(node.GetRelop() != null)
        {
            node.GetRelop().Apply(this);
        }
        if(node.GetSnd() != null)
        {
            node.GetSnd().Apply(this);
        }
        OutATwoComp(node);
    }
    public virtual void InAOneRelop(AOneRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneRelop(AOneRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneRelop(AOneRelop node)
    {
        InAOneRelop(node);
        if(node.GetGrthan() != null)
        {
            node.GetGrthan().Apply(this);
        }
        OutAOneRelop(node);
    }
    public virtual void InATwoRelop(ATwoRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoRelop(ATwoRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoRelop(ATwoRelop node)
    {
        InATwoRelop(node);
        if(node.GetGrthaneq() != null)
        {
            node.GetGrthaneq().Apply(this);
        }
        OutATwoRelop(node);
    }
    public virtual void InAThreeRelop(AThreeRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeRelop(AThreeRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeRelop(AThreeRelop node)
    {
        InAThreeRelop(node);
        if(node.GetLthan() != null)
        {
            node.GetLthan().Apply(this);
        }
        OutAThreeRelop(node);
    }
    public virtual void InAFourRelop(AFourRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourRelop(AFourRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourRelop(AFourRelop node)
    {
        InAFourRelop(node);
        if(node.GetLthaneq() != null)
        {
            node.GetLthaneq().Apply(this);
        }
        OutAFourRelop(node);
    }
    public virtual void InAFiveRelop(AFiveRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFiveRelop(AFiveRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFiveRelop(AFiveRelop node)
    {
        InAFiveRelop(node);
        if(node.GetEq() != null)
        {
            node.GetEq().Apply(this);
        }
        OutAFiveRelop(node);
    }
    public virtual void InASixRelop(ASixRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutASixRelop(ASixRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseASixRelop(ASixRelop node)
    {
        InASixRelop(node);
        if(node.GetNeq() != null)
        {
            node.GetNeq().Apply(this);
        }
        OutASixRelop(node);
    }
    public virtual void InAOneCond(AOneCond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneCond(AOneCond node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneCond(AOneCond node)
    {
        InAOneCond(node);
        if(node.GetComp() != null)
        {
            node.GetComp().Apply(this);
        }
        OutAOneCond(node);
    }
    public virtual void InATwoCond(ATwoCond node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoCond(ATwoCond node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoCond(ATwoCond node)
    {
        InATwoCond(node);
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        if(node.GetBop() != null)
        {
            node.GetBop().Apply(this);
        }
        if(node.GetSnd() != null)
        {
            node.GetSnd().Apply(this);
        }
        OutATwoCond(node);
    }
    public virtual void InAOneBop(AOneBop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneBop(AOneBop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneBop(AOneBop node)
    {
        InAOneBop(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAOneBop(node);
    }
    public virtual void InATwoBop(ATwoBop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoBop(ATwoBop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoBop(ATwoBop node)
    {
        InATwoBop(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutATwoBop(node);
    }
    public virtual void InAVardcl(AVardcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVardcl(AVardcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAVardcl(AVardcl node)
    {
        InAVardcl(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetVarOptions() != null)
        {
            node.GetVarOptions().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAVardcl(node);
    }
    public virtual void InAOneVarOptions(AOneVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneVarOptions(AOneVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneVarOptions(AOneVarOptions node)
    {
        InAOneVarOptions(node);
        if(node.GetNumdcl() != null)
        {
            node.GetNumdcl().Apply(this);
        }
        OutAOneVarOptions(node);
    }
    public virtual void InATwoVarOptions(ATwoVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoVarOptions(ATwoVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoVarOptions(ATwoVarOptions node)
    {
        InATwoVarOptions(node);
        if(node.GetStringdcl() != null)
        {
            node.GetStringdcl().Apply(this);
        }
        OutATwoVarOptions(node);
    }
    public virtual void InAThreeVarOptions(AThreeVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeVarOptions(AThreeVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeVarOptions(AThreeVarOptions node)
    {
        InAThreeVarOptions(node);
        if(node.GetBooldcl() != null)
        {
            node.GetBooldcl().Apply(this);
        }
        OutAThreeVarOptions(node);
    }
    public virtual void InAFourVarOptions(AFourVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourVarOptions(AFourVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourVarOptions(AFourVarOptions node)
    {
        InAFourVarOptions(node);
        if(node.GetArrdcl() != null)
        {
            node.GetArrdcl().Apply(this);
        }
        OutAFourVarOptions(node);
    }
    public virtual void InANumdcl(ANumdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumdcl(ANumdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseANumdcl(ANumdcl node)
    {
        InANumdcl(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutANumdcl(node);
    }
    public virtual void InAStringdcl(AStringdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringdcl(AStringdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringdcl(AStringdcl node)
    {
        InAStringdcl(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutAStringdcl(node);
    }
    public virtual void InABooldcl(ABooldcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooldcl(ABooldcl node)
    {
        DefaultOut(node);
    }

    public override void CaseABooldcl(ABooldcl node)
    {
        InABooldcl(node);
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutABooldcl(node);
    }
    public virtual void InAArrdcl(AArrdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrdcl(AArrdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrdcl(AArrdcl node)
    {
        InAArrdcl(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetMulti().Count];
            node.GetMulti().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PArrsizedcl) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetArrIdOrExpr() != null)
        {
            node.GetArrIdOrExpr().Apply(this);
        }
        OutAArrdcl(node);
    }
    public virtual void InAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        InAOneArrIdOrExpr(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAOneArrIdOrExpr(node);
    }
    public virtual void InATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        InATwoArrIdOrExpr(node);
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        if(node.GetParamsOptions() != null)
        {
            node.GetParamsOptions().Apply(this);
        }
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        OutATwoArrIdOrExpr(node);
    }
    public virtual void InAArrsizedcl(AArrsizedcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrsizedcl(AArrsizedcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrsizedcl(AArrsizedcl node)
    {
        InAArrsizedcl(node);
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        if(node.GetNumliteral() != null)
        {
            node.GetNumliteral().Apply(this);
        }
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        OutAArrsizedcl(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetSetuploop() != null)
        {
            node.GetSetuploop().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAOneSetuploop(AOneSetuploop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneSetuploop(AOneSetuploop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneSetuploop(AOneSetuploop node)
    {
        InAOneSetuploop(node);
        if(node.GetSetup() != null)
        {
            node.GetSetup().Apply(this);
        }
        OutAOneSetuploop(node);
    }
    public virtual void InATwoSetuploop(ATwoSetuploop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoSetuploop(ATwoSetuploop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoSetuploop(ATwoSetuploop node)
    {
        InATwoSetuploop(node);
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        OutATwoSetuploop(node);
    }
    public virtual void InAThreeSetuploop(AThreeSetuploop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeSetuploop(AThreeSetuploop node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeSetuploop(AThreeSetuploop node)
    {
        InAThreeSetuploop(node);
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        if(node.GetSetup() != null)
        {
            node.GetSetup().Apply(this);
        }
        OutAThreeSetuploop(node);
    }
    public virtual void InASetup(ASetup node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetup(ASetup node)
    {
        DefaultOut(node);
    }

    public override void CaseASetup(ASetup node)
    {
        InASetup(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetEndsetup() != null)
        {
            node.GetEndsetup().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetSetup() != null)
        {
            node.GetSetup().Apply(this);
        }
        OutASetup(node);
    }
    public virtual void InALoop(ALoop node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoop(ALoop node)
    {
        DefaultOut(node);
    }

    public override void CaseALoop(ALoop node)
    {
        InALoop(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetEndloop() != null)
        {
            node.GetEndloop().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        OutALoop(node);
    }
    public virtual void InAFunctions(AFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctions(AFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctions(AFunctions node)
    {
        InAFunctions(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetEndfunctions() != null)
        {
            node.GetEndfunctions().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFuncdcl().Count];
            node.GetFuncdcl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PFuncdcl) temp[i]).Apply(this);
            }
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAFunctions(node);
    }
    public virtual void InAOneFuncdcl(AOneFuncdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneFuncdcl(AOneFuncdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneFuncdcl(AOneFuncdcl node)
    {
        InAOneFuncdcl(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetEndfunction() != null)
        {
            node.GetEndfunction().Apply(this);
        }
        if(node.GetRetstmt() != null)
        {
            node.GetRetstmt().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetBrackets() != null)
        {
            node.GetBrackets().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAOneFuncdcl(node);
    }
    public virtual void InATwoFuncdcl(ATwoFuncdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoFuncdcl(ATwoFuncdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoFuncdcl(ATwoFuncdcl node)
    {
        InATwoFuncdcl(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetEndfunction() != null)
        {
            node.GetEndfunction().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetBlank() != null)
        {
            node.GetBlank().Apply(this);
        }
        OutATwoFuncdcl(node);
    }
    public virtual void InABrackets(ABrackets node)
    {
        DefaultIn(node);
    }

    public virtual void OutABrackets(ABrackets node)
    {
        DefaultOut(node);
    }

    public override void CaseABrackets(ABrackets node)
    {
        InABrackets(node);
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        OutABrackets(node);
    }
    public virtual void InAParams(AParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParams(AParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAParams(AParams node)
    {
        InAParams(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetParamsContent() != null)
        {
            node.GetParamsContent().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        OutAParams(node);
    }
    public virtual void InAParamsContent(AParamsContent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsContent(AParamsContent node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsContent(AParamsContent node)
    {
        InAParamsContent(node);
        {
            Object[] temp = new Object[node.GetParamsMulti().Count];
            node.GetParamsMulti().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PParamsMulti) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetBrackets().Count];
            node.GetBrackets().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PBrackets) temp[i]).Apply(this);
            }
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAParamsContent(node);
    }
    public virtual void InAParamsMulti(AParamsMulti node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsMulti(AParamsMulti node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsMulti(AParamsMulti node)
    {
        InAParamsMulti(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetBrackets().Count];
            node.GetBrackets().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PBrackets) temp[i]).Apply(this);
            }
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutAParamsMulti(node);
    }
    public virtual void InAOneType(AOneType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneType(AOneType node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneType(AOneType node)
    {
        InAOneType(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutAOneType(node);
    }
    public virtual void InATwoType(ATwoType node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoType(ATwoType node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoType(ATwoType node)
    {
        InATwoType(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutATwoType(node);
    }
    public virtual void InAThreeType(AThreeType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeType(AThreeType node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeType(AThreeType node)
    {
        InAThreeType(node);
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        OutAThreeType(node);
    }
    public virtual void InAOneStmt(AOneStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneStmt(AOneStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneStmt(AOneStmt node)
    {
        InAOneStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetIfstmt() != null)
        {
            node.GetIfstmt().Apply(this);
        }
        OutAOneStmt(node);
    }
    public virtual void InATwoStmt(ATwoStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoStmt(ATwoStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoStmt(ATwoStmt node)
    {
        InATwoStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetWhilestmt() != null)
        {
            node.GetWhilestmt().Apply(this);
        }
        OutATwoStmt(node);
    }
    public virtual void InAThreeStmt(AThreeStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeStmt(AThreeStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeStmt(AThreeStmt node)
    {
        InAThreeStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetForstmt() != null)
        {
            node.GetForstmt().Apply(this);
        }
        OutAThreeStmt(node);
    }
    public virtual void InAFourStmt(AFourStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourStmt(AFourStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourStmt(AFourStmt node)
    {
        InAFourStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetVardcl() != null)
        {
            node.GetVardcl().Apply(this);
        }
        OutAFourStmt(node);
    }
    public virtual void InAFiveStmt(AFiveStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFiveStmt(AFiveStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFiveStmt(AFiveStmt node)
    {
        InAFiveStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetAssstmt() != null)
        {
            node.GetAssstmt().Apply(this);
        }
        OutAFiveStmt(node);
    }
    public virtual void InASixStmt(ASixStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASixStmt(ASixStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASixStmt(ASixStmt node)
    {
        InASixStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetFunccall() != null)
        {
            node.GetFunccall().Apply(this);
        }
        OutASixStmt(node);
    }
    public virtual void InASevenStmt(ASevenStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASevenStmt(ASevenStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASevenStmt(ASevenStmt node)
    {
        InASevenStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetRetstmt() != null)
        {
            node.GetRetstmt().Apply(this);
        }
        OutASevenStmt(node);
    }
    public virtual void InAEightStmt(AEightStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEightStmt(AEightStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAEightStmt(AEightStmt node)
    {
        InAEightStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetSwitchstmt() != null)
        {
            node.GetSwitchstmt().Apply(this);
        }
        OutAEightStmt(node);
    }
    public virtual void InANineStmt(ANineStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANineStmt(ANineStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANineStmt(ANineStmt node)
    {
        InANineStmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetSkipstmt() != null)
        {
            node.GetSkipstmt().Apply(this);
        }
        OutANineStmt(node);
    }
    public virtual void InANonelseIfstmt(ANonelseIfstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutANonelseIfstmt(ANonelseIfstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseANonelseIfstmt(ANonelseIfstmt node)
    {
        InANonelseIfstmt(node);
        if(node.GetEndif() != null)
        {
            node.GetEndif().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutANonelseIfstmt(node);
    }
    public virtual void InAWithelseIfstmt(AWithelseIfstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithelseIfstmt(AWithelseIfstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithelseIfstmt(AWithelseIfstmt node)
    {
        InAWithelseIfstmt(node);
        if(node.GetEndif() != null)
        {
            node.GetEndif().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetSnd().Count];
            node.GetSnd().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFst().Count];
            node.GetFst().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAWithelseIfstmt(node);
    }
    public virtual void InAWhilestmt(AWhilestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilestmt(AWhilestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilestmt(AWhilestmt node)
    {
        InAWhilestmt(node);
        if(node.GetEndwhile() != null)
        {
            node.GetEndwhile().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetOptionStmtContinueBreak().Count];
            node.GetOptionStmtContinueBreak().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((POptionStmtContinueBreak) temp[i]).Apply(this);
            }
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetRepeatwhile() != null)
        {
            node.GetRepeatwhile().Apply(this);
        }
        OutAWhilestmt(node);
    }
    public virtual void InAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOptionStmtContinueBreak(AOneOptionStmtContinueBreak node)
    {
        InAOneOptionStmtContinueBreak(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutAOneOptionStmtContinueBreak(node);
    }
    public virtual void InATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoOptionStmtContinueBreak(ATwoOptionStmtContinueBreak node)
    {
        InATwoOptionStmtContinueBreak(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetContinue() != null)
        {
            node.GetContinue().Apply(this);
        }
        OutATwoOptionStmtContinueBreak(node);
    }
    public virtual void InAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeOptionStmtContinueBreak(AThreeOptionStmtContinueBreak node)
    {
        InAThreeOptionStmtContinueBreak(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetBreak() != null)
        {
            node.GetBreak().Apply(this);
        }
        OutAThreeOptionStmtContinueBreak(node);
    }
    public virtual void InAForstmt(AForstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAForstmt(AForstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAForstmt(AForstmt node)
    {
        InAForstmt(node);
        if(node.GetEndfor() != null)
        {
            node.GetEndfor().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetOptionStmtContinueBreak().Count];
            node.GetOptionStmtContinueBreak().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((POptionStmtContinueBreak) temp[i]).Apply(this);
            }
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetSnd() != null)
        {
            node.GetSnd().Apply(this);
        }
        if(node.GetOptionIncreaseDecrease() != null)
        {
            node.GetOptionIncreaseDecrease().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        if(node.GetTo() != null)
        {
            node.GetTo().Apply(this);
        }
        if(node.GetForstmtIteratorOptions() != null)
        {
            node.GetForstmtIteratorOptions().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetRepeatfor() != null)
        {
            node.GetRepeatfor().Apply(this);
        }
        OutAForstmt(node);
    }
    public virtual void InAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneForstmtIteratorOptions(AOneForstmtIteratorOptions node)
    {
        InAOneForstmtIteratorOptions(node);
        if(node.GetNumdcl() != null)
        {
            node.GetNumdcl().Apply(this);
        }
        OutAOneForstmtIteratorOptions(node);
    }
    public virtual void InATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoForstmtIteratorOptions(ATwoForstmtIteratorOptions node)
    {
        InATwoForstmtIteratorOptions(node);
        if(node.GetAssstmt() != null)
        {
            node.GetAssstmt().Apply(this);
        }
        OutATwoForstmtIteratorOptions(node);
    }
    public virtual void InAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeForstmtIteratorOptions(AThreeForstmtIteratorOptions node)
    {
        InAThreeForstmtIteratorOptions(node);
        if(node.GetArrindex() != null)
        {
            node.GetArrindex().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAThreeForstmtIteratorOptions(node);
    }
    public virtual void InAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOptionIncreaseDecrease(AOneOptionIncreaseDecrease node)
    {
        InAOneOptionIncreaseDecrease(node);
        if(node.GetIncreaseby() != null)
        {
            node.GetIncreaseby().Apply(this);
        }
        OutAOneOptionIncreaseDecrease(node);
    }
    public virtual void InATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoOptionIncreaseDecrease(ATwoOptionIncreaseDecrease node)
    {
        InATwoOptionIncreaseDecrease(node);
        if(node.GetDecreaseby() != null)
        {
            node.GetDecreaseby().Apply(this);
        }
        OutATwoOptionIncreaseDecrease(node);
    }
    public virtual void InASwitchstmt(ASwitchstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASwitchstmt(ASwitchstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASwitchstmt(ASwitchstmt node)
    {
        InASwitchstmt(node);
        if(node.GetEndswitch() != null)
        {
            node.GetEndswitch().Apply(this);
        }
        if(node.GetOtherwisecase() != null)
        {
            node.GetOtherwisecase().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetWhencase().Count];
            node.GetWhencase().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PWhencase) temp[i]).Apply(this);
            }
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetArrindex() != null)
        {
            node.GetArrindex().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetSwitch() != null)
        {
            node.GetSwitch().Apply(this);
        }
        OutASwitchstmt(node);
    }
    public virtual void InAWhencase(AWhencase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhencase(AWhencase node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhencase(AWhencase node)
    {
        InAWhencase(node);
        if(node.GetFallthrough() != null)
        {
            node.GetFallthrough().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetDo() != null)
        {
            node.GetDo().Apply(this);
        }
        if(node.GetNumliteral() != null)
        {
            node.GetNumliteral().Apply(this);
        }
        if(node.GetWhen() != null)
        {
            node.GetWhen().Apply(this);
        }
        OutAWhencase(node);
    }
    public virtual void InAOtherwisecase(AOtherwisecase node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOtherwisecase(AOtherwisecase node)
    {
        DefaultOut(node);
    }

    public override void CaseAOtherwisecase(AOtherwisecase node)
    {
        InAOtherwisecase(node);
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        if(node.GetOtherwisedo() != null)
        {
            node.GetOtherwisedo().Apply(this);
        }
        OutAOtherwisecase(node);
    }
    public virtual void InAAssstmt(AAssstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssstmt(AAssstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssstmt(AAssstmt node)
    {
        InAAssstmt(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetArrindex() != null)
        {
            node.GetArrindex().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssstmt(node);
    }
    public virtual void InAFunccall(AFunccall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunccall(AFunccall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunccall(AFunccall node)
    {
        InAFunccall(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetParamsOptions() != null)
        {
            node.GetParamsOptions().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunccall(node);
    }
    public virtual void InAParamsOptions(AParamsOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsOptions(AParamsOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsOptions(AParamsOptions node)
    {
        InAParamsOptions(node);
        {
            Object[] temp = new Object[node.GetMultiExpr().Count];
            node.GetMultiExpr().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PMultiExpr) temp[i]).Apply(this);
            }
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAParamsOptions(node);
    }
    public virtual void InAMultiExpr(AMultiExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiExpr(AMultiExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiExpr(AMultiExpr node)
    {
        InAMultiExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutAMultiExpr(node);
    }
    public virtual void InAOneRetstmt(AOneRetstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneRetstmt(AOneRetstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneRetstmt(AOneRetstmt node)
    {
        InAOneRetstmt(node);
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        OutAOneRetstmt(node);
    }
    public virtual void InAArrindex(AArrindex node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrindex(AArrindex node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrindex(AArrindex node)
    {
        InAArrindex(node);
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        OutAArrindex(node);
    }
    public virtual void InASkipstmt(ASkipstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutASkipstmt(ASkipstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseASkipstmt(ASkipstmt node)
    {
        InASkipstmt(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        OutASkipstmt(node);
    }
    public virtual void InAOneExpr(AOneExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneExpr(AOneExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneExpr(AOneExpr node)
    {
        InAOneExpr(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        OutAOneExpr(node);
    }
    public virtual void InATwoExpr(ATwoExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoExpr(ATwoExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoExpr(ATwoExpr node)
    {
        InATwoExpr(node);
        if(node.GetValue() != null)
        {
            node.GetValue().Apply(this);
        }
        if(node.GetAop() != null)
        {
            node.GetAop().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutATwoExpr(node);
    }
    public virtual void InAOneAop(AOneAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneAop(AOneAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneAop(AOneAop node)
    {
        InAOneAop(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAOneAop(node);
    }
    public virtual void InATwoAop(ATwoAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoAop(ATwoAop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoAop(ATwoAop node)
    {
        InATwoAop(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutATwoAop(node);
    }
    public virtual void InAThreeAop(AThreeAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeAop(AThreeAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeAop(AThreeAop node)
    {
        InAThreeAop(node);
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        OutAThreeAop(node);
    }
    public virtual void InAFourAop(AFourAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourAop(AFourAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourAop(AFourAop node)
    {
        InAFourAop(node);
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        OutAFourAop(node);
    }
    public virtual void InAFiveAop(AFiveAop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFiveAop(AFiveAop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFiveAop(AFiveAop node)
    {
        InAFiveAop(node);
        if(node.GetPow() != null)
        {
            node.GetPow().Apply(this);
        }
        OutAFiveAop(node);
    }
    public virtual void InAOneValue(AOneValue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneValue(AOneValue node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneValue(AOneValue node)
    {
        InAOneValue(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAOneValue(node);
    }
    public virtual void InATwoValue(ATwoValue node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoValue(ATwoValue node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoValue(ATwoValue node)
    {
        InATwoValue(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutATwoValue(node);
    }
    public virtual void InAThreeValue(AThreeValue node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeValue(AThreeValue node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeValue(AThreeValue node)
    {
        InAThreeValue(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        OutAThreeValue(node);
    }
    public virtual void InAOneConstant(AOneConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneConstant(AOneConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneConstant(AOneConstant node)
    {
        InAOneConstant(node);
        if(node.GetNumliteral() != null)
        {
            node.GetNumliteral().Apply(this);
        }
        OutAOneConstant(node);
    }
    public virtual void InATwoConstant(ATwoConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoConstant(ATwoConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoConstant(ATwoConstant node)
    {
        InATwoConstant(node);
        if(node.GetStrliteral() != null)
        {
            node.GetStrliteral().Apply(this);
        }
        OutATwoConstant(node);
    }
    public virtual void InAThreeConstant(AThreeConstant node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeConstant(AThreeConstant node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeConstant(AThreeConstant node)
    {
        InAThreeConstant(node);
        if(node.GetBoolliteral() != null)
        {
            node.GetBoolliteral().Apply(this);
        }
        OutAThreeConstant(node);
    }
    public virtual void InAOneComp(AOneComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneComp(AOneComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneComp(AOneComp node)
    {
        InAOneComp(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAOneComp(node);
    }
    public virtual void InATwoComp(ATwoComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoComp(ATwoComp node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoComp(ATwoComp node)
    {
        InATwoComp(node);
        if(node.GetSnd() != null)
        {
            node.GetSnd().Apply(this);
        }
        if(node.GetRelop() != null)
        {
            node.GetRelop().Apply(this);
        }
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        OutATwoComp(node);
    }
    public virtual void InAOneRelop(AOneRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneRelop(AOneRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneRelop(AOneRelop node)
    {
        InAOneRelop(node);
        if(node.GetGrthan() != null)
        {
            node.GetGrthan().Apply(this);
        }
        OutAOneRelop(node);
    }
    public virtual void InATwoRelop(ATwoRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoRelop(ATwoRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoRelop(ATwoRelop node)
    {
        InATwoRelop(node);
        if(node.GetGrthaneq() != null)
        {
            node.GetGrthaneq().Apply(this);
        }
        OutATwoRelop(node);
    }
    public virtual void InAThreeRelop(AThreeRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeRelop(AThreeRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeRelop(AThreeRelop node)
    {
        InAThreeRelop(node);
        if(node.GetLthan() != null)
        {
            node.GetLthan().Apply(this);
        }
        OutAThreeRelop(node);
    }
    public virtual void InAFourRelop(AFourRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourRelop(AFourRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourRelop(AFourRelop node)
    {
        InAFourRelop(node);
        if(node.GetLthaneq() != null)
        {
            node.GetLthaneq().Apply(this);
        }
        OutAFourRelop(node);
    }
    public virtual void InAFiveRelop(AFiveRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFiveRelop(AFiveRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseAFiveRelop(AFiveRelop node)
    {
        InAFiveRelop(node);
        if(node.GetEq() != null)
        {
            node.GetEq().Apply(this);
        }
        OutAFiveRelop(node);
    }
    public virtual void InASixRelop(ASixRelop node)
    {
        DefaultIn(node);
    }

    public virtual void OutASixRelop(ASixRelop node)
    {
        DefaultOut(node);
    }

    public override void CaseASixRelop(ASixRelop node)
    {
        InASixRelop(node);
        if(node.GetNeq() != null)
        {
            node.GetNeq().Apply(this);
        }
        OutASixRelop(node);
    }
    public virtual void InAOneCond(AOneCond node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneCond(AOneCond node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneCond(AOneCond node)
    {
        InAOneCond(node);
        if(node.GetComp() != null)
        {
            node.GetComp().Apply(this);
        }
        OutAOneCond(node);
    }
    public virtual void InATwoCond(ATwoCond node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoCond(ATwoCond node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoCond(ATwoCond node)
    {
        InATwoCond(node);
        if(node.GetSnd() != null)
        {
            node.GetSnd().Apply(this);
        }
        if(node.GetBop() != null)
        {
            node.GetBop().Apply(this);
        }
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        OutATwoCond(node);
    }
    public virtual void InAOneBop(AOneBop node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneBop(AOneBop node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneBop(AOneBop node)
    {
        InAOneBop(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAOneBop(node);
    }
    public virtual void InATwoBop(ATwoBop node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoBop(ATwoBop node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoBop(ATwoBop node)
    {
        InATwoBop(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutATwoBop(node);
    }
    public virtual void InAVardcl(AVardcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVardcl(AVardcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAVardcl(AVardcl node)
    {
        InAVardcl(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetVarOptions() != null)
        {
            node.GetVarOptions().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAVardcl(node);
    }
    public virtual void InAOneVarOptions(AOneVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneVarOptions(AOneVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneVarOptions(AOneVarOptions node)
    {
        InAOneVarOptions(node);
        if(node.GetNumdcl() != null)
        {
            node.GetNumdcl().Apply(this);
        }
        OutAOneVarOptions(node);
    }
    public virtual void InATwoVarOptions(ATwoVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoVarOptions(ATwoVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoVarOptions(ATwoVarOptions node)
    {
        InATwoVarOptions(node);
        if(node.GetStringdcl() != null)
        {
            node.GetStringdcl().Apply(this);
        }
        OutATwoVarOptions(node);
    }
    public virtual void InAThreeVarOptions(AThreeVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThreeVarOptions(AThreeVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAThreeVarOptions(AThreeVarOptions node)
    {
        InAThreeVarOptions(node);
        if(node.GetBooldcl() != null)
        {
            node.GetBooldcl().Apply(this);
        }
        OutAThreeVarOptions(node);
    }
    public virtual void InAFourVarOptions(AFourVarOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFourVarOptions(AFourVarOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAFourVarOptions(AFourVarOptions node)
    {
        InAFourVarOptions(node);
        if(node.GetArrdcl() != null)
        {
            node.GetArrdcl().Apply(this);
        }
        OutAFourVarOptions(node);
    }
    public virtual void InANumdcl(ANumdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumdcl(ANumdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseANumdcl(ANumdcl node)
    {
        InANumdcl(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumdcl(node);
    }
    public virtual void InAStringdcl(AStringdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringdcl(AStringdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringdcl(AStringdcl node)
    {
        InAStringdcl(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringdcl(node);
    }
    public virtual void InABooldcl(ABooldcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutABooldcl(ABooldcl node)
    {
        DefaultOut(node);
    }

    public override void CaseABooldcl(ABooldcl node)
    {
        InABooldcl(node);
        if(node.GetNl() != null)
        {
            node.GetNl().Apply(this);
        }
        if(node.GetCond() != null)
        {
            node.GetCond().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        OutABooldcl(node);
    }
    public virtual void InAArrdcl(AArrdcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrdcl(AArrdcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrdcl(AArrdcl node)
    {
        InAArrdcl(node);
        if(node.GetArrIdOrExpr() != null)
        {
            node.GetArrIdOrExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetMulti().Count];
            node.GetMulti().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PArrsizedcl) temp[i]).Apply(this);
            }
        }
        if(node.GetFst() != null)
        {
            node.GetFst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAArrdcl(node);
    }
    public virtual void InAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneArrIdOrExpr(AOneArrIdOrExpr node)
    {
        InAOneArrIdOrExpr(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAOneArrIdOrExpr(node);
    }
    public virtual void InATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseATwoArrIdOrExpr(ATwoArrIdOrExpr node)
    {
        InATwoArrIdOrExpr(node);
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        if(node.GetParamsOptions() != null)
        {
            node.GetParamsOptions().Apply(this);
        }
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        OutATwoArrIdOrExpr(node);
    }
    public virtual void InAArrsizedcl(AArrsizedcl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrsizedcl(AArrsizedcl node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrsizedcl(AArrsizedcl node)
    {
        InAArrsizedcl(node);
        if(node.GetRbrack() != null)
        {
            node.GetRbrack().Apply(this);
        }
        if(node.GetNumliteral() != null)
        {
            node.GetNumliteral().Apply(this);
        }
        if(node.GetLbrack() != null)
        {
            node.GetLbrack().Apply(this);
        }
        OutAArrsizedcl(node);
    }
}
} // namespace STEP.analysis
