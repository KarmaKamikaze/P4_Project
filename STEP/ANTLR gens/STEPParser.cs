//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:/Code/repos/STEP/STEP/ANTLR gens\STEP.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class STEPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, END_OF_LINE_COMMENT=2, MULTILINE_COMMENT=3, LPAREN=4, RPAREN=5, 
		LBRACK=6, RBRACK=7, ASSIGN=8, PLUS=9, MINUS=10, DIVIDE=11, MULT=12, POW=13, 
		GRTHAN=14, GRTHANEQ=15, LTHAN=16, LTHANEQ=17, EQ=18, NEQ=19, NEG=20, NL=21, 
		COMMA=22, INTLITERAL=23, NUMLITERAL=24, STRLITERAL=25, BOOLLITERAL=26, 
		SETUP=27, ENDSETUP=28, LOOP=29, ENDLOOP=30, FUNCTIONS=31, ENDFUNCTIONS=32, 
		FUNCTION=33, ENDFUNCTION=34, VARIABLES=35, ENDVARIABLES=36, BLANK=37, 
		NUMBER=38, STRING=39, BOOLEAN=40, ANALOGPIN=41, DIGITALPIN=42, IF=43, 
		ENDIF=44, ELSE=45, CONTINUE=46, BREAK=47, REPEATWHILE=48, ENDWHILE=49, 
		REPEATFOR=50, ENDFOR=51, TO=52, CHANGEBY=53, SWITCH=54, ENDSWITCH=55, 
		WHEN=56, DO=57, FALLTHROUGH=58, OTHERWISEDO=59, RETURN=60, AND=61, OR=62, 
		CONSTANT=63, ID=64;
	public const int
		RULE_program = 0, RULE_setuploop = 1, RULE_setup = 2, RULE_loop = 3, RULE_variables = 4, 
		RULE_var_or_nl = 5, RULE_functions = 6, RULE_funcdcl = 7, RULE_funcdcl_or_nl = 8, 
		RULE_brackets = 9, RULE_params = 10, RULE_params_content = 11, RULE_params_multi = 12, 
		RULE_type = 13, RULE_stmt = 14, RULE_stmts = 15, RULE_loop_stmt = 16, 
		RULE_loop_stmts = 17, RULE_loopifbody = 18, RULE_ifstmt = 19, RULE_elseifstmt = 20, 
		RULE_elsestmt = 21, RULE_loopifstmt = 22, RULE_loopelseifstmt = 23, RULE_loopelsestmt = 24, 
		RULE_whilestmt = 25, RULE_forstmt = 26, RULE_for_iter_opt = 27, RULE_assstmt = 28, 
		RULE_funccall = 29, RULE_params_options = 30, RULE_multi_expr = 31, RULE_retstmt = 32, 
		RULE_arrindex = 33, RULE_expr = 34, RULE_term = 35, RULE_factor = 36, 
		RULE_value = 37, RULE_constant = 38, RULE_logicexpr = 39, RULE_logicequal = 40, 
		RULE_logiccomp = 41, RULE_logiccompop = 42, RULE_logicvalue = 43, RULE_vardcl = 44, 
		RULE_var_options = 45, RULE_numdcl = 46, RULE_stringdcl = 47, RULE_booldcl = 48, 
		RULE_pindcl = 49, RULE_arrdcl = 50, RULE_arr_id_or_lit = 51, RULE_arrsizedcl = 52;
	public static readonly string[] ruleNames = {
		"program", "setuploop", "setup", "loop", "variables", "var_or_nl", "functions", 
		"funcdcl", "funcdcl_or_nl", "brackets", "params", "params_content", "params_multi", 
		"type", "stmt", "stmts", "loop_stmt", "loop_stmts", "loopifbody", "ifstmt", 
		"elseifstmt", "elsestmt", "loopifstmt", "loopelseifstmt", "loopelsestmt", 
		"whilestmt", "forstmt", "for_iter_opt", "assstmt", "funccall", "params_options", 
		"multi_expr", "retstmt", "arrindex", "expr", "term", "factor", "value", 
		"constant", "logicexpr", "logicequal", "logiccomp", "logiccompop", "logicvalue", 
		"vardcl", "var_options", "numdcl", "stringdcl", "booldcl", "pindcl", "arrdcl", 
		"arr_id_or_lit", "arrsizedcl"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'('", "')'", "'['", "']'", "'='", "'+'", "'-'", 
		"'/'", "'*'", "'^'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!:'", "'!'", 
		null, "','", null, null, null, null, "'setup'", "'end setup'", "'loop'", 
		"'end loop'", "'functions'", "'end functions'", "'function'", "'end function'", 
		"'variables'", "'end variables'", "'blank'", "'number'", "'string'", "'boolean'", 
		"'analogpin'", "'digitalpin'", "'if'", "'end if'", "'else'", "'continue'", 
		"'break'", "'repeat while'", "'end while'", "'repeat for'", "'end for'", 
		"'to'", "'change by'", "'switch'", "'end switch'", "'when'", "'do'", "'fallthrough'", 
		"'otherwise do'", "'return'", "'and'", "'or'", "'constant'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "END_OF_LINE_COMMENT", "MULTILINE_COMMENT", "LPAREN", 
		"RPAREN", "LBRACK", "RBRACK", "ASSIGN", "PLUS", "MINUS", "DIVIDE", "MULT", 
		"POW", "GRTHAN", "GRTHANEQ", "LTHAN", "LTHANEQ", "EQ", "NEQ", "NEG", "NL", 
		"COMMA", "INTLITERAL", "NUMLITERAL", "STRLITERAL", "BOOLLITERAL", "SETUP", 
		"ENDSETUP", "LOOP", "ENDLOOP", "FUNCTIONS", "ENDFUNCTIONS", "FUNCTION", 
		"ENDFUNCTION", "VARIABLES", "ENDVARIABLES", "BLANK", "NUMBER", "STRING", 
		"BOOLEAN", "ANALOGPIN", "DIGITALPIN", "IF", "ENDIF", "ELSE", "CONTINUE", 
		"BREAK", "REPEATWHILE", "ENDWHILE", "REPEATFOR", "ENDFOR", "TO", "CHANGEBY", 
		"SWITCH", "ENDSWITCH", "WHEN", "DO", "FALLTHROUGH", "OTHERWISEDO", "RETURN", 
		"AND", "OR", "CONSTANT", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "STEP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static STEPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public STEPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public STEPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetuploopContext setuploop() {
			return GetRuleContext<SetuploopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(STEPParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(STEPParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables() {
			return GetRuleContext<VariablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 106;
				Match(NL);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLES) {
				{
				State = 112;
				variables();
				}
			}

			State = 115;
			setuploop();
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FUNCTIONS) {
				{
				State = 116;
				functions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetuploopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(STEPParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(STEPParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public SetuploopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setuploop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterSetuploop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitSetuploop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetuploop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetuploopContext setuploop() {
		SetuploopContext _localctx = new SetuploopContext(Context, State);
		EnterRule(_localctx, 2, RULE_setuploop);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				setup();
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 120;
					Match(NL);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				loop();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 127;
					Match(NL);
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				setup();
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 134;
					Match(NL);
					}
					}
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 140;
				loop();
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 141;
					Match(NL);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETUP() { return GetToken(STEPParser.SETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSETUP() { return GetToken(STEPParser.ENDSETUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(SETUP);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 150;
				stmt();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			Match(ENDSETUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(STEPParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDLOOP() { return GetToken(STEPParser.ENDLOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 6, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(LOOP);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 159;
				stmt();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(ENDLOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(STEPParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDVARIABLES() { return GetToken(STEPParser.ENDVARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_or_nlContext[] var_or_nl() {
			return GetRuleContexts<Var_or_nlContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_or_nlContext var_or_nl(int i) {
			return GetRuleContext<Var_or_nlContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(STEPParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(STEPParser.NL, i);
		}
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 8, RULE_variables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(VARIABLES);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << NUMBER) | (1L << STRING) | (1L << BOOLEAN) | (1L << ANALOGPIN) | (1L << DIGITALPIN) | (1L << CONSTANT))) != 0)) {
				{
				{
				State = 168;
				var_or_nl();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(ENDVARIABLES);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 175;
				Match(NL);
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_or_nlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VardclContext vardcl() {
			return GetRuleContext<VardclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PindclContext pindcl() {
			return GetRuleContext<PindclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(STEPParser.NL, 0); }
		public Var_or_nlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_or_nl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterVar_or_nl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitVar_or_nl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_or_nl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_or_nlContext var_or_nl() {
		Var_or_nlContext _localctx = new Var_or_nlContext(Context, State);
		EnterRule(_localctx, 10, RULE_var_or_nl);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case BOOLEAN:
			case CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				vardcl();
				}
				break;
			case ANALOGPIN:
			case DIGITALPIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				pindcl();
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 183;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(STEPParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFUNCTIONS() { return GetToken(STEPParser.ENDFUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Funcdcl_or_nlContext[] funcdcl_or_nl() {
			return GetRuleContexts<Funcdcl_or_nlContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Funcdcl_or_nlContext funcdcl_or_nl(int i) {
			return GetRuleContext<Funcdcl_or_nlContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(STEPParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(STEPParser.NL, i);
		}
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFunctions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 12, RULE_functions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(FUNCTIONS);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NL) | (1L << BLANK) | (1L << NUMBER) | (1L << STRING) | (1L << BOOLEAN))) != 0)) {
				{
				{
				State = 187;
				funcdcl_or_nl();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			Match(ENDFUNCTIONS);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 194;
				Match(NL);
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(STEPParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetstmtContext retstmt() {
			return GetRuleContext<RetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(STEPParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(STEPParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFUNCTION() { return GetToken(STEPParser.ENDFUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracketsContext brackets() {
			return GetRuleContext<BracketsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(STEPParser.BLANK, 0); }
		public FuncdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFuncdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFuncdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdclContext funcdcl() {
		FuncdclContext _localctx = new FuncdclContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcdcl);
		int _la;
		try {
			int _alt;
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				type();
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 201;
					brackets();
					}
				}

				State = 204;
				Match(FUNCTION);
				State = 205;
				Match(ID);
				State = 206;
				@params();
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 207;
						stmt();
						}
						} 
					}
					State = 212;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 213;
				retstmt();
				State = 214;
				Match(NL);
				State = 215;
				Match(ENDFUNCTION);
				State = 216;
				Match(NL);
				}
				break;
			case BLANK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(BLANK);
				State = 219;
				Match(FUNCTION);
				State = 220;
				Match(ID);
				State = 221;
				@params();
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
					{
					{
					State = 222;
					stmt();
					}
					}
					State = 227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 228;
				Match(ENDFUNCTION);
				State = 229;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Funcdcl_or_nlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncdclContext funcdcl() {
			return GetRuleContext<FuncdclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(STEPParser.NL, 0); }
		public Funcdcl_or_nlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdcl_or_nl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFuncdcl_or_nl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFuncdcl_or_nl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdcl_or_nl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Funcdcl_or_nlContext funcdcl_or_nl() {
		Funcdcl_or_nlContext _localctx = new Funcdcl_or_nlContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcdcl_or_nl);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLANK:
			case NUMBER:
			case STRING:
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				funcdcl();
				}
				break;
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(STEPParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(STEPParser.RBRACK, 0); }
		public BracketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brackets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterBrackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitBrackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketsContext brackets() {
		BracketsContext _localctx = new BracketsContext(Context, State);
		EnterRule(_localctx, 18, RULE_brackets);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(LBRACK);
			State = 238;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Params_contentContext params_content() {
			return GetRuleContext<Params_contentContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 20, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(LPAREN);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << BOOLEAN))) != 0)) {
				{
				State = 241;
				params_content();
				}
			}

			State = 244;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Params_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracketsContext brackets() {
			return GetRuleContext<BracketsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Params_multiContext[] params_multi() {
			return GetRuleContexts<Params_multiContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Params_multiContext params_multi(int i) {
			return GetRuleContext<Params_multiContext>(i);
		}
		public Params_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterParams_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitParams_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Params_contentContext params_content() {
		Params_contentContext _localctx = new Params_contentContext(Context, State);
		EnterRule(_localctx, 22, RULE_params_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			type();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 247;
				brackets();
				}
			}

			State = 250;
			Match(ID);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 251;
				params_multi();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Params_multiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(STEPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BracketsContext brackets() {
			return GetRuleContext<BracketsContext>(0);
		}
		public Params_multiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params_multi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterParams_multi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitParams_multi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams_multi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Params_multiContext params_multi() {
		Params_multiContext _localctx = new Params_multiContext(Context, State);
		EnterRule(_localctx, 24, RULE_params_multi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(COMMA);
			State = 258;
			type();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 259;
				brackets();
				}
			}

			State = 262;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(STEPParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(STEPParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(STEPParser.BOOLEAN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << BOOLEAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(STEPParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (NUMBER - 38)) | (1L << (STRING - 38)) | (1L << (BOOLEAN - 38)) | (1L << (IF - 38)) | (1L << (REPEATWHILE - 38)) | (1L << (REPEATFOR - 38)) | (1L << (RETURN - 38)) | (1L << (CONSTANT - 38)) | (1L << (ID - 38)))) != 0)) {
				{
				State = 266;
				stmts();
				}
			}

			State = 269;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilestmtContext whilestmt() {
			return GetRuleContext<WhilestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardclContext vardcl() {
			return GetRuleContext<VardclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssstmtContext assstmt() {
			return GetRuleContext<AssstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetstmtContext retstmt() {
			return GetRuleContext<RetstmtContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 30, RULE_stmts);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				ifstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				whilestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 273;
				forstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274;
				vardcl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 275;
				assstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 276;
				funccall();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 277;
				retstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(STEPParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtsContext loop_stmts() {
			return GetRuleContext<Loop_stmtsContext>(0);
		}
		public Loop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_stmtContext loop_stmt() {
		Loop_stmtContext _localctx = new Loop_stmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_loop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (NUMBER - 38)) | (1L << (STRING - 38)) | (1L << (BOOLEAN - 38)) | (1L << (IF - 38)) | (1L << (REPEATWHILE - 38)) | (1L << (REPEATFOR - 38)) | (1L << (RETURN - 38)) | (1L << (CONSTANT - 38)) | (1L << (ID - 38)))) != 0)) {
				{
				State = 280;
				loop_stmts();
				}
			}

			State = 283;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopifstmtContext loopifstmt() {
			return GetRuleContext<LoopifstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilestmtContext whilestmt() {
			return GetRuleContext<WhilestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VardclContext vardcl() {
			return GetRuleContext<VardclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssstmtContext assstmt() {
			return GetRuleContext<AssstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetstmtContext retstmt() {
			return GetRuleContext<RetstmtContext>(0);
		}
		public Loop_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoop_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoop_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_stmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_stmtsContext loop_stmts() {
		Loop_stmtsContext _localctx = new Loop_stmtsContext(Context, State);
		EnterRule(_localctx, 34, RULE_loop_stmts);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				loopifstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				whilestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				forstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 288;
				vardcl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 289;
				assstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 290;
				funccall();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 291;
				retstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopifbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtContext loop_stmt() {
			return GetRuleContext<Loop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(STEPParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(STEPParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(STEPParser.BREAK, 0); }
		public LoopifbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopifbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoopifbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoopifbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopifbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopifbodyContext loopifbody() {
		LoopifbodyContext _localctx = new LoopifbodyContext(Context, State);
		EnterRule(_localctx, 36, RULE_loopifbody);
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case NUMBER:
			case STRING:
			case BOOLEAN:
			case IF:
			case REPEATWHILE:
			case REPEATFOR:
			case RETURN:
			case CONSTANT:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				loop_stmt();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				Match(CONTINUE);
				State = 296;
				Match(NL);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				Match(BREAK);
				State = 298;
				Match(NL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(STEPParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(STEPParser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifstmtContext[] elseifstmt() {
			return GetRuleContexts<ElseifstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseifstmtContext elseifstmt(int i) {
			return GetRuleContext<ElseifstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifstmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(IF);
			State = 302;
			Match(LPAREN);
			State = 303;
			logicexpr(0);
			State = 304;
			Match(RPAREN);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 305;
				stmt();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 311;
					elseifstmt();
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 317;
				elsestmt();
				}
			}

			State = 320;
			Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(STEPParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(STEPParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ElseifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterElseifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitElseifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifstmtContext elseifstmt() {
		ElseifstmtContext _localctx = new ElseifstmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseifstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(ELSE);
			State = 323;
			Match(IF);
			State = 324;
			Match(LPAREN);
			State = 325;
			logicexpr(0);
			State = 326;
			Match(RPAREN);
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 327;
				stmt();
				}
				}
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(STEPParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterElsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitElsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_elsestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(ELSE);
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 334;
				stmt();
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopifstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(STEPParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDIF() { return GetToken(STEPParser.ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopifbodyContext[] loopifbody() {
			return GetRuleContexts<LoopifbodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopifbodyContext loopifbody(int i) {
			return GetRuleContext<LoopifbodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopelseifstmtContext[] loopelseifstmt() {
			return GetRuleContexts<LoopelseifstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopelseifstmtContext loopelseifstmt(int i) {
			return GetRuleContext<LoopelseifstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopelsestmtContext loopelsestmt() {
			return GetRuleContext<LoopelsestmtContext>(0);
		}
		public LoopifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoopifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoopifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopifstmtContext loopifstmt() {
		LoopifstmtContext _localctx = new LoopifstmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_loopifstmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(IF);
			State = 341;
			Match(LPAREN);
			State = 342;
			logicexpr(0);
			State = 343;
			Match(RPAREN);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (CONTINUE - 21)) | (1L << (BREAK - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 344;
				loopifbody();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 350;
					loopelseifstmt();
					}
					} 
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 356;
				loopelsestmt();
				}
			}

			State = 359;
			Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopelseifstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(STEPParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(STEPParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopifbodyContext[] loopifbody() {
			return GetRuleContexts<LoopifbodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopifbodyContext loopifbody(int i) {
			return GetRuleContext<LoopifbodyContext>(i);
		}
		public LoopelseifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopelseifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoopelseifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoopelseifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopelseifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopelseifstmtContext loopelseifstmt() {
		LoopelseifstmtContext _localctx = new LoopelseifstmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_loopelseifstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(ELSE);
			State = 362;
			Match(IF);
			State = 363;
			Match(LPAREN);
			State = 364;
			logicexpr(0);
			State = 365;
			Match(RPAREN);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (CONTINUE - 21)) | (1L << (BREAK - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 366;
				loopifbody();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopelsestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(STEPParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoopifbodyContext[] loopifbody() {
			return GetRuleContexts<LoopifbodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopifbodyContext loopifbody(int i) {
			return GetRuleContext<LoopifbodyContext>(i);
		}
		public LoopelsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopelsestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLoopelsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLoopelsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopelsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopelsestmtContext loopelsestmt() {
		LoopelsestmtContext _localctx = new LoopelsestmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_loopelsestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(ELSE);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (CONTINUE - 21)) | (1L << (BREAK - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 373;
				loopifbody();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATWHILE() { return GetToken(STEPParser.REPEATWHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDWHILE() { return GetToken(STEPParser.ENDWHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtContext[] loop_stmt() {
			return GetRuleContexts<Loop_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtContext loop_stmt(int i) {
			return GetRuleContext<Loop_stmtContext>(i);
		}
		public WhilestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterWhilestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitWhilestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestmtContext whilestmt() {
		WhilestmtContext _localctx = new WhilestmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_whilestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(REPEATWHILE);
			State = 380;
			Match(LPAREN);
			State = 381;
			logicexpr(0);
			State = 382;
			Match(RPAREN);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 383;
				loop_stmt();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			Match(ENDWHILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATFOR() { return GetToken(STEPParser.REPEATFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_iter_optContext for_iter_opt() {
			return GetRuleContext<For_iter_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(STEPParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(STEPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGEBY() { return GetToken(STEPParser.CHANGEBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFOR() { return GetToken(STEPParser.ENDFOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtContext[] loop_stmt() {
			return GetRuleContexts<Loop_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_stmtContext loop_stmt(int i) {
			return GetRuleContext<Loop_stmtContext>(i);
		}
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitForstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_forstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(REPEATFOR);
			State = 392;
			Match(LPAREN);
			State = 393;
			for_iter_opt();
			State = 394;
			Match(TO);
			State = 395;
			expr(0);
			State = 396;
			Match(COMMA);
			State = 397;
			Match(CHANGEBY);
			State = 398;
			expr(0);
			State = 399;
			Match(RPAREN);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (NL - 21)) | (1L << (NUMBER - 21)) | (1L << (STRING - 21)) | (1L << (BOOLEAN - 21)) | (1L << (IF - 21)) | (1L << (REPEATWHILE - 21)) | (1L << (REPEATFOR - 21)) | (1L << (RETURN - 21)) | (1L << (CONSTANT - 21)) | (1L << (ID - 21)))) != 0)) {
				{
				{
				State = 400;
				loop_stmt();
				}
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 406;
			Match(ENDFOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iter_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumdclContext numdcl() {
			return GetRuleContext<NumdclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssstmtContext assstmt() {
			return GetRuleContext<AssstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrindexContext arrindex() {
			return GetRuleContext<ArrindexContext>(0);
		}
		public For_iter_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iter_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFor_iter_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFor_iter_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iter_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iter_optContext for_iter_opt() {
		For_iter_optContext _localctx = new For_iter_optContext(Context, State);
		EnterRule(_localctx, 54, RULE_for_iter_opt);
		int _la;
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				numdcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				assstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410;
				Match(ID);
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 411;
					arrindex();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(STEPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrindexContext arrindex() {
			return GetRuleContext<ArrindexContext>(0);
		}
		public AssstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterAssstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitAssstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssstmtContext assstmt() {
		AssstmtContext _localctx = new AssstmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_assstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			Match(ID);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 417;
				arrindex();
				}
			}

			State = 420;
			Match(ASSIGN);
			State = 421;
			logicexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Params_optionsContext params_options() {
			return GetRuleContext<Params_optionsContext>(0);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFunccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFunccall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 58, RULE_funccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(ID);
			State = 424;
			Match(LPAREN);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (LPAREN - 4)) | (1L << (MINUS - 4)) | (1L << (NEG - 4)) | (1L << (INTLITERAL - 4)) | (1L << (NUMLITERAL - 4)) | (1L << (STRLITERAL - 4)) | (1L << (BOOLLITERAL - 4)) | (1L << (ID - 4)))) != 0)) {
				{
				State = 425;
				params_options();
				}
			}

			State = 428;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Params_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_exprContext[] multi_expr() {
			return GetRuleContexts<Multi_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multi_exprContext multi_expr(int i) {
			return GetRuleContext<Multi_exprContext>(i);
		}
		public Params_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterParams_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitParams_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Params_optionsContext params_options() {
		Params_optionsContext _localctx = new Params_optionsContext(Context, State);
		EnterRule(_localctx, 60, RULE_params_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			logicexpr(0);
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 431;
				multi_expr();
				}
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(STEPParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		public Multi_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterMulti_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitMulti_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_exprContext multi_expr() {
		Multi_exprContext _localctx = new Multi_exprContext(Context, State);
		EnterRule(_localctx, 62, RULE_multi_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(COMMA);
			State = 438;
			logicexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(STEPParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		public RetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterRetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitRetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetstmtContext retstmt() {
		RetstmtContext _localctx = new RetstmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_retstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(RETURN);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (LPAREN - 4)) | (1L << (MINUS - 4)) | (1L << (NEG - 4)) | (1L << (INTLITERAL - 4)) | (1L << (NUMLITERAL - 4)) | (1L << (STRLITERAL - 4)) | (1L << (BOOLLITERAL - 4)) | (1L << (ID - 4)))) != 0)) {
				{
				State = 441;
				logicexpr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrindexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(STEPParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(STEPParser.RBRACK, 0); }
		public ArrindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrindex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterArrindex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitArrindex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrindex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrindexContext arrindex() {
		ArrindexContext _localctx = new ArrindexContext(Context, State);
		EnterRule(_localctx, 66, RULE_arrindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(LBRACK);
			State = 445;
			expr(0);
			State = 446;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(STEPParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(STEPParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 449;
			term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 457;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 451;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 452;
						Match(PLUS);
						State = 453;
						term(0);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 454;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 455;
						Match(MINUS);
						State = 456;
						term(0);
						}
						break;
					}
					} 
				}
				State = 461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(STEPParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(STEPParser.DIVIDE, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 463;
			factor(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 471;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 465;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 466;
						Match(MULT);
						State = 467;
						factor(0);
						}
						break;
					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 468;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 469;
						Match(DIVIDE);
						State = 470;
						factor(0);
						}
						break;
					}
					} 
				}
				State = 475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(STEPParser.POW, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		return factor(0);
	}

	private FactorContext factor(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FactorContext _localctx = new FactorContext(Context, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_factor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 477;
			value();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 484;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FactorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_factor);
					State = 479;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 480;
					Match(POW);
					State = 481;
					value();
					}
					} 
				}
				State = 486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(STEPParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(STEPParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(STEPParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrindexContext arrindex() {
			return GetRuleContext<ArrindexContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 487;
				Match(MINUS);
				}
			}

			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 490;
				constant();
				}
				break;
			case 2:
				{
				State = 491;
				Match(ID);
				State = 493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 492;
					arrindex();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 495;
				Match(LPAREN);
				State = 496;
				logicexpr(0);
				State = 497;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				State = 499;
				funccall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMLITERAL() { return GetToken(STEPParser.NUMLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(STEPParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRLITERAL() { return GetToken(STEPParser.STRLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLLITERAL() { return GetToken(STEPParser.BOOLLITERAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 76, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTLITERAL) | (1L << NUMLITERAL) | (1L << STRLITERAL) | (1L << BOOLLITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicequalContext logicequal() {
			return GetRuleContext<LogicequalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(STEPParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(STEPParser.OR, 0); }
		public LogicexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLogicexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLogicexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicexprContext logicexpr() {
		return logicexpr(0);
	}

	private LogicexprContext logicexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicexprContext _localctx = new LogicexprContext(Context, _parentState);
		LogicexprContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_logicexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 505;
			logicequal();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 515;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 513;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new LogicexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicexpr);
						State = 507;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 508;
						Match(AND);
						State = 509;
						logicequal();
						}
						break;
					case 2:
						{
						_localctx = new LogicexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicexpr);
						State = 510;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 511;
						Match(OR);
						State = 512;
						logicequal();
						}
						break;
					}
					} 
				}
				State = 517;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicequalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogiccompContext[] logiccomp() {
			return GetRuleContexts<LogiccompContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogiccompContext logiccomp(int i) {
			return GetRuleContext<LogiccompContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(STEPParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(STEPParser.NEQ, 0); }
		public LogicequalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicequal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLogicequal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLogicequal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicequal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicequalContext logicequal() {
		LogicequalContext _localctx = new LogicequalContext(Context, State);
		EnterRule(_localctx, 80, RULE_logicequal);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518;
				logiccomp();
				State = 519;
				Match(EQ);
				State = 520;
				logiccomp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522;
				logiccomp();
				State = 523;
				Match(NEQ);
				State = 524;
				logiccomp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 526;
				logiccomp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogiccompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicvalueContext[] logicvalue() {
			return GetRuleContexts<LogicvalueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicvalueContext logicvalue(int i) {
			return GetRuleContext<LogicvalueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogiccompopContext logiccompop() {
			return GetRuleContext<LogiccompopContext>(0);
		}
		public LogiccompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logiccomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLogiccomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLogiccomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogiccomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogiccompContext logiccomp() {
		LogiccompContext _localctx = new LogiccompContext(Context, State);
		EnterRule(_localctx, 82, RULE_logiccomp);
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				logicvalue();
				State = 530;
				logiccompop();
				State = 531;
				logicvalue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533;
				logicvalue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogiccompopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRTHANEQ() { return GetToken(STEPParser.GRTHANEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRTHAN() { return GetToken(STEPParser.GRTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTHANEQ() { return GetToken(STEPParser.LTHANEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTHAN() { return GetToken(STEPParser.LTHAN, 0); }
		public LogiccompopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logiccompop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLogiccompop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLogiccompop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogiccompop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogiccompopContext logiccompop() {
		LogiccompopContext _localctx = new LogiccompopContext(Context, State);
		EnterRule(_localctx, 84, RULE_logiccompop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GRTHAN) | (1L << GRTHANEQ) | (1L << LTHAN) | (1L << LTHANEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(STEPParser.NEG, 0); }
		public LogicvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterLogicvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitLogicvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicvalueContext logicvalue() {
		LogicvalueContext _localctx = new LogicvalueContext(Context, State);
		EnterRule(_localctx, 86, RULE_logicvalue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEG) {
				{
				State = 538;
				Match(NEG);
				}
			}

			State = 541;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_optionsContext var_options() {
			return GetRuleContext<Var_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(STEPParser.CONSTANT, 0); }
		public VardclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterVardcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitVardcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardclContext vardcl() {
		VardclContext _localctx = new VardclContext(Context, State);
		EnterRule(_localctx, 88, RULE_vardcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 543;
				Match(CONSTANT);
				}
			}

			State = 546;
			var_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumdclContext numdcl() {
			return GetRuleContext<NumdclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringdclContext stringdcl() {
			return GetRuleContext<StringdclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooldclContext booldcl() {
			return GetRuleContext<BooldclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrdclContext arrdcl() {
			return GetRuleContext<ArrdclContext>(0);
		}
		public Var_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterVar_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitVar_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_optionsContext var_options() {
		Var_optionsContext _localctx = new Var_optionsContext(Context, State);
		EnterRule(_localctx, 90, RULE_var_options);
		try {
			State = 552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 548;
				numdcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549;
				stringdcl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 550;
				booldcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 551;
				arrdcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumdclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(STEPParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(STEPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NumdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numdcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterNumdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitNumdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumdclContext numdcl() {
		NumdclContext _localctx = new NumdclContext(Context, State);
		EnterRule(_localctx, 92, RULE_numdcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(NUMBER);
			State = 555;
			Match(ID);
			State = 556;
			Match(ASSIGN);
			State = 557;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringdclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(STEPParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(STEPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StringdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringdcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterStringdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitStringdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringdclContext stringdcl() {
		StringdclContext _localctx = new StringdclContext(Context, State);
		EnterRule(_localctx, 94, RULE_stringdcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(STRING);
			State = 560;
			Match(ID);
			State = 561;
			Match(ASSIGN);
			State = 562;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooldclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(STEPParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(STEPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicexprContext logicexpr() {
			return GetRuleContext<LogicexprContext>(0);
		}
		public BooldclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booldcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterBooldcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitBooldcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooldcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooldclContext booldcl() {
		BooldclContext _localctx = new BooldclContext(Context, State);
		EnterRule(_localctx, 96, RULE_booldcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(BOOLEAN);
			State = 565;
			Match(ID);
			State = 566;
			Match(ASSIGN);
			State = 567;
			logicexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PindclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALOGPIN() { return GetToken(STEPParser.ANALOGPIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(STEPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTLITERAL() { return GetToken(STEPParser.INTLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITALPIN() { return GetToken(STEPParser.DIGITALPIN, 0); }
		public PindclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pindcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterPindcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitPindcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPindcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PindclContext pindcl() {
		PindclContext _localctx = new PindclContext(Context, State);
		EnterRule(_localctx, 98, RULE_pindcl);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALOGPIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 569;
				Match(ANALOGPIN);
				State = 570;
				Match(ID);
				State = 571;
				Match(ASSIGN);
				State = 572;
				Match(INTLITERAL);
				}
				break;
			case DIGITALPIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				Match(DIGITALPIN);
				State = 574;
				Match(ID);
				State = 575;
				Match(ASSIGN);
				State = 576;
				Match(INTLITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrdclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrsizedclContext arrsizedcl() {
			return GetRuleContext<ArrsizedclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(STEPParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arr_id_or_litContext arr_id_or_lit() {
			return GetRuleContext<Arr_id_or_litContext>(0);
		}
		public ArrdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrdcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterArrdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitArrdcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrdclContext arrdcl() {
		ArrdclContext _localctx = new ArrdclContext(Context, State);
		EnterRule(_localctx, 100, RULE_arrdcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			type();
			State = 580;
			arrsizedcl();
			State = 581;
			Match(ID);
			State = 582;
			Match(ASSIGN);
			State = 583;
			arr_id_or_lit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arr_id_or_litContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(STEPParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(STEPParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(STEPParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Params_optionsContext params_options() {
			return GetRuleContext<Params_optionsContext>(0);
		}
		public Arr_id_or_litContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arr_id_or_lit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterArr_id_or_lit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitArr_id_or_lit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArr_id_or_lit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arr_id_or_litContext arr_id_or_lit() {
		Arr_id_or_litContext _localctx = new Arr_id_or_litContext(Context, State);
		EnterRule(_localctx, 102, RULE_arr_id_or_lit);
		int _la;
		try {
			State = 591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585;
				Match(ID);
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				Match(LBRACK);
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 4)) & ~0x3f) == 0 && ((1L << (_la - 4)) & ((1L << (LPAREN - 4)) | (1L << (MINUS - 4)) | (1L << (NEG - 4)) | (1L << (INTLITERAL - 4)) | (1L << (NUMLITERAL - 4)) | (1L << (STRLITERAL - 4)) | (1L << (BOOLLITERAL - 4)) | (1L << (ID - 4)))) != 0)) {
					{
					State = 587;
					params_options();
					}
				}

				State = 590;
				Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrsizedclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(STEPParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMLITERAL() { return GetToken(STEPParser.NUMLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(STEPParser.RBRACK, 0); }
		public ArrsizedclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrsizedcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.EnterArrsizedcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISTEPListener typedListener = listener as ISTEPListener;
			if (typedListener != null) typedListener.ExitArrsizedcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTEPVisitor<TResult> typedVisitor = visitor as ISTEPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrsizedcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrsizedclContext arrsizedcl() {
		ArrsizedclContext _localctx = new ArrsizedclContext(Context, State);
		EnterRule(_localctx, 104, RULE_arrsizedcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(LBRACK);
			State = 594;
			Match(NUMLITERAL);
			State = 595;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 34: return expr_sempred((ExprContext)_localctx, predIndex);
		case 35: return term_sempred((TermContext)_localctx, predIndex);
		case 36: return factor_sempred((FactorContext)_localctx, predIndex);
		case 39: return logicexpr_sempred((LogicexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logicexpr_sempred(LogicexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\x258', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x3', '\x2', 
		'\a', '\x2', 'n', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'q', '\v', '\x2', 
		'\x3', '\x2', '\x5', '\x2', 't', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', 'x', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'|', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x7F', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x83', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x86', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x8A', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x8D', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x91', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x94', '\v', '\x3', '\x5', '\x3', '\x96', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x9A', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x9D', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\xA3', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xA6', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\xAC', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xAF', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xB3', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\xB6', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\xBB', '\n', '\a', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\xBF', '\n', '\b', '\f', '\b', '\xE', '\b', '\xC2', '\v', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\xC6', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\xC9', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xCD', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\xD3', '\n', '\t', '\f', '\t', '\xE', '\t', '\xD6', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\xE2', '\n', '\t', '\f', '\t', '\xE', '\t', '\xE5', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xEA', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\xEE', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xF5', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xFB', '\n', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xFF', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\x102', '\v', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x107', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x5', '\x10', 
		'\x10E', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x119', '\n', '\x11', '\x3', '\x12', '\x5', '\x12', 
		'\x11C', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x127', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x12E', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\x135', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\x138', '\v', '\x15', '\x3', '\x15', '\a', '\x15', '\x13B', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\x13E', '\v', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x141', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\a', '\x16', '\x14B', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x14E', 
		'\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x152', '\n', 
		'\x17', '\f', '\x17', '\xE', '\x17', '\x155', '\v', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x15C', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x15F', '\v', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x162', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x165', '\v', '\x18', '\x3', '\x18', '\x5', '\x18', '\x168', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x172', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x175', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x179', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x17C', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x183', '\n', 
		'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x186', '\v', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\a', '\x1C', '\x194', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\x197', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x19F', '\n', 
		'\x1D', '\x5', '\x1D', '\x1A1', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x1A5', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1AD', 
		'\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\a', 
		' ', '\x1B3', '\n', ' ', '\f', ' ', '\xE', ' ', '\x1B6', '\v', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1BD', 
		'\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\a', '$', '\x1CC', '\n', '$', '\f', '$', '\xE', 
		'$', '\x1CF', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', 
		'\x1DA', '\n', '%', '\f', '%', '\xE', '%', '\x1DD', '\v', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', 
		'&', '\x1E5', '\n', '&', '\f', '&', '\xE', '&', '\x1E8', '\v', '&', '\x3', 
		'\'', '\x5', '\'', '\x1EB', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x5', '\'', '\x1F0', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1F7', '\n', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x204', 
		'\n', ')', '\f', ')', '\xE', ')', '\x207', '\v', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x5', '*', '\x212', '\n', '*', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x219', '\n', '+', '\x3', 
		',', '\x3', ',', '\x3', '-', '\x5', '-', '\x21E', '\n', '-', '\x3', '-', 
		'\x3', '-', '\x3', '.', '\x5', '.', '\x223', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x22B', 
		'\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x244', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x24F', '\n', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x252', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x2', '\x6', '\x46', 'H', 'J', 'P', '\x37', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', '\x2', '\x5', '\x3', '\x2', '(', '*', 
		'\x3', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x10', '\x13', '\x2', '\x276', 
		'\x2', 'o', '\x3', '\x2', '\x2', '\x2', '\x4', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x97', '\x3', '\x2', '\x2', '\x2', '\b', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xA9', '\x3', '\x2', '\x2', '\x2', '\f', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x12', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x16', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x103', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x10A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x10D', '\x3', '\x2', '\x2', '\x2', ' ', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x126', '\x3', '\x2', '\x2', '\x2', '&', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x12F', '\x3', '\x2', '\x2', '\x2', '*', '\x144', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x156', '\x3', '\x2', '\x2', '\x2', '\x30', '\x16B', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x176', '\x3', '\x2', '\x2', '\x2', '\x34', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1A0', '\x3', '\x2', '\x2', '\x2', ':', '\x1A2', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1A9', '\x3', '\x2', '\x2', '\x2', '>', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1BE', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'H', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1EA', '\x3', '\x2', '\x2', '\x2', 'N', '\x1F8', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1FA', '\x3', '\x2', '\x2', '\x2', 'R', '\x211', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x21A', '\x3', '\x2', '\x2', '\x2', 'X', '\x21D', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x222', '\x3', '\x2', '\x2', '\x2', '\\', '\x22A', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x231', '\x3', '\x2', '\x2', '\x2', '\x62', '\x236', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x243', '\x3', '\x2', '\x2', '\x2', '\x66', '\x245', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x251', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x253', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\x17', '\x2', 
		'\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'r', 't', '\x5', '\n', '\x6', '\x2', 's', 'r', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\x5', '\x4', '\x3', '\x2', 'v', 'x', '\x5', '\xE', '\b', 
		'\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x3', '\x3', '\x2', '\x2', '\x2', 'y', '}', '\x5', '\x6', 
		'\x4', '\x2', 'z', '|', '\a', '\x17', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x84', '\x5', '\b', '\x5', '\x2', '\x81', '\x83', '\a', '\x17', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8B', '\x5', 
		'\x6', '\x4', '\x2', '\x88', '\x8A', '\a', '\x17', '\x2', '\x2', '\x89', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x92', '\x5', '\b', '\x5', 
		'\x2', '\x8F', '\x91', '\a', '\x17', '\x2', '\x2', '\x90', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x95', 'y', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x95', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x5', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9B', '\a', 
		'\x1D', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x1E', '\x10', '\x2', '\x99', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x1E', '\x2', 
		'\x2', '\x9F', '\a', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA4', '\a', 
		'\x1F', '\x2', '\x2', '\xA1', '\xA3', '\x5', '\x1E', '\x10', '\x2', '\xA2', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', ' ', '\x2', 
		'\x2', '\xA8', '\t', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAD', '\a', 
		'%', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\f', '\a', '\x2', '\xAB', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB4', '\a', '&', '\x2', '\x2', '\xB1', 
		'\xB3', '\a', '\x17', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xBB', '\x5', 'Z', '.', '\x2', '\xB8', '\xBB', '\x5', 
		'\x64', '\x33', '\x2', '\xB9', '\xBB', '\a', '\x17', '\x2', '\x2', '\xBA', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xC0', '\a', '!', '\x2', '\x2', '\xBD', 
		'\xBF', '\x5', '\x12', '\n', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC7', '\a', '\"', '\x2', '\x2', '\xC4', '\xC6', '\a', 
		'\x17', '\x2', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCC', '\x5', '\x1C', '\xF', '\x2', '\xCB', '\xCD', '\x5', '\x14', '\v', 
		'\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\a', '#', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x42', '\x2', 
		'\x2', '\xD0', '\xD4', '\x5', '\x16', '\f', '\x2', '\xD1', '\xD3', '\x5', 
		'\x1E', '\x10', '\x2', '\xD2', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\x5', '\x42', '\"', '\x2', '\xD8', '\xD9', '\a', '\x17', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '$', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'\x17', '\x2', '\x2', '\xDB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDD', '\a', '\'', '\x2', '\x2', '\xDD', '\xDE', '\a', '#', '\x2', '\x2', 
		'\xDE', '\xDF', '\a', '\x42', '\x2', '\x2', '\xDF', '\xE3', '\x5', '\x16', 
		'\f', '\x2', '\xE0', '\xE2', '\x5', '\x1E', '\x10', '\x2', '\xE1', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '$', '\x2', '\x2', '\xE7', 
		'\xE8', '\a', '\x17', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\x11', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEE', '\x5', '\x10', '\t', '\x2', '\xEC', '\xEE', '\a', '\x17', '\x2', 
		'\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\x13', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\a', '\b', '\x2', '\x2', '\xF0', '\xF1', '\a', '\t', '\x2', '\x2', 
		'\xF1', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF4', '\a', '\x6', 
		'\x2', '\x2', '\xF3', '\xF5', '\x5', '\x18', '\r', '\x2', '\xF4', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\a', 
		'\x2', '\x2', '\xF7', '\x17', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', 
		'\x5', '\x1C', '\xF', '\x2', '\xF9', '\xFB', '\x5', '\x14', '\v', '\x2', 
		'\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x100', 
		'\a', '\x42', '\x2', '\x2', '\xFD', '\xFF', '\x5', '\x1A', '\xE', '\x2', 
		'\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\a', 
		'\x18', '\x2', '\x2', '\x104', '\x106', '\x5', '\x1C', '\xF', '\x2', '\x105', 
		'\x107', '\x5', '\x14', '\v', '\x2', '\x106', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', '\x42', '\x2', '\x2', 
		'\x109', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\t', '\x2', 
		'\x2', '\x2', '\x10B', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10E', 
		'\x5', ' ', '\x11', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x17', '\x2', '\x2', '\x110', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x119', '\x5', '(', '\x15', 
		'\x2', '\x112', '\x119', '\x5', '\x34', '\x1B', '\x2', '\x113', '\x119', 
		'\x5', '\x36', '\x1C', '\x2', '\x114', '\x119', '\x5', 'Z', '.', '\x2', 
		'\x115', '\x119', '\x5', ':', '\x1E', '\x2', '\x116', '\x119', '\x5', 
		'<', '\x1F', '\x2', '\x117', '\x119', '\x5', '\x42', '\"', '\x2', '\x118', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x118', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x113', '\x3', '\x2', '\x2', '\x2', '\x118', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '!', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11C', '\x5', '$', '\x13', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x17', '\x2', '\x2', 
		'\x11E', '#', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x127', '\x5', '.', 
		'\x18', '\x2', '\x120', '\x127', '\x5', '\x34', '\x1B', '\x2', '\x121', 
		'\x127', '\x5', '\x36', '\x1C', '\x2', '\x122', '\x127', '\x5', 'Z', '.', 
		'\x2', '\x123', '\x127', '\x5', ':', '\x1E', '\x2', '\x124', '\x127', 
		'\x5', '<', '\x1F', '\x2', '\x125', '\x127', '\x5', '\x42', '\"', '\x2', 
		'\x126', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x126', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x121', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x126', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x12E', '\x5', '\"', '\x12', '\x2', '\x129', '\x12A', '\a', 
		'\x30', '\x2', '\x2', '\x12A', '\x12E', '\a', '\x17', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '\x31', '\x2', '\x2', '\x12C', '\x12E', '\a', '\x17', '\x2', 
		'\x2', '\x12D', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\'', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\a', '-', 
		'\x2', '\x2', '\x130', '\x131', '\a', '\x6', '\x2', '\x2', '\x131', '\x132', 
		'\x5', 'P', ')', '\x2', '\x132', '\x136', '\a', '\a', '\x2', '\x2', '\x133', 
		'\x135', '\x5', '\x1E', '\x10', '\x2', '\x134', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13B', '\x5', '*', '\x16', '\x2', '\x13A', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', '\x5', 
		',', '\x17', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x143', '\a', '.', '\x2', '\x2', '\x143', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x145', '\a', '/', '\x2', '\x2', '\x145', 
		'\x146', '\a', '-', '\x2', '\x2', '\x146', '\x147', '\a', '\x6', '\x2', 
		'\x2', '\x147', '\x148', '\x5', 'P', ')', '\x2', '\x148', '\x14C', '\a', 
		'\a', '\x2', '\x2', '\x149', '\x14B', '\x5', '\x1E', '\x10', '\x2', '\x14A', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x153', '\a', 
		'/', '\x2', '\x2', '\x150', '\x152', '\x5', '\x1E', '\x10', '\x2', '\x151', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\a', 
		'-', '\x2', '\x2', '\x157', '\x158', '\a', '\x6', '\x2', '\x2', '\x158', 
		'\x159', '\x5', 'P', ')', '\x2', '\x159', '\x15D', '\a', '\a', '\x2', 
		'\x2', '\x15A', '\x15C', '\x5', '&', '\x14', '\x2', '\x15B', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x163', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x160', '\x162', '\x5', '\x30', 
		'\x19', '\x2', '\x161', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x168', '\x5', '\x32', '\x1A', '\x2', '\x167', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\a', '.', '\x2', 
		'\x2', '\x16A', '/', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\a', 
		'/', '\x2', '\x2', '\x16C', '\x16D', '\a', '-', '\x2', '\x2', '\x16D', 
		'\x16E', '\a', '\x6', '\x2', '\x2', '\x16E', '\x16F', '\x5', 'P', ')', 
		'\x2', '\x16F', '\x173', '\a', '\a', '\x2', '\x2', '\x170', '\x172', '\x5', 
		'&', '\x14', '\x2', '\x171', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x174', '\x3', '\x2', '\x2', '\x2', '\x174', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x17A', '\a', '/', '\x2', '\x2', '\x177', '\x179', '\x5', '&', 
		'\x14', '\x2', '\x178', '\x177', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17E', '\a', '\x32', '\x2', '\x2', '\x17E', '\x17F', '\a', 
		'\x6', '\x2', '\x2', '\x17F', '\x180', '\x5', 'P', ')', '\x2', '\x180', 
		'\x184', '\a', '\a', '\x2', '\x2', '\x181', '\x183', '\x5', '\"', '\x12', 
		'\x2', '\x182', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x188', '\a', '\x33', '\x2', '\x2', '\x188', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x18A', '\a', '\x34', '\x2', '\x2', '\x18A', '\x18B', 
		'\a', '\x6', '\x2', '\x2', '\x18B', '\x18C', '\x5', '\x38', '\x1D', '\x2', 
		'\x18C', '\x18D', '\a', '\x36', '\x2', '\x2', '\x18D', '\x18E', '\x5', 
		'\x46', '$', '\x2', '\x18E', '\x18F', '\a', '\x18', '\x2', '\x2', '\x18F', 
		'\x190', '\a', '\x37', '\x2', '\x2', '\x190', '\x191', '\x5', '\x46', 
		'$', '\x2', '\x191', '\x195', '\a', '\a', '\x2', '\x2', '\x192', '\x194', 
		'\x5', '\"', '\x12', '\x2', '\x193', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x197', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x196', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x199', '\a', '\x35', '\x2', '\x2', '\x199', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x1A1', '\x5', '^', '\x30', '\x2', 
		'\x19B', '\x1A1', '\x5', ':', '\x1E', '\x2', '\x19C', '\x19E', '\a', '\x42', 
		'\x2', '\x2', '\x19D', '\x19F', '\x5', '\x44', '#', '\x2', '\x19E', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x19C', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A4', '\a', '\x42', '\x2', '\x2', '\x1A3', '\x1A5', 
		'\x5', '\x44', '#', '\x2', '\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', '\n', '\x2', '\x2', '\x1A7', 
		'\x1A8', '\x5', 'P', ')', '\x2', '\x1A8', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\a', '\x42', '\x2', '\x2', '\x1AA', '\x1AC', '\a', 
		'\x6', '\x2', '\x2', '\x1AB', '\x1AD', '\x5', '>', ' ', '\x2', '\x1AC', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', 
		'\a', '\a', '\x2', '\x2', '\x1AF', '=', '\x3', '\x2', '\x2', '\x2', '\x1B0', 
		'\x1B4', '\x5', 'P', ')', '\x2', '\x1B1', '\x1B3', '\x5', '@', '!', '\x2', 
		'\x1B2', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', 
		'\a', '\x18', '\x2', '\x2', '\x1B8', '\x1B9', '\x5', 'P', ')', '\x2', 
		'\x1B9', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BC', '\a', '>', 
		'\x2', '\x2', '\x1BB', '\x1BD', '\x5', 'P', ')', '\x2', '\x1BC', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\a', '\b', 
		'\x2', '\x2', '\x1BF', '\x1C0', '\x5', '\x46', '$', '\x2', '\x1C0', '\x1C1', 
		'\a', '\t', '\x2', '\x2', '\x1C1', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\b', '$', '\x1', '\x2', '\x1C3', '\x1C4', '\x5', 'H', 
		'%', '\x2', '\x1C4', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', 
		'\f', '\x5', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '\v', '\x2', '\x2', 
		'\x1C7', '\x1CC', '\x5', 'H', '%', '\x2', '\x1C8', '\x1C9', '\f', '\x4', 
		'\x2', '\x2', '\x1C9', '\x1CA', '\a', '\f', '\x2', '\x2', '\x1CA', '\x1CC', 
		'\x5', 'H', '%', '\x2', '\x1CB', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CE', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', 
		'\b', '%', '\x1', '\x2', '\x1D1', '\x1D2', '\x5', 'J', '&', '\x2', '\x1D2', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\f', '\x5', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\a', '\xE', '\x2', '\x2', '\x1D5', '\x1DA', 
		'\x5', 'J', '&', '\x2', '\x1D6', '\x1D7', '\f', '\x4', '\x2', '\x2', '\x1D7', 
		'\x1D8', '\a', '\r', '\x2', '\x2', '\x1D8', '\x1DA', '\x5', 'J', '&', 
		'\x2', '\x1D9', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', 'I', '\x3', '\x2', '\x2', '\x2', '\x1DD', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\b', '&', '\x1', 
		'\x2', '\x1DF', '\x1E0', '\x5', 'L', '\'', '\x2', '\x1E0', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\f', '\x4', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\a', '\xF', '\x2', '\x2', '\x1E3', '\x1E5', '\x5', 'L', '\'', 
		'\x2', '\x1E4', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EB', 
		'\a', '\f', '\x2', '\x2', '\x1EA', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1F7', '\x5', 'N', '(', '\x2', '\x1ED', 
		'\x1EF', '\a', '\x42', '\x2', '\x2', '\x1EE', '\x1F0', '\x5', '\x44', 
		'#', '\x2', '\x1EF', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1F1', '\x1F2', '\a', '\x6', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', 
		'P', ')', '\x2', '\x1F3', '\x1F4', '\a', '\a', '\x2', '\x2', '\x1F4', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', '<', '\x1F', 
		'\x2', '\x1F6', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F7', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8', '\x1F9', '\t', '\x3', '\x2', '\x2', '\x1F9', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\b', ')', '\x1', '\x2', 
		'\x1FB', '\x1FC', '\x5', 'R', '*', '\x2', '\x1FC', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD', '\x1FE', '\f', '\x5', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\a', '?', '\x2', '\x2', '\x1FF', '\x204', '\x5', 'R', '*', '\x2', '\x200', 
		'\x201', '\f', '\x4', '\x2', '\x2', '\x201', '\x202', '\a', '@', '\x2', 
		'\x2', '\x202', '\x204', '\x5', 'R', '*', '\x2', '\x203', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x203', '\x200', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x207', '\x3', '\x2', '\x2', '\x2', '\x205', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x205', '\x206', '\x3', '\x2', '\x2', '\x2', '\x206', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x207', '\x205', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x209', '\x5', 'T', '+', '\x2', '\x209', '\x20A', '\a', '\x14', '\x2', 
		'\x2', '\x20A', '\x20B', '\x5', 'T', '+', '\x2', '\x20B', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20D', '\x5', 'T', '+', '\x2', '\x20D', 
		'\x20E', '\a', '\x15', '\x2', '\x2', '\x20E', '\x20F', '\x5', 'T', '+', 
		'\x2', '\x20F', '\x212', '\x3', '\x2', '\x2', '\x2', '\x210', '\x212', 
		'\x5', 'T', '+', '\x2', '\x211', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x211', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x212', 'S', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x214', '\x5', 'X', '-', '\x2', '\x214', '\x215', '\x5', 'V', ',', '\x2', 
		'\x215', '\x216', '\x5', 'X', '-', '\x2', '\x216', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '\x217', '\x219', '\x5', 'X', '-', '\x2', '\x218', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x218', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x219', 'U', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\t', '\x4', 
		'\x2', '\x2', '\x21B', 'W', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21E', 
		'\a', '\x16', '\x2', '\x2', '\x21D', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x220', '\x5', '\x46', '$', '\x2', '\x220', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x221', '\x223', '\a', '\x41', '\x2', 
		'\x2', '\x222', '\x221', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', 
		'\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\x3', '\x2', '\x2', '\x2', 
		'\x224', '\x225', '\x5', '\\', '/', '\x2', '\x225', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x226', '\x22B', '\x5', '^', '\x30', '\x2', '\x227', '\x22B', 
		'\x5', '`', '\x31', '\x2', '\x228', '\x22B', '\x5', '\x62', '\x32', '\x2', 
		'\x229', '\x22B', '\x5', '\x66', '\x34', '\x2', '\x22A', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x229', '\x3', '\x2', '\x2', 
		'\x2', '\x22B', ']', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\a', 
		'(', '\x2', '\x2', '\x22D', '\x22E', '\a', '\x42', '\x2', '\x2', '\x22E', 
		'\x22F', '\a', '\n', '\x2', '\x2', '\x22F', '\x230', '\x5', '\x46', '$', 
		'\x2', '\x230', '_', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\a', 
		')', '\x2', '\x2', '\x232', '\x233', '\a', '\x42', '\x2', '\x2', '\x233', 
		'\x234', '\a', '\n', '\x2', '\x2', '\x234', '\x235', '\x5', '\x46', '$', 
		'\x2', '\x235', '\x61', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', 
		'\a', '*', '\x2', '\x2', '\x237', '\x238', '\a', '\x42', '\x2', '\x2', 
		'\x238', '\x239', '\a', '\n', '\x2', '\x2', '\x239', '\x23A', '\x5', 'P', 
		')', '\x2', '\x23A', '\x63', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', 
		'\a', '+', '\x2', '\x2', '\x23C', '\x23D', '\a', '\x42', '\x2', '\x2', 
		'\x23D', '\x23E', '\a', '\n', '\x2', '\x2', '\x23E', '\x244', '\a', '\x19', 
		'\x2', '\x2', '\x23F', '\x240', '\a', ',', '\x2', '\x2', '\x240', '\x241', 
		'\a', '\x42', '\x2', '\x2', '\x241', '\x242', '\a', '\n', '\x2', '\x2', 
		'\x242', '\x244', '\a', '\x19', '\x2', '\x2', '\x243', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x5', '\x1C', '\xF', 
		'\x2', '\x246', '\x247', '\x5', 'j', '\x36', '\x2', '\x247', '\x248', 
		'\a', '\x42', '\x2', '\x2', '\x248', '\x249', '\a', '\n', '\x2', '\x2', 
		'\x249', '\x24A', '\x5', 'h', '\x35', '\x2', '\x24A', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x24B', '\x252', '\a', '\x42', '\x2', '\x2', '\x24C', '\x24E', 
		'\a', '\b', '\x2', '\x2', '\x24D', '\x24F', '\x5', '>', ' ', '\x2', '\x24E', 
		'\x24D', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\x3', '\x2', '\x2', 
		'\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', '\x250', '\x252', 
		'\a', '\t', '\x2', '\x2', '\x251', '\x24B', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x252', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x253', '\x254', '\a', '\b', '\x2', '\x2', '\x254', '\x255', 
		'\a', '\x1A', '\x2', '\x2', '\x255', '\x256', '\a', '\t', '\x2', '\x2', 
		'\x256', 'k', '\x3', '\x2', '\x2', '\x2', '\x43', 'o', 's', 'w', '}', 
		'\x84', '\x8B', '\x92', '\x95', '\x9B', '\xA4', '\xAD', '\xB4', '\xBA', 
		'\xC0', '\xC7', '\xCC', '\xD4', '\xE3', '\xE9', '\xED', '\xF4', '\xFA', 
		'\x100', '\x106', '\x10D', '\x118', '\x11B', '\x126', '\x12D', '\x136', 
		'\x13C', '\x140', '\x14C', '\x153', '\x15D', '\x163', '\x167', '\x173', 
		'\x17A', '\x184', '\x195', '\x19E', '\x1A0', '\x1A4', '\x1AC', '\x1B4', 
		'\x1BC', '\x1CB', '\x1CD', '\x1D9', '\x1DB', '\x1E6', '\x1EA', '\x1EF', 
		'\x1F6', '\x203', '\x205', '\x211', '\x218', '\x21D', '\x222', '\x22A', 
		'\x243', '\x24E', '\x251',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
