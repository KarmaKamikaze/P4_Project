/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  STEP.analysis;

namespace STEP.node {

public abstract class PProgram : Node
{
}

public abstract class PSetuploop : Node
{
}

public abstract class PSetup : Node
{
}

public abstract class PLoop : Node
{
}

public abstract class PVariables : Node
{
}

public abstract class PVarOrNl : Node
{
}

public abstract class PFunctions : Node
{
}

public abstract class PFuncdcl : Node
{
}

public abstract class PFuncdclOrNl : Node
{
}

public abstract class PBrackets : Node
{
}

public abstract class PParams : Node
{
}

public abstract class PParamsContent : Node
{
}

public abstract class PParamsMulti : Node
{
}

public abstract class PType : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PStmts : Node
{
}

public abstract class PLoopStmt : Node
{
}

public abstract class PLoopStmts : Node
{
}

public abstract class PLoopifbody : Node
{
}

public abstract class PIfstmt : Node
{
}

public abstract class PLoopifstmt : Node
{
}

public abstract class PWhilestmt : Node
{
}

public abstract class PForstmt : Node
{
}

public abstract class PForIterOpt : Node
{
}

public abstract class PAssstmt : Node
{
}

public abstract class PFunccall : Node
{
}

public abstract class PParamsOptions : Node
{
}

public abstract class PMultiExpr : Node
{
}

public abstract class PRetstmt : Node
{
}

public abstract class PArrindex : Node
{
}

public abstract class PExpr : Node
{
}

public abstract class PTerm : Node
{
}

public abstract class PFactor : Node
{
}

public abstract class PValue : Node
{
}

public abstract class PConstant : Node
{
}

public abstract class PLogicexpr : Node
{
}

public abstract class PLogicequal : Node
{
}

public abstract class PLogiccomp : Node
{
}

public abstract class PLogiccompop : Node
{
}

public abstract class PLogicvalue : Node
{
}

public abstract class PVardcl : Node
{
}

public abstract class PVarOptions : Node
{
}

public abstract class PNumdcl : Node
{
}

public abstract class PStringdcl : Node
{
}

public abstract class PBooldcl : Node
{
}

public abstract class PArrdcl : Node
{
}

public abstract class PArrIdOrLit : Node
{
}

public abstract class PArrsizedcl : Node
{
}


public sealed class AProgram : PProgram
{
    private TypedList _nl_;
    private PVariables _variables_;
    private PSetuploop _setuploop_;
    private PFunctions _functions_;

    public AProgram ()
    {
        this._nl_ = new TypedList(new Nl_Cast(this));
    }

    public AProgram (
            IList _nl_,
            PVariables _variables_,
            PSetuploop _setuploop_,
            PFunctions _functions_
    )
    {
        this._nl_ = new TypedList(new Nl_Cast(this));
        this._nl_.Clear();
        this._nl_.AddAll(_nl_);
        SetVariables (_variables_);
        SetSetuploop (_setuploop_);
        SetFunctions (_functions_);
    }

    public override Object Clone()
    {
        return new AProgram (
            CloneList (_nl_),
            (PVariables)CloneNode (_variables_),
            (PSetuploop)CloneNode (_setuploop_),
            (PFunctions)CloneNode (_functions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public IList GetNl ()
    {
        return _nl_;
    }

    public void setNl (IList list)
    {
        _nl_.Clear();
        _nl_.AddAll(list);
    }
    public PVariables GetVariables ()
    {
        return _variables_;
    }

    public void SetVariables (PVariables node)
    {
        if(_variables_ != null)
        {
            _variables_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variables_ = node;
    }
    public PSetuploop GetSetuploop ()
    {
        return _setuploop_;
    }

    public void SetSetuploop (PSetuploop node)
    {
        if(_setuploop_ != null)
        {
            _setuploop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setuploop_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nl_)
            + ToString (_variables_)
            + ToString (_setuploop_)
            + ToString (_functions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nl_.Contains(child) )
        {
            _nl_.Remove(child);
            return;
        }
        if ( _variables_ == child )
        {
            _variables_ = null;
            return;
        }
        if ( _setuploop_ == child )
        {
            _setuploop_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _nl_.Count; i++ )
        {
            Node n = (Node)_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _variables_ == oldChild )
        {
            SetVariables ((PVariables) newChild);
            return;
        }
        if ( _setuploop_ == oldChild )
        {
            SetSetuploop ((PSetuploop) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
    }

    private class Nl_Cast : Cast
    {
        AProgram obj;

        internal Nl_Cast (AProgram obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneSetuploop : PSetuploop
{
    private PSetup _setup_;
    private TypedList _nl_;

    public AOneSetuploop ()
    {
        this._nl_ = new TypedList(new Nl_Cast(this));
    }

    public AOneSetuploop (
            PSetup _setup_,
            IList _nl_
    )
    {
        SetSetup (_setup_);
        this._nl_ = new TypedList(new Nl_Cast(this));
        this._nl_.Clear();
        this._nl_.AddAll(_nl_);
    }

    public override Object Clone()
    {
        return new AOneSetuploop (
            (PSetup)CloneNode (_setup_),
            CloneList (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneSetuploop(this);
    }

    public PSetup GetSetup ()
    {
        return _setup_;
    }

    public void SetSetup (PSetup node)
    {
        if(_setup_ != null)
        {
            _setup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setup_ = node;
    }
    public IList GetNl ()
    {
        return _nl_;
    }

    public void setNl (IList list)
    {
        _nl_.Clear();
        _nl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_setup_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setup_ == child )
        {
            _setup_ = null;
            return;
        }
        if ( _nl_.Contains(child) )
        {
            _nl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setup_ == oldChild )
        {
            SetSetup ((PSetup) newChild);
            return;
        }
        for ( int i = 0; i < _nl_.Count; i++ )
        {
            Node n = (Node)_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Nl_Cast : Cast
    {
        AOneSetuploop obj;

        internal Nl_Cast (AOneSetuploop obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATwoSetuploop : PSetuploop
{
    private PLoop _loop_;
    private TypedList _nl_;

    public ATwoSetuploop ()
    {
        this._nl_ = new TypedList(new Nl_Cast(this));
    }

    public ATwoSetuploop (
            PLoop _loop_,
            IList _nl_
    )
    {
        SetLoop (_loop_);
        this._nl_ = new TypedList(new Nl_Cast(this));
        this._nl_.Clear();
        this._nl_.AddAll(_nl_);
    }

    public override Object Clone()
    {
        return new ATwoSetuploop (
            (PLoop)CloneNode (_loop_),
            CloneList (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoSetuploop(this);
    }

    public PLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (PLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }
    public IList GetNl ()
    {
        return _nl_;
    }

    public void setNl (IList list)
    {
        _nl_.Clear();
        _nl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
        if ( _nl_.Contains(child) )
        {
            _nl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_ == oldChild )
        {
            SetLoop ((PLoop) newChild);
            return;
        }
        for ( int i = 0; i < _nl_.Count; i++ )
        {
            Node n = (Node)_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Nl_Cast : Cast
    {
        ATwoSetuploop obj;

        internal Nl_Cast (ATwoSetuploop obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AThreeSetuploop : PSetuploop
{
    private PSetup _setup_;
    private TypedList _fst_;
    private PLoop _loop_;
    private TypedList _snd_;

    public AThreeSetuploop ()
    {
        this._fst_ = new TypedList(new Fst_Cast(this));
        this._snd_ = new TypedList(new Snd_Cast(this));
    }

    public AThreeSetuploop (
            PSetup _setup_,
            IList _fst_,
            PLoop _loop_,
            IList _snd_
    )
    {
        SetSetup (_setup_);
        this._fst_ = new TypedList(new Fst_Cast(this));
        this._fst_.Clear();
        this._fst_.AddAll(_fst_);
        SetLoop (_loop_);
        this._snd_ = new TypedList(new Snd_Cast(this));
        this._snd_.Clear();
        this._snd_.AddAll(_snd_);
    }

    public override Object Clone()
    {
        return new AThreeSetuploop (
            (PSetup)CloneNode (_setup_),
            CloneList (_fst_),
            (PLoop)CloneNode (_loop_),
            CloneList (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeSetuploop(this);
    }

    public PSetup GetSetup ()
    {
        return _setup_;
    }

    public void SetSetup (PSetup node)
    {
        if(_setup_ != null)
        {
            _setup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setup_ = node;
    }
    public IList GetFst ()
    {
        return _fst_;
    }

    public void setFst (IList list)
    {
        _fst_.Clear();
        _fst_.AddAll(list);
    }
    public PLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (PLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }
    public IList GetSnd ()
    {
        return _snd_;
    }

    public void setSnd (IList list)
    {
        _snd_.Clear();
        _snd_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_setup_)
            + ToString (_fst_)
            + ToString (_loop_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setup_ == child )
        {
            _setup_ = null;
            return;
        }
        if ( _fst_.Contains(child) )
        {
            _fst_.Remove(child);
            return;
        }
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
        if ( _snd_.Contains(child) )
        {
            _snd_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setup_ == oldChild )
        {
            SetSetup ((PSetup) newChild);
            return;
        }
        for ( int i = 0; i < _fst_.Count; i++ )
        {
            Node n = (Node)_fst_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _fst_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _fst_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _loop_ == oldChild )
        {
            SetLoop ((PLoop) newChild);
            return;
        }
        for ( int i = 0; i < _snd_.Count; i++ )
        {
            Node n = (Node)_snd_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _snd_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _snd_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Fst_Cast : Cast
    {
        AThreeSetuploop obj;

        internal Fst_Cast (AThreeSetuploop obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
    private class Snd_Cast : Cast
    {
        AThreeSetuploop obj;

        internal Snd_Cast (AThreeSetuploop obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ASetup : PSetup
{
    private TSetup _setup_;
    private TypedList _stmt_;
    private TEndsetup _endsetup_;

    public ASetup ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ASetup (
            TSetup _setup_,
            IList _stmt_,
            TEndsetup _endsetup_
    )
    {
        SetSetup (_setup_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndsetup (_endsetup_);
    }

    public override Object Clone()
    {
        return new ASetup (
            (TSetup)CloneNode (_setup_),
            CloneList (_stmt_),
            (TEndsetup)CloneNode (_endsetup_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASetup(this);
    }

    public TSetup GetSetup ()
    {
        return _setup_;
    }

    public void SetSetup (TSetup node)
    {
        if(_setup_ != null)
        {
            _setup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setup_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndsetup GetEndsetup ()
    {
        return _endsetup_;
    }

    public void SetEndsetup (TEndsetup node)
    {
        if(_endsetup_ != null)
        {
            _endsetup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endsetup_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_setup_)
            + ToString (_stmt_)
            + ToString (_endsetup_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setup_ == child )
        {
            _setup_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endsetup_ == child )
        {
            _endsetup_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setup_ == oldChild )
        {
            SetSetup ((TSetup) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endsetup_ == oldChild )
        {
            SetEndsetup ((TEndsetup) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ASetup obj;

        internal Stmt_Cast (ASetup obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ALoop : PLoop
{
    private TLoop _loop_;
    private TypedList _stmt_;
    private TEndloop _endloop_;

    public ALoop ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ALoop (
            TLoop _loop_,
            IList _stmt_,
            TEndloop _endloop_
    )
    {
        SetLoop (_loop_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndloop (_endloop_);
    }

    public override Object Clone()
    {
        return new ALoop (
            (TLoop)CloneNode (_loop_),
            CloneList (_stmt_),
            (TEndloop)CloneNode (_endloop_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoop(this);
    }

    public TLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (TLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndloop GetEndloop ()
    {
        return _endloop_;
    }

    public void SetEndloop (TEndloop node)
    {
        if(_endloop_ != null)
        {
            _endloop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endloop_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_)
            + ToString (_stmt_)
            + ToString (_endloop_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endloop_ == child )
        {
            _endloop_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_ == oldChild )
        {
            SetLoop ((TLoop) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endloop_ == oldChild )
        {
            SetEndloop ((TEndloop) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ALoop obj;

        internal Stmt_Cast (ALoop obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AVariables : PVariables
{
    private TVariables _variables_;
    private TypedList _var_or_nl_;
    private TEndvariables _endvariables_;
    private TypedList _nl_;

    public AVariables ()
    {
        this._var_or_nl_ = new TypedList(new VarOrNl_Cast(this));
        this._nl_ = new TypedList(new Nl_Cast(this));
    }

    public AVariables (
            TVariables _variables_,
            IList _var_or_nl_,
            TEndvariables _endvariables_,
            IList _nl_
    )
    {
        SetVariables (_variables_);
        this._var_or_nl_ = new TypedList(new VarOrNl_Cast(this));
        this._var_or_nl_.Clear();
        this._var_or_nl_.AddAll(_var_or_nl_);
        SetEndvariables (_endvariables_);
        this._nl_ = new TypedList(new Nl_Cast(this));
        this._nl_.Clear();
        this._nl_.AddAll(_nl_);
    }

    public override Object Clone()
    {
        return new AVariables (
            (TVariables)CloneNode (_variables_),
            CloneList (_var_or_nl_),
            (TEndvariables)CloneNode (_endvariables_),
            CloneList (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariables(this);
    }

    public TVariables GetVariables ()
    {
        return _variables_;
    }

    public void SetVariables (TVariables node)
    {
        if(_variables_ != null)
        {
            _variables_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variables_ = node;
    }
    public IList GetVarOrNl ()
    {
        return _var_or_nl_;
    }

    public void setVarOrNl (IList list)
    {
        _var_or_nl_.Clear();
        _var_or_nl_.AddAll(list);
    }
    public TEndvariables GetEndvariables ()
    {
        return _endvariables_;
    }

    public void SetEndvariables (TEndvariables node)
    {
        if(_endvariables_ != null)
        {
            _endvariables_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endvariables_ = node;
    }
    public IList GetNl ()
    {
        return _nl_;
    }

    public void setNl (IList list)
    {
        _nl_.Clear();
        _nl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_variables_)
            + ToString (_var_or_nl_)
            + ToString (_endvariables_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variables_ == child )
        {
            _variables_ = null;
            return;
        }
        if ( _var_or_nl_.Contains(child) )
        {
            _var_or_nl_.Remove(child);
            return;
        }
        if ( _endvariables_ == child )
        {
            _endvariables_ = null;
            return;
        }
        if ( _nl_.Contains(child) )
        {
            _nl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variables_ == oldChild )
        {
            SetVariables ((TVariables) newChild);
            return;
        }
        for ( int i = 0; i < _var_or_nl_.Count; i++ )
        {
            Node n = (Node)_var_or_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _var_or_nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _var_or_nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endvariables_ == oldChild )
        {
            SetEndvariables ((TEndvariables) newChild);
            return;
        }
        for ( int i = 0; i < _nl_.Count; i++ )
        {
            Node n = (Node)_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class VarOrNl_Cast : Cast
    {
        AVariables obj;

        internal VarOrNl_Cast (AVariables obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PVarOrNl node = (PVarOrNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PVarOrNl node = (PVarOrNl) o;
            node.Parent(null);
            return node;
        }
    }
    private class Nl_Cast : Cast
    {
        AVariables obj;

        internal Nl_Cast (AVariables obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneVarOrNl : PVarOrNl
{
    private PVardcl _vardcl_;

    public AOneVarOrNl ()
    {
    }

    public AOneVarOrNl (
            PVardcl _vardcl_
    )
    {
        SetVardcl (_vardcl_);
    }

    public override Object Clone()
    {
        return new AOneVarOrNl (
            (PVardcl)CloneNode (_vardcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneVarOrNl(this);
    }

    public PVardcl GetVardcl ()
    {
        return _vardcl_;
    }

    public void SetVardcl (PVardcl node)
    {
        if(_vardcl_ != null)
        {
            _vardcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _vardcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_vardcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _vardcl_ == child )
        {
            _vardcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _vardcl_ == oldChild )
        {
            SetVardcl ((PVardcl) newChild);
            return;
        }
    }

}
public sealed class ATwoVarOrNl : PVarOrNl
{
    private TNl _nl_;

    public ATwoVarOrNl ()
    {
    }

    public ATwoVarOrNl (
            TNl _nl_
    )
    {
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoVarOrNl (
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoVarOrNl(this);
    }

    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AFunctions : PFunctions
{
    private TFunctions _functions_;
    private TypedList _funcdcl_or_nl_;
    private TEndfunctions _endfunctions_;
    private TypedList _nl_;

    public AFunctions ()
    {
        this._funcdcl_or_nl_ = new TypedList(new FuncdclOrNl_Cast(this));
        this._nl_ = new TypedList(new Nl_Cast(this));
    }

    public AFunctions (
            TFunctions _functions_,
            IList _funcdcl_or_nl_,
            TEndfunctions _endfunctions_,
            IList _nl_
    )
    {
        SetFunctions (_functions_);
        this._funcdcl_or_nl_ = new TypedList(new FuncdclOrNl_Cast(this));
        this._funcdcl_or_nl_.Clear();
        this._funcdcl_or_nl_.AddAll(_funcdcl_or_nl_);
        SetEndfunctions (_endfunctions_);
        this._nl_ = new TypedList(new Nl_Cast(this));
        this._nl_.Clear();
        this._nl_.AddAll(_nl_);
    }

    public override Object Clone()
    {
        return new AFunctions (
            (TFunctions)CloneNode (_functions_),
            CloneList (_funcdcl_or_nl_),
            (TEndfunctions)CloneNode (_endfunctions_),
            CloneList (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctions(this);
    }

    public TFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (TFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }
    public IList GetFuncdclOrNl ()
    {
        return _funcdcl_or_nl_;
    }

    public void setFuncdclOrNl (IList list)
    {
        _funcdcl_or_nl_.Clear();
        _funcdcl_or_nl_.AddAll(list);
    }
    public TEndfunctions GetEndfunctions ()
    {
        return _endfunctions_;
    }

    public void SetEndfunctions (TEndfunctions node)
    {
        if(_endfunctions_ != null)
        {
            _endfunctions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfunctions_ = node;
    }
    public IList GetNl ()
    {
        return _nl_;
    }

    public void setNl (IList list)
    {
        _nl_.Clear();
        _nl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_functions_)
            + ToString (_funcdcl_or_nl_)
            + ToString (_endfunctions_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
        if ( _funcdcl_or_nl_.Contains(child) )
        {
            _funcdcl_or_nl_.Remove(child);
            return;
        }
        if ( _endfunctions_ == child )
        {
            _endfunctions_ = null;
            return;
        }
        if ( _nl_.Contains(child) )
        {
            _nl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functions_ == oldChild )
        {
            SetFunctions ((TFunctions) newChild);
            return;
        }
        for ( int i = 0; i < _funcdcl_or_nl_.Count; i++ )
        {
            Node n = (Node)_funcdcl_or_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _funcdcl_or_nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _funcdcl_or_nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endfunctions_ == oldChild )
        {
            SetEndfunctions ((TEndfunctions) newChild);
            return;
        }
        for ( int i = 0; i < _nl_.Count; i++ )
        {
            Node n = (Node)_nl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _nl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _nl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class FuncdclOrNl_Cast : Cast
    {
        AFunctions obj;

        internal FuncdclOrNl_Cast (AFunctions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PFuncdclOrNl node = (PFuncdclOrNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PFuncdclOrNl node = (PFuncdclOrNl) o;
            node.Parent(null);
            return node;
        }
    }
    private class Nl_Cast : Cast
    {
        AFunctions obj;

        internal Nl_Cast (AFunctions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TNl node = (TNl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TNl node = (TNl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneFuncdcl : PFuncdcl
{
    private PType _type_;
    private PBrackets _brackets_;
    private TFunction _function_;
    private TId _id_;
    private PParams _params_;
    private TypedList _stmt_;
    private PRetstmt _retstmt_;
    private TNl _fst_;
    private TEndfunction _endfunction_;
    private TNl _snd_;

    public AOneFuncdcl ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public AOneFuncdcl (
            PType _type_,
            PBrackets _brackets_,
            TFunction _function_,
            TId _id_,
            PParams _params_,
            IList _stmt_,
            PRetstmt _retstmt_,
            TNl _fst_,
            TEndfunction _endfunction_,
            TNl _snd_
    )
    {
        SetType (_type_);
        SetBrackets (_brackets_);
        SetFunction (_function_);
        SetId (_id_);
        SetParams (_params_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetRetstmt (_retstmt_);
        SetFst (_fst_);
        SetEndfunction (_endfunction_);
        SetSnd (_snd_);
    }

    public override Object Clone()
    {
        return new AOneFuncdcl (
            (PType)CloneNode (_type_),
            (PBrackets)CloneNode (_brackets_),
            (TFunction)CloneNode (_function_),
            (TId)CloneNode (_id_),
            (PParams)CloneNode (_params_),
            CloneList (_stmt_),
            (PRetstmt)CloneNode (_retstmt_),
            (TNl)CloneNode (_fst_),
            (TEndfunction)CloneNode (_endfunction_),
            (TNl)CloneNode (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneFuncdcl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBrackets GetBrackets ()
    {
        return _brackets_;
    }

    public void SetBrackets (PBrackets node)
    {
        if(_brackets_ != null)
        {
            _brackets_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _brackets_ = node;
    }
    public TFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public PRetstmt GetRetstmt ()
    {
        return _retstmt_;
    }

    public void SetRetstmt (PRetstmt node)
    {
        if(_retstmt_ != null)
        {
            _retstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _retstmt_ = node;
    }
    public TNl GetFst ()
    {
        return _fst_;
    }

    public void SetFst (TNl node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public TEndfunction GetEndfunction ()
    {
        return _endfunction_;
    }

    public void SetEndfunction (TEndfunction node)
    {
        if(_endfunction_ != null)
        {
            _endfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfunction_ = node;
    }
    public TNl GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (TNl node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_brackets_)
            + ToString (_function_)
            + ToString (_id_)
            + ToString (_params_)
            + ToString (_stmt_)
            + ToString (_retstmt_)
            + ToString (_fst_)
            + ToString (_endfunction_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _brackets_ == child )
        {
            _brackets_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _retstmt_ == child )
        {
            _retstmt_ = null;
            return;
        }
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _endfunction_ == child )
        {
            _endfunction_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _brackets_ == oldChild )
        {
            SetBrackets ((PBrackets) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((TFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _retstmt_ == oldChild )
        {
            SetRetstmt ((PRetstmt) newChild);
            return;
        }
        if ( _fst_ == oldChild )
        {
            SetFst ((TNl) newChild);
            return;
        }
        if ( _endfunction_ == oldChild )
        {
            SetEndfunction ((TEndfunction) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((TNl) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        AOneFuncdcl obj;

        internal Stmt_Cast (AOneFuncdcl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATwoFuncdcl : PFuncdcl
{
    private TBlank _blank_;
    private TFunction _function_;
    private TId _id_;
    private PParams _params_;
    private TypedList _stmt_;
    private TEndfunction _endfunction_;
    private TNl _nl_;

    public ATwoFuncdcl ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ATwoFuncdcl (
            TBlank _blank_,
            TFunction _function_,
            TId _id_,
            PParams _params_,
            IList _stmt_,
            TEndfunction _endfunction_,
            TNl _nl_
    )
    {
        SetBlank (_blank_);
        SetFunction (_function_);
        SetId (_id_);
        SetParams (_params_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndfunction (_endfunction_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoFuncdcl (
            (TBlank)CloneNode (_blank_),
            (TFunction)CloneNode (_function_),
            (TId)CloneNode (_id_),
            (PParams)CloneNode (_params_),
            CloneList (_stmt_),
            (TEndfunction)CloneNode (_endfunction_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoFuncdcl(this);
    }

    public TBlank GetBlank ()
    {
        return _blank_;
    }

    public void SetBlank (TBlank node)
    {
        if(_blank_ != null)
        {
            _blank_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _blank_ = node;
    }
    public TFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndfunction GetEndfunction ()
    {
        return _endfunction_;
    }

    public void SetEndfunction (TEndfunction node)
    {
        if(_endfunction_ != null)
        {
            _endfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfunction_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_blank_)
            + ToString (_function_)
            + ToString (_id_)
            + ToString (_params_)
            + ToString (_stmt_)
            + ToString (_endfunction_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _blank_ == child )
        {
            _blank_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endfunction_ == child )
        {
            _endfunction_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _blank_ == oldChild )
        {
            SetBlank ((TBlank) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((TFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endfunction_ == oldChild )
        {
            SetEndfunction ((TEndfunction) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ATwoFuncdcl obj;

        internal Stmt_Cast (ATwoFuncdcl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneFuncdclOrNl : PFuncdclOrNl
{
    private PFuncdcl _funcdcl_;

    public AOneFuncdclOrNl ()
    {
    }

    public AOneFuncdclOrNl (
            PFuncdcl _funcdcl_
    )
    {
        SetFuncdcl (_funcdcl_);
    }

    public override Object Clone()
    {
        return new AOneFuncdclOrNl (
            (PFuncdcl)CloneNode (_funcdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneFuncdclOrNl(this);
    }

    public PFuncdcl GetFuncdcl ()
    {
        return _funcdcl_;
    }

    public void SetFuncdcl (PFuncdcl node)
    {
        if(_funcdcl_ != null)
        {
            _funcdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funcdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funcdcl_ == child )
        {
            _funcdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funcdcl_ == oldChild )
        {
            SetFuncdcl ((PFuncdcl) newChild);
            return;
        }
    }

}
public sealed class ATwoFuncdclOrNl : PFuncdclOrNl
{
    private TNl _nl_;

    public ATwoFuncdclOrNl ()
    {
    }

    public ATwoFuncdclOrNl (
            TNl _nl_
    )
    {
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoFuncdclOrNl (
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoFuncdclOrNl(this);
    }

    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ABrackets : PBrackets
{
    private TLbrack _lbrack_;
    private TRbrack _rbrack_;

    public ABrackets ()
    {
    }

    public ABrackets (
            TLbrack _lbrack_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new ABrackets (
            (TLbrack)CloneNode (_lbrack_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABrackets(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}
public sealed class AParams : PParams
{
    private TLparen _lparen_;
    private PParamsContent _params_content_;
    private TRparen _rparen_;

    public AParams ()
    {
    }

    public AParams (
            TLparen _lparen_,
            PParamsContent _params_content_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetParamsContent (_params_content_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AParams (
            (TLparen)CloneNode (_lparen_),
            (PParamsContent)CloneNode (_params_content_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParams(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PParamsContent GetParamsContent ()
    {
        return _params_content_;
    }

    public void SetParamsContent (PParamsContent node)
    {
        if(_params_content_ != null)
        {
            _params_content_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_content_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_params_content_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _params_content_ == child )
        {
            _params_content_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _params_content_ == oldChild )
        {
            SetParamsContent ((PParamsContent) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AParamsContent : PParamsContent
{
    private PType _type_;
    private PBrackets _brackets_;
    private TId _id_;
    private TypedList _params_multi_;

    public AParamsContent ()
    {
        this._params_multi_ = new TypedList(new ParamsMulti_Cast(this));
    }

    public AParamsContent (
            PType _type_,
            PBrackets _brackets_,
            TId _id_,
            IList _params_multi_
    )
    {
        SetType (_type_);
        SetBrackets (_brackets_);
        SetId (_id_);
        this._params_multi_ = new TypedList(new ParamsMulti_Cast(this));
        this._params_multi_.Clear();
        this._params_multi_.AddAll(_params_multi_);
    }

    public override Object Clone()
    {
        return new AParamsContent (
            (PType)CloneNode (_type_),
            (PBrackets)CloneNode (_brackets_),
            (TId)CloneNode (_id_),
            CloneList (_params_multi_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsContent(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBrackets GetBrackets ()
    {
        return _brackets_;
    }

    public void SetBrackets (PBrackets node)
    {
        if(_brackets_ != null)
        {
            _brackets_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _brackets_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public IList GetParamsMulti ()
    {
        return _params_multi_;
    }

    public void setParamsMulti (IList list)
    {
        _params_multi_.Clear();
        _params_multi_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_brackets_)
            + ToString (_id_)
            + ToString (_params_multi_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _brackets_ == child )
        {
            _brackets_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _params_multi_.Contains(child) )
        {
            _params_multi_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _brackets_ == oldChild )
        {
            SetBrackets ((PBrackets) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _params_multi_.Count; i++ )
        {
            Node n = (Node)_params_multi_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _params_multi_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _params_multi_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class ParamsMulti_Cast : Cast
    {
        AParamsContent obj;

        internal ParamsMulti_Cast (AParamsContent obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParamsMulti node = (PParamsMulti) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParamsMulti node = (PParamsMulti) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AParamsMulti : PParamsMulti
{
    private TComma _comma_;
    private PType _type_;
    private PBrackets _brackets_;
    private TId _id_;

    public AParamsMulti ()
    {
    }

    public AParamsMulti (
            TComma _comma_,
            PType _type_,
            PBrackets _brackets_,
            TId _id_
    )
    {
        SetComma (_comma_);
        SetType (_type_);
        SetBrackets (_brackets_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AParamsMulti (
            (TComma)CloneNode (_comma_),
            (PType)CloneNode (_type_),
            (PBrackets)CloneNode (_brackets_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsMulti(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBrackets GetBrackets ()
    {
        return _brackets_;
    }

    public void SetBrackets (PBrackets node)
    {
        if(_brackets_ != null)
        {
            _brackets_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _brackets_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_type_)
            + ToString (_brackets_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _brackets_ == child )
        {
            _brackets_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _brackets_ == oldChild )
        {
            SetBrackets ((PBrackets) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AOneType : PType
{
    private TNumber _number_;

    public AOneType ()
    {
    }

    public AOneType (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new AOneType (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneType(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}
public sealed class ATwoType : PType
{
    private TString _string_;

    public ATwoType ()
    {
    }

    public ATwoType (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new ATwoType (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoType(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AThreeType : PType
{
    private TBoolean _boolean_;

    public AThreeType ()
    {
    }

    public AThreeType (
            TBoolean _boolean_
    )
    {
        SetBoolean (_boolean_);
    }

    public override Object Clone()
    {
        return new AThreeType (
            (TBoolean)CloneNode (_boolean_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeType(this);
    }

    public TBoolean GetBoolean ()
    {
        return _boolean_;
    }

    public void SetBoolean (TBoolean node)
    {
        if(_boolean_ != null)
        {
            _boolean_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_ == child )
        {
            _boolean_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_ == oldChild )
        {
            SetBoolean ((TBoolean) newChild);
            return;
        }
    }

}
public sealed class AStmt : PStmt
{
    private PStmts _stmts_;
    private TNl _nl_;

    public AStmt ()
    {
    }

    public AStmt (
            PStmts _stmts_,
            TNl _nl_
    )
    {
        SetStmts (_stmts_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AStmt (
            (PStmts)CloneNode (_stmts_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmt(this);
    }

    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmts_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AOneStmts : PStmts
{
    private PIfstmt _ifstmt_;

    public AOneStmts ()
    {
    }

    public AOneStmts (
            PIfstmt _ifstmt_
    )
    {
        SetIfstmt (_ifstmt_);
    }

    public override Object Clone()
    {
        return new AOneStmts (
            (PIfstmt)CloneNode (_ifstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneStmts(this);
    }

    public PIfstmt GetIfstmt ()
    {
        return _ifstmt_;
    }

    public void SetIfstmt (PIfstmt node)
    {
        if(_ifstmt_ != null)
        {
            _ifstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ifstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ifstmt_ == child )
        {
            _ifstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ifstmt_ == oldChild )
        {
            SetIfstmt ((PIfstmt) newChild);
            return;
        }
    }

}
public sealed class ATwoStmts : PStmts
{
    private PWhilestmt _whilestmt_;

    public ATwoStmts ()
    {
    }

    public ATwoStmts (
            PWhilestmt _whilestmt_
    )
    {
        SetWhilestmt (_whilestmt_);
    }

    public override Object Clone()
    {
        return new ATwoStmts (
            (PWhilestmt)CloneNode (_whilestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoStmts(this);
    }

    public PWhilestmt GetWhilestmt ()
    {
        return _whilestmt_;
    }

    public void SetWhilestmt (PWhilestmt node)
    {
        if(_whilestmt_ != null)
        {
            _whilestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _whilestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_whilestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _whilestmt_ == child )
        {
            _whilestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _whilestmt_ == oldChild )
        {
            SetWhilestmt ((PWhilestmt) newChild);
            return;
        }
    }

}
public sealed class AThreeStmts : PStmts
{
    private PForstmt _forstmt_;

    public AThreeStmts ()
    {
    }

    public AThreeStmts (
            PForstmt _forstmt_
    )
    {
        SetForstmt (_forstmt_);
    }

    public override Object Clone()
    {
        return new AThreeStmts (
            (PForstmt)CloneNode (_forstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeStmts(this);
    }

    public PForstmt GetForstmt ()
    {
        return _forstmt_;
    }

    public void SetForstmt (PForstmt node)
    {
        if(_forstmt_ != null)
        {
            _forstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _forstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_forstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _forstmt_ == child )
        {
            _forstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _forstmt_ == oldChild )
        {
            SetForstmt ((PForstmt) newChild);
            return;
        }
    }

}
public sealed class AFourStmts : PStmts
{
    private PVardcl _vardcl_;

    public AFourStmts ()
    {
    }

    public AFourStmts (
            PVardcl _vardcl_
    )
    {
        SetVardcl (_vardcl_);
    }

    public override Object Clone()
    {
        return new AFourStmts (
            (PVardcl)CloneNode (_vardcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourStmts(this);
    }

    public PVardcl GetVardcl ()
    {
        return _vardcl_;
    }

    public void SetVardcl (PVardcl node)
    {
        if(_vardcl_ != null)
        {
            _vardcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _vardcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_vardcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _vardcl_ == child )
        {
            _vardcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _vardcl_ == oldChild )
        {
            SetVardcl ((PVardcl) newChild);
            return;
        }
    }

}
public sealed class AFiveStmts : PStmts
{
    private PAssstmt _assstmt_;

    public AFiveStmts ()
    {
    }

    public AFiveStmts (
            PAssstmt _assstmt_
    )
    {
        SetAssstmt (_assstmt_);
    }

    public override Object Clone()
    {
        return new AFiveStmts (
            (PAssstmt)CloneNode (_assstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFiveStmts(this);
    }

    public PAssstmt GetAssstmt ()
    {
        return _assstmt_;
    }

    public void SetAssstmt (PAssstmt node)
    {
        if(_assstmt_ != null)
        {
            _assstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assstmt_ == child )
        {
            _assstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assstmt_ == oldChild )
        {
            SetAssstmt ((PAssstmt) newChild);
            return;
        }
    }

}
public sealed class ASixStmts : PStmts
{
    private PFunccall _funccall_;

    public ASixStmts ()
    {
    }

    public ASixStmts (
            PFunccall _funccall_
    )
    {
        SetFunccall (_funccall_);
    }

    public override Object Clone()
    {
        return new ASixStmts (
            (PFunccall)CloneNode (_funccall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASixStmts(this);
    }

    public PFunccall GetFunccall ()
    {
        return _funccall_;
    }

    public void SetFunccall (PFunccall node)
    {
        if(_funccall_ != null)
        {
            _funccall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funccall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funccall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funccall_ == child )
        {
            _funccall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funccall_ == oldChild )
        {
            SetFunccall ((PFunccall) newChild);
            return;
        }
    }

}
public sealed class ASevenStmts : PStmts
{
    private PRetstmt _retstmt_;

    public ASevenStmts ()
    {
    }

    public ASevenStmts (
            PRetstmt _retstmt_
    )
    {
        SetRetstmt (_retstmt_);
    }

    public override Object Clone()
    {
        return new ASevenStmts (
            (PRetstmt)CloneNode (_retstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASevenStmts(this);
    }

    public PRetstmt GetRetstmt ()
    {
        return _retstmt_;
    }

    public void SetRetstmt (PRetstmt node)
    {
        if(_retstmt_ != null)
        {
            _retstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _retstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_retstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _retstmt_ == child )
        {
            _retstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _retstmt_ == oldChild )
        {
            SetRetstmt ((PRetstmt) newChild);
            return;
        }
    }

}
public sealed class AStmts : PStmts
{


    public AStmts (
    )
    {
    }

    public override Object Clone()
    {
        return new AStmts (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmts(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ALoopStmt : PLoopStmt
{
    private PLoopStmts _loop_stmts_;
    private TNl _nl_;

    public ALoopStmt ()
    {
    }

    public ALoopStmt (
            PLoopStmts _loop_stmts_,
            TNl _nl_
    )
    {
        SetLoopStmts (_loop_stmts_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ALoopStmt (
            (PLoopStmts)CloneNode (_loop_stmts_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopStmt(this);
    }

    public PLoopStmts GetLoopStmts ()
    {
        return _loop_stmts_;
    }

    public void SetLoopStmts (PLoopStmts node)
    {
        if(_loop_stmts_ != null)
        {
            _loop_stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_stmts_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_stmts_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_stmts_ == child )
        {
            _loop_stmts_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_stmts_ == oldChild )
        {
            SetLoopStmts ((PLoopStmts) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AOneLoopStmts : PLoopStmts
{
    private PLoopifstmt _loopifstmt_;

    public AOneLoopStmts ()
    {
    }

    public AOneLoopStmts (
            PLoopifstmt _loopifstmt_
    )
    {
        SetLoopifstmt (_loopifstmt_);
    }

    public override Object Clone()
    {
        return new AOneLoopStmts (
            (PLoopifstmt)CloneNode (_loopifstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneLoopStmts(this);
    }

    public PLoopifstmt GetLoopifstmt ()
    {
        return _loopifstmt_;
    }

    public void SetLoopifstmt (PLoopifstmt node)
    {
        if(_loopifstmt_ != null)
        {
            _loopifstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loopifstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loopifstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loopifstmt_ == child )
        {
            _loopifstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loopifstmt_ == oldChild )
        {
            SetLoopifstmt ((PLoopifstmt) newChild);
            return;
        }
    }

}
public sealed class ATwoLoopStmts : PLoopStmts
{
    private PWhilestmt _whilestmt_;

    public ATwoLoopStmts ()
    {
    }

    public ATwoLoopStmts (
            PWhilestmt _whilestmt_
    )
    {
        SetWhilestmt (_whilestmt_);
    }

    public override Object Clone()
    {
        return new ATwoLoopStmts (
            (PWhilestmt)CloneNode (_whilestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoLoopStmts(this);
    }

    public PWhilestmt GetWhilestmt ()
    {
        return _whilestmt_;
    }

    public void SetWhilestmt (PWhilestmt node)
    {
        if(_whilestmt_ != null)
        {
            _whilestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _whilestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_whilestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _whilestmt_ == child )
        {
            _whilestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _whilestmt_ == oldChild )
        {
            SetWhilestmt ((PWhilestmt) newChild);
            return;
        }
    }

}
public sealed class AThreeLoopStmts : PLoopStmts
{
    private PForstmt _forstmt_;

    public AThreeLoopStmts ()
    {
    }

    public AThreeLoopStmts (
            PForstmt _forstmt_
    )
    {
        SetForstmt (_forstmt_);
    }

    public override Object Clone()
    {
        return new AThreeLoopStmts (
            (PForstmt)CloneNode (_forstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeLoopStmts(this);
    }

    public PForstmt GetForstmt ()
    {
        return _forstmt_;
    }

    public void SetForstmt (PForstmt node)
    {
        if(_forstmt_ != null)
        {
            _forstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _forstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_forstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _forstmt_ == child )
        {
            _forstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _forstmt_ == oldChild )
        {
            SetForstmt ((PForstmt) newChild);
            return;
        }
    }

}
public sealed class AFourLoopStmts : PLoopStmts
{
    private PVardcl _vardcl_;

    public AFourLoopStmts ()
    {
    }

    public AFourLoopStmts (
            PVardcl _vardcl_
    )
    {
        SetVardcl (_vardcl_);
    }

    public override Object Clone()
    {
        return new AFourLoopStmts (
            (PVardcl)CloneNode (_vardcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourLoopStmts(this);
    }

    public PVardcl GetVardcl ()
    {
        return _vardcl_;
    }

    public void SetVardcl (PVardcl node)
    {
        if(_vardcl_ != null)
        {
            _vardcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _vardcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_vardcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _vardcl_ == child )
        {
            _vardcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _vardcl_ == oldChild )
        {
            SetVardcl ((PVardcl) newChild);
            return;
        }
    }

}
public sealed class AFiveLoopStmts : PLoopStmts
{
    private PAssstmt _assstmt_;

    public AFiveLoopStmts ()
    {
    }

    public AFiveLoopStmts (
            PAssstmt _assstmt_
    )
    {
        SetAssstmt (_assstmt_);
    }

    public override Object Clone()
    {
        return new AFiveLoopStmts (
            (PAssstmt)CloneNode (_assstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFiveLoopStmts(this);
    }

    public PAssstmt GetAssstmt ()
    {
        return _assstmt_;
    }

    public void SetAssstmt (PAssstmt node)
    {
        if(_assstmt_ != null)
        {
            _assstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assstmt_ == child )
        {
            _assstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assstmt_ == oldChild )
        {
            SetAssstmt ((PAssstmt) newChild);
            return;
        }
    }

}
public sealed class ASixLoopStmts : PLoopStmts
{
    private PFunccall _funccall_;

    public ASixLoopStmts ()
    {
    }

    public ASixLoopStmts (
            PFunccall _funccall_
    )
    {
        SetFunccall (_funccall_);
    }

    public override Object Clone()
    {
        return new ASixLoopStmts (
            (PFunccall)CloneNode (_funccall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASixLoopStmts(this);
    }

    public PFunccall GetFunccall ()
    {
        return _funccall_;
    }

    public void SetFunccall (PFunccall node)
    {
        if(_funccall_ != null)
        {
            _funccall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funccall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funccall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funccall_ == child )
        {
            _funccall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funccall_ == oldChild )
        {
            SetFunccall ((PFunccall) newChild);
            return;
        }
    }

}
public sealed class ASevenLoopStmts : PLoopStmts
{
    private PRetstmt _retstmt_;

    public ASevenLoopStmts ()
    {
    }

    public ASevenLoopStmts (
            PRetstmt _retstmt_
    )
    {
        SetRetstmt (_retstmt_);
    }

    public override Object Clone()
    {
        return new ASevenLoopStmts (
            (PRetstmt)CloneNode (_retstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASevenLoopStmts(this);
    }

    public PRetstmt GetRetstmt ()
    {
        return _retstmt_;
    }

    public void SetRetstmt (PRetstmt node)
    {
        if(_retstmt_ != null)
        {
            _retstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _retstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_retstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _retstmt_ == child )
        {
            _retstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _retstmt_ == oldChild )
        {
            SetRetstmt ((PRetstmt) newChild);
            return;
        }
    }

}
public sealed class ALoopStmts : PLoopStmts
{


    public ALoopStmts (
    )
    {
    }

    public override Object Clone()
    {
        return new ALoopStmts (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopStmts(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOneLoopifbody : PLoopifbody
{
    private PLoopStmt _loop_stmt_;

    public AOneLoopifbody ()
    {
    }

    public AOneLoopifbody (
            PLoopStmt _loop_stmt_
    )
    {
        SetLoopStmt (_loop_stmt_);
    }

    public override Object Clone()
    {
        return new AOneLoopifbody (
            (PLoopStmt)CloneNode (_loop_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneLoopifbody(this);
    }

    public PLoopStmt GetLoopStmt ()
    {
        return _loop_stmt_;
    }

    public void SetLoopStmt (PLoopStmt node)
    {
        if(_loop_stmt_ != null)
        {
            _loop_stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_stmt_ == child )
        {
            _loop_stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_stmt_ == oldChild )
        {
            SetLoopStmt ((PLoopStmt) newChild);
            return;
        }
    }

}
public sealed class ATwoLoopifbody : PLoopifbody
{
    private TContinue _continue_;
    private TNl _nl_;

    public ATwoLoopifbody ()
    {
    }

    public ATwoLoopifbody (
            TContinue _continue_,
            TNl _nl_
    )
    {
        SetContinue (_continue_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoLoopifbody (
            (TContinue)CloneNode (_continue_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoLoopifbody(this);
    }

    public TContinue GetContinue ()
    {
        return _continue_;
    }

    public void SetContinue (TContinue node)
    {
        if(_continue_ != null)
        {
            _continue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _continue_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_continue_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _continue_ == child )
        {
            _continue_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _continue_ == oldChild )
        {
            SetContinue ((TContinue) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AThreeLoopifbody : PLoopifbody
{
    private TBreak _break_;
    private TNl _nl_;

    public AThreeLoopifbody ()
    {
    }

    public AThreeLoopifbody (
            TBreak _break_,
            TNl _nl_
    )
    {
        SetBreak (_break_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AThreeLoopifbody (
            (TBreak)CloneNode (_break_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeLoopifbody(this);
    }

    public TBreak GetBreak ()
    {
        return _break_;
    }

    public void SetBreak (TBreak node)
    {
        if(_break_ != null)
        {
            _break_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _break_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_break_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _break_ == child )
        {
            _break_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _break_ == oldChild )
        {
            SetBreak ((TBreak) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ANonelseIfstmt : PIfstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PLogicexpr _logicexpr_;
    private TRparen _rparen_;
    private TypedList _stmt_;
    private TEndif _endif_;

    public ANonelseIfstmt ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ANonelseIfstmt (
            TIf _if_,
            TLparen _lparen_,
            PLogicexpr _logicexpr_,
            TRparen _rparen_,
            IList _stmt_,
            TEndif _endif_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetLogicexpr (_logicexpr_);
        SetRparen (_rparen_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndif (_endif_);
    }

    public override Object Clone()
    {
        return new ANonelseIfstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PLogicexpr)CloneNode (_logicexpr_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_stmt_),
            (TEndif)CloneNode (_endif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonelseIfstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndif GetEndif ()
    {
        return _endif_;
    }

    public void SetEndif (TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_logicexpr_)
            + ToString (_rparen_)
            + ToString (_stmt_)
            + ToString (_endif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endif_ == child )
        {
            _endif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endif_ == oldChild )
        {
            SetEndif ((TEndif) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ANonelseIfstmt obj;

        internal Stmt_Cast (ANonelseIfstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWithelseIfstmt : PIfstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PLogicexpr _logicexpr_;
    private TRparen _rparen_;
    private TypedList _fst_;
    private TElse _else_;
    private TypedList _snd_;
    private TEndif _endif_;

    public AWithelseIfstmt ()
    {
        this._fst_ = new TypedList(new Fst_Cast(this));
        this._snd_ = new TypedList(new Snd_Cast(this));
    }

    public AWithelseIfstmt (
            TIf _if_,
            TLparen _lparen_,
            PLogicexpr _logicexpr_,
            TRparen _rparen_,
            IList _fst_,
            TElse _else_,
            IList _snd_,
            TEndif _endif_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetLogicexpr (_logicexpr_);
        SetRparen (_rparen_);
        this._fst_ = new TypedList(new Fst_Cast(this));
        this._fst_.Clear();
        this._fst_.AddAll(_fst_);
        SetElse (_else_);
        this._snd_ = new TypedList(new Snd_Cast(this));
        this._snd_.Clear();
        this._snd_.AddAll(_snd_);
        SetEndif (_endif_);
    }

    public override Object Clone()
    {
        return new AWithelseIfstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PLogicexpr)CloneNode (_logicexpr_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_fst_),
            (TElse)CloneNode (_else_),
            CloneList (_snd_),
            (TEndif)CloneNode (_endif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWithelseIfstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetFst ()
    {
        return _fst_;
    }

    public void setFst (IList list)
    {
        _fst_.Clear();
        _fst_.AddAll(list);
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public IList GetSnd ()
    {
        return _snd_;
    }

    public void setSnd (IList list)
    {
        _snd_.Clear();
        _snd_.AddAll(list);
    }
    public TEndif GetEndif ()
    {
        return _endif_;
    }

    public void SetEndif (TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_logicexpr_)
            + ToString (_rparen_)
            + ToString (_fst_)
            + ToString (_else_)
            + ToString (_snd_)
            + ToString (_endif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _fst_.Contains(child) )
        {
            _fst_.Remove(child);
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _snd_.Contains(child) )
        {
            _snd_.Remove(child);
            return;
        }
        if ( _endif_ == child )
        {
            _endif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _fst_.Count; i++ )
        {
            Node n = (Node)_fst_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _fst_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _fst_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        for ( int i = 0; i < _snd_.Count; i++ )
        {
            Node n = (Node)_snd_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _snd_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _snd_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endif_ == oldChild )
        {
            SetEndif ((TEndif) newChild);
            return;
        }
    }

    private class Fst_Cast : Cast
    {
        AWithelseIfstmt obj;

        internal Fst_Cast (AWithelseIfstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
    private class Snd_Cast : Cast
    {
        AWithelseIfstmt obj;

        internal Snd_Cast (AWithelseIfstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ANoelseLoopifstmt : PLoopifstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PLogicexpr _logicexpr_;
    private TRparen _rparen_;
    private TypedList _loopifbody_;
    private TEndif _endif_;

    public ANoelseLoopifstmt ()
    {
        this._loopifbody_ = new TypedList(new Loopifbody_Cast(this));
    }

    public ANoelseLoopifstmt (
            TIf _if_,
            TLparen _lparen_,
            PLogicexpr _logicexpr_,
            TRparen _rparen_,
            IList _loopifbody_,
            TEndif _endif_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetLogicexpr (_logicexpr_);
        SetRparen (_rparen_);
        this._loopifbody_ = new TypedList(new Loopifbody_Cast(this));
        this._loopifbody_.Clear();
        this._loopifbody_.AddAll(_loopifbody_);
        SetEndif (_endif_);
    }

    public override Object Clone()
    {
        return new ANoelseLoopifstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PLogicexpr)CloneNode (_logicexpr_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_loopifbody_),
            (TEndif)CloneNode (_endif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoelseLoopifstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetLoopifbody ()
    {
        return _loopifbody_;
    }

    public void setLoopifbody (IList list)
    {
        _loopifbody_.Clear();
        _loopifbody_.AddAll(list);
    }
    public TEndif GetEndif ()
    {
        return _endif_;
    }

    public void SetEndif (TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_logicexpr_)
            + ToString (_rparen_)
            + ToString (_loopifbody_)
            + ToString (_endif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _loopifbody_.Contains(child) )
        {
            _loopifbody_.Remove(child);
            return;
        }
        if ( _endif_ == child )
        {
            _endif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _loopifbody_.Count; i++ )
        {
            Node n = (Node)_loopifbody_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _loopifbody_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _loopifbody_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endif_ == oldChild )
        {
            SetEndif ((TEndif) newChild);
            return;
        }
    }

    private class Loopifbody_Cast : Cast
    {
        ANoelseLoopifstmt obj;

        internal Loopifbody_Cast (ANoelseLoopifstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLoopifbody node = (PLoopifbody) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLoopifbody node = (PLoopifbody) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWithelseLoopifstmt : PLoopifstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PLogicexpr _logicexpr_;
    private TRparen _rparen_;
    private TypedList _true_;
    private TElse _else_;
    private TypedList _false_;
    private TEndif _endif_;

    public AWithelseLoopifstmt ()
    {
        this._true_ = new TypedList(new True_Cast(this));
        this._false_ = new TypedList(new False_Cast(this));
    }

    public AWithelseLoopifstmt (
            TIf _if_,
            TLparen _lparen_,
            PLogicexpr _logicexpr_,
            TRparen _rparen_,
            IList _true_,
            TElse _else_,
            IList _false_,
            TEndif _endif_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetLogicexpr (_logicexpr_);
        SetRparen (_rparen_);
        this._true_ = new TypedList(new True_Cast(this));
        this._true_.Clear();
        this._true_.AddAll(_true_);
        SetElse (_else_);
        this._false_ = new TypedList(new False_Cast(this));
        this._false_.Clear();
        this._false_.AddAll(_false_);
        SetEndif (_endif_);
    }

    public override Object Clone()
    {
        return new AWithelseLoopifstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PLogicexpr)CloneNode (_logicexpr_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_true_),
            (TElse)CloneNode (_else_),
            CloneList (_false_),
            (TEndif)CloneNode (_endif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWithelseLoopifstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetTrue ()
    {
        return _true_;
    }

    public void setTrue (IList list)
    {
        _true_.Clear();
        _true_.AddAll(list);
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public IList GetFalse ()
    {
        return _false_;
    }

    public void setFalse (IList list)
    {
        _false_.Clear();
        _false_.AddAll(list);
    }
    public TEndif GetEndif ()
    {
        return _endif_;
    }

    public void SetEndif (TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_logicexpr_)
            + ToString (_rparen_)
            + ToString (_true_)
            + ToString (_else_)
            + ToString (_false_)
            + ToString (_endif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _true_.Contains(child) )
        {
            _true_.Remove(child);
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _false_.Contains(child) )
        {
            _false_.Remove(child);
            return;
        }
        if ( _endif_ == child )
        {
            _endif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _true_.Count; i++ )
        {
            Node n = (Node)_true_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _true_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _true_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        for ( int i = 0; i < _false_.Count; i++ )
        {
            Node n = (Node)_false_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _false_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _false_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endif_ == oldChild )
        {
            SetEndif ((TEndif) newChild);
            return;
        }
    }

    private class True_Cast : Cast
    {
        AWithelseLoopifstmt obj;

        internal True_Cast (AWithelseLoopifstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLoopifbody node = (PLoopifbody) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLoopifbody node = (PLoopifbody) o;
            node.Parent(null);
            return node;
        }
    }
    private class False_Cast : Cast
    {
        AWithelseLoopifstmt obj;

        internal False_Cast (AWithelseLoopifstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLoopifbody node = (PLoopifbody) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLoopifbody node = (PLoopifbody) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWhilestmt : PWhilestmt
{
    private TRepeatwhile _repeatwhile_;
    private TLparen _lparen_;
    private PLogicexpr _logicexpr_;
    private TRparen _rparen_;
    private TypedList _loop_stmt_;
    private TEndwhile _endwhile_;

    public AWhilestmt ()
    {
        this._loop_stmt_ = new TypedList(new LoopStmt_Cast(this));
    }

    public AWhilestmt (
            TRepeatwhile _repeatwhile_,
            TLparen _lparen_,
            PLogicexpr _logicexpr_,
            TRparen _rparen_,
            IList _loop_stmt_,
            TEndwhile _endwhile_
    )
    {
        SetRepeatwhile (_repeatwhile_);
        SetLparen (_lparen_);
        SetLogicexpr (_logicexpr_);
        SetRparen (_rparen_);
        this._loop_stmt_ = new TypedList(new LoopStmt_Cast(this));
        this._loop_stmt_.Clear();
        this._loop_stmt_.AddAll(_loop_stmt_);
        SetEndwhile (_endwhile_);
    }

    public override Object Clone()
    {
        return new AWhilestmt (
            (TRepeatwhile)CloneNode (_repeatwhile_),
            (TLparen)CloneNode (_lparen_),
            (PLogicexpr)CloneNode (_logicexpr_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_loop_stmt_),
            (TEndwhile)CloneNode (_endwhile_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhilestmt(this);
    }

    public TRepeatwhile GetRepeatwhile ()
    {
        return _repeatwhile_;
    }

    public void SetRepeatwhile (TRepeatwhile node)
    {
        if(_repeatwhile_ != null)
        {
            _repeatwhile_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _repeatwhile_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetLoopStmt ()
    {
        return _loop_stmt_;
    }

    public void setLoopStmt (IList list)
    {
        _loop_stmt_.Clear();
        _loop_stmt_.AddAll(list);
    }
    public TEndwhile GetEndwhile ()
    {
        return _endwhile_;
    }

    public void SetEndwhile (TEndwhile node)
    {
        if(_endwhile_ != null)
        {
            _endwhile_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endwhile_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_repeatwhile_)
            + ToString (_lparen_)
            + ToString (_logicexpr_)
            + ToString (_rparen_)
            + ToString (_loop_stmt_)
            + ToString (_endwhile_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _repeatwhile_ == child )
        {
            _repeatwhile_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _loop_stmt_.Contains(child) )
        {
            _loop_stmt_.Remove(child);
            return;
        }
        if ( _endwhile_ == child )
        {
            _endwhile_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _repeatwhile_ == oldChild )
        {
            SetRepeatwhile ((TRepeatwhile) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _loop_stmt_.Count; i++ )
        {
            Node n = (Node)_loop_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _loop_stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _loop_stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endwhile_ == oldChild )
        {
            SetEndwhile ((TEndwhile) newChild);
            return;
        }
    }

    private class LoopStmt_Cast : Cast
    {
        AWhilestmt obj;

        internal LoopStmt_Cast (AWhilestmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLoopStmt node = (PLoopStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLoopStmt node = (PLoopStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AForstmt : PForstmt
{
    private TRepeatfor _repeatfor_;
    private TLparen _lparen_;
    private PForIterOpt _for_iter_opt_;
    private TTo _to_;
    private PExpr _fst_;
    private TComma _comma_;
    private TChangeby _changeby_;
    private PExpr _snd_;
    private TRparen _rparen_;
    private TypedList _loop_stmt_;
    private TEndfor _endfor_;

    public AForstmt ()
    {
        this._loop_stmt_ = new TypedList(new LoopStmt_Cast(this));
    }

    public AForstmt (
            TRepeatfor _repeatfor_,
            TLparen _lparen_,
            PForIterOpt _for_iter_opt_,
            TTo _to_,
            PExpr _fst_,
            TComma _comma_,
            TChangeby _changeby_,
            PExpr _snd_,
            TRparen _rparen_,
            IList _loop_stmt_,
            TEndfor _endfor_
    )
    {
        SetRepeatfor (_repeatfor_);
        SetLparen (_lparen_);
        SetForIterOpt (_for_iter_opt_);
        SetTo (_to_);
        SetFst (_fst_);
        SetComma (_comma_);
        SetChangeby (_changeby_);
        SetSnd (_snd_);
        SetRparen (_rparen_);
        this._loop_stmt_ = new TypedList(new LoopStmt_Cast(this));
        this._loop_stmt_.Clear();
        this._loop_stmt_.AddAll(_loop_stmt_);
        SetEndfor (_endfor_);
    }

    public override Object Clone()
    {
        return new AForstmt (
            (TRepeatfor)CloneNode (_repeatfor_),
            (TLparen)CloneNode (_lparen_),
            (PForIterOpt)CloneNode (_for_iter_opt_),
            (TTo)CloneNode (_to_),
            (PExpr)CloneNode (_fst_),
            (TComma)CloneNode (_comma_),
            (TChangeby)CloneNode (_changeby_),
            (PExpr)CloneNode (_snd_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_loop_stmt_),
            (TEndfor)CloneNode (_endfor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForstmt(this);
    }

    public TRepeatfor GetRepeatfor ()
    {
        return _repeatfor_;
    }

    public void SetRepeatfor (TRepeatfor node)
    {
        if(_repeatfor_ != null)
        {
            _repeatfor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _repeatfor_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PForIterOpt GetForIterOpt ()
    {
        return _for_iter_opt_;
    }

    public void SetForIterOpt (PForIterOpt node)
    {
        if(_for_iter_opt_ != null)
        {
            _for_iter_opt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _for_iter_opt_ = node;
    }
    public TTo GetTo ()
    {
        return _to_;
    }

    public void SetTo (TTo node)
    {
        if(_to_ != null)
        {
            _to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _to_ = node;
    }
    public PExpr GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PExpr node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TChangeby GetChangeby ()
    {
        return _changeby_;
    }

    public void SetChangeby (TChangeby node)
    {
        if(_changeby_ != null)
        {
            _changeby_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _changeby_ = node;
    }
    public PExpr GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PExpr node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetLoopStmt ()
    {
        return _loop_stmt_;
    }

    public void setLoopStmt (IList list)
    {
        _loop_stmt_.Clear();
        _loop_stmt_.AddAll(list);
    }
    public TEndfor GetEndfor ()
    {
        return _endfor_;
    }

    public void SetEndfor (TEndfor node)
    {
        if(_endfor_ != null)
        {
            _endfor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_repeatfor_)
            + ToString (_lparen_)
            + ToString (_for_iter_opt_)
            + ToString (_to_)
            + ToString (_fst_)
            + ToString (_comma_)
            + ToString (_changeby_)
            + ToString (_snd_)
            + ToString (_rparen_)
            + ToString (_loop_stmt_)
            + ToString (_endfor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _repeatfor_ == child )
        {
            _repeatfor_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _for_iter_opt_ == child )
        {
            _for_iter_opt_ = null;
            return;
        }
        if ( _to_ == child )
        {
            _to_ = null;
            return;
        }
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _changeby_ == child )
        {
            _changeby_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _loop_stmt_.Contains(child) )
        {
            _loop_stmt_.Remove(child);
            return;
        }
        if ( _endfor_ == child )
        {
            _endfor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _repeatfor_ == oldChild )
        {
            SetRepeatfor ((TRepeatfor) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _for_iter_opt_ == oldChild )
        {
            SetForIterOpt ((PForIterOpt) newChild);
            return;
        }
        if ( _to_ == oldChild )
        {
            SetTo ((TTo) newChild);
            return;
        }
        if ( _fst_ == oldChild )
        {
            SetFst ((PExpr) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _changeby_ == oldChild )
        {
            SetChangeby ((TChangeby) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PExpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _loop_stmt_.Count; i++ )
        {
            Node n = (Node)_loop_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _loop_stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _loop_stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endfor_ == oldChild )
        {
            SetEndfor ((TEndfor) newChild);
            return;
        }
    }

    private class LoopStmt_Cast : Cast
    {
        AForstmt obj;

        internal LoopStmt_Cast (AForstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PLoopStmt node = (PLoopStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PLoopStmt node = (PLoopStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneForIterOpt : PForIterOpt
{
    private PNumdcl _numdcl_;

    public AOneForIterOpt ()
    {
    }

    public AOneForIterOpt (
            PNumdcl _numdcl_
    )
    {
        SetNumdcl (_numdcl_);
    }

    public override Object Clone()
    {
        return new AOneForIterOpt (
            (PNumdcl)CloneNode (_numdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneForIterOpt(this);
    }

    public PNumdcl GetNumdcl ()
    {
        return _numdcl_;
    }

    public void SetNumdcl (PNumdcl node)
    {
        if(_numdcl_ != null)
        {
            _numdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numdcl_ == child )
        {
            _numdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numdcl_ == oldChild )
        {
            SetNumdcl ((PNumdcl) newChild);
            return;
        }
    }

}
public sealed class ATwoForIterOpt : PForIterOpt
{
    private PAssstmt _assstmt_;

    public ATwoForIterOpt ()
    {
    }

    public ATwoForIterOpt (
            PAssstmt _assstmt_
    )
    {
        SetAssstmt (_assstmt_);
    }

    public override Object Clone()
    {
        return new ATwoForIterOpt (
            (PAssstmt)CloneNode (_assstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoForIterOpt(this);
    }

    public PAssstmt GetAssstmt ()
    {
        return _assstmt_;
    }

    public void SetAssstmt (PAssstmt node)
    {
        if(_assstmt_ != null)
        {
            _assstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assstmt_ == child )
        {
            _assstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assstmt_ == oldChild )
        {
            SetAssstmt ((PAssstmt) newChild);
            return;
        }
    }

}
public sealed class AThreeForIterOpt : PForIterOpt
{
    private TId _id_;
    private PArrindex _arrindex_;

    public AThreeForIterOpt ()
    {
    }

    public AThreeForIterOpt (
            TId _id_,
            PArrindex _arrindex_
    )
    {
        SetId (_id_);
        SetArrindex (_arrindex_);
    }

    public override Object Clone()
    {
        return new AThreeForIterOpt (
            (TId)CloneNode (_id_),
            (PArrindex)CloneNode (_arrindex_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeForIterOpt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PArrindex GetArrindex ()
    {
        return _arrindex_;
    }

    public void SetArrindex (PArrindex node)
    {
        if(_arrindex_ != null)
        {
            _arrindex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrindex_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_arrindex_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrindex_ == child )
        {
            _arrindex_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrindex_ == oldChild )
        {
            SetArrindex ((PArrindex) newChild);
            return;
        }
    }

}
public sealed class AAssstmt : PAssstmt
{
    private TId _id_;
    private PArrindex _arrindex_;
    private TAssign _assign_;
    private PLogicexpr _logicexpr_;

    public AAssstmt ()
    {
    }

    public AAssstmt (
            TId _id_,
            PArrindex _arrindex_,
            TAssign _assign_,
            PLogicexpr _logicexpr_
    )
    {
        SetId (_id_);
        SetArrindex (_arrindex_);
        SetAssign (_assign_);
        SetLogicexpr (_logicexpr_);
    }

    public override Object Clone()
    {
        return new AAssstmt (
            (TId)CloneNode (_id_),
            (PArrindex)CloneNode (_arrindex_),
            (TAssign)CloneNode (_assign_),
            (PLogicexpr)CloneNode (_logicexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssstmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PArrindex GetArrindex ()
    {
        return _arrindex_;
    }

    public void SetArrindex (PArrindex node)
    {
        if(_arrindex_ != null)
        {
            _arrindex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrindex_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_arrindex_)
            + ToString (_assign_)
            + ToString (_logicexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrindex_ == child )
        {
            _arrindex_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrindex_ == oldChild )
        {
            SetArrindex ((PArrindex) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
    }

}
public sealed class AFunccall : PFunccall
{
    private TId _id_;
    private TLparen _lparen_;
    private PParamsOptions _params_options_;
    private TRparen _rparen_;

    public AFunccall ()
    {
    }

    public AFunccall (
            TId _id_,
            TLparen _lparen_,
            PParamsOptions _params_options_,
            TRparen _rparen_
    )
    {
        SetId (_id_);
        SetLparen (_lparen_);
        SetParamsOptions (_params_options_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AFunccall (
            (TId)CloneNode (_id_),
            (TLparen)CloneNode (_lparen_),
            (PParamsOptions)CloneNode (_params_options_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunccall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PParamsOptions GetParamsOptions ()
    {
        return _params_options_;
    }

    public void SetParamsOptions (PParamsOptions node)
    {
        if(_params_options_ != null)
        {
            _params_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_options_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_lparen_)
            + ToString (_params_options_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _params_options_ == child )
        {
            _params_options_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _params_options_ == oldChild )
        {
            SetParamsOptions ((PParamsOptions) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AParamsOptions : PParamsOptions
{
    private PLogicexpr _logicexpr_;
    private TypedList _multi_expr_;

    public AParamsOptions ()
    {
        this._multi_expr_ = new TypedList(new MultiExpr_Cast(this));
    }

    public AParamsOptions (
            PLogicexpr _logicexpr_,
            IList _multi_expr_
    )
    {
        SetLogicexpr (_logicexpr_);
        this._multi_expr_ = new TypedList(new MultiExpr_Cast(this));
        this._multi_expr_.Clear();
        this._multi_expr_.AddAll(_multi_expr_);
    }

    public override Object Clone()
    {
        return new AParamsOptions (
            (PLogicexpr)CloneNode (_logicexpr_),
            CloneList (_multi_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsOptions(this);
    }

    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public IList GetMultiExpr ()
    {
        return _multi_expr_;
    }

    public void setMultiExpr (IList list)
    {
        _multi_expr_.Clear();
        _multi_expr_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicexpr_)
            + ToString (_multi_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _multi_expr_.Contains(child) )
        {
            _multi_expr_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        for ( int i = 0; i < _multi_expr_.Count; i++ )
        {
            Node n = (Node)_multi_expr_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _multi_expr_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _multi_expr_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class MultiExpr_Cast : Cast
    {
        AParamsOptions obj;

        internal MultiExpr_Cast (AParamsOptions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PMultiExpr node = (PMultiExpr) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PMultiExpr node = (PMultiExpr) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AMultiExpr : PMultiExpr
{
    private TComma _comma_;
    private PLogicexpr _logicexpr_;

    public AMultiExpr ()
    {
    }

    public AMultiExpr (
            TComma _comma_,
            PLogicexpr _logicexpr_
    )
    {
        SetComma (_comma_);
        SetLogicexpr (_logicexpr_);
    }

    public override Object Clone()
    {
        return new AMultiExpr (
            (TComma)CloneNode (_comma_),
            (PLogicexpr)CloneNode (_logicexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiExpr(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_logicexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
    }

}
public sealed class AOneRetstmt : PRetstmt
{
    private TReturn _return_;
    private PLogicexpr _logicexpr_;

    public AOneRetstmt ()
    {
    }

    public AOneRetstmt (
            TReturn _return_,
            PLogicexpr _logicexpr_
    )
    {
        SetReturn (_return_);
        SetLogicexpr (_logicexpr_);
    }

    public override Object Clone()
    {
        return new AOneRetstmt (
            (TReturn)CloneNode (_return_),
            (PLogicexpr)CloneNode (_logicexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneRetstmt(this);
    }

    public TReturn GetReturn ()
    {
        return _return_;
    }

    public void SetReturn (TReturn node)
    {
        if(_return_ != null)
        {
            _return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_return_)
            + ToString (_logicexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _return_ == child )
        {
            _return_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _return_ == oldChild )
        {
            SetReturn ((TReturn) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
    }

}
public sealed class ATwoRetstmt : PRetstmt
{
    private TReturn _return_;

    public ATwoRetstmt ()
    {
    }

    public ATwoRetstmt (
            TReturn _return_
    )
    {
        SetReturn (_return_);
    }

    public override Object Clone()
    {
        return new ATwoRetstmt (
            (TReturn)CloneNode (_return_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoRetstmt(this);
    }

    public TReturn GetReturn ()
    {
        return _return_;
    }

    public void SetReturn (TReturn node)
    {
        if(_return_ != null)
        {
            _return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_return_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _return_ == child )
        {
            _return_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _return_ == oldChild )
        {
            SetReturn ((TReturn) newChild);
            return;
        }
    }

}
public sealed class AArrindex : PArrindex
{
    private TLbrack _lbrack_;
    private PExpr _expr_;
    private TRbrack _rbrack_;

    public AArrindex ()
    {
    }

    public AArrindex (
            TLbrack _lbrack_,
            PExpr _expr_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetExpr (_expr_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new AArrindex (
            (TLbrack)CloneNode (_lbrack_),
            (PExpr)CloneNode (_expr_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrindex(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_expr_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}
public sealed class AOneExpr : PExpr
{
    private PExpr _expr_;
    private TPlus _plus_;
    private PTerm _term_;

    public AOneExpr ()
    {
    }

    public AOneExpr (
            PExpr _expr_,
            TPlus _plus_,
            PTerm _term_
    )
    {
        SetExpr (_expr_);
        SetPlus (_plus_);
        SetTerm (_term_);
    }

    public override Object Clone()
    {
        return new AOneExpr (
            (PExpr)CloneNode (_expr_),
            (TPlus)CloneNode (_plus_),
            (PTerm)CloneNode (_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_plus_)
            + ToString (_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
    }

}
public sealed class ATwoExpr : PExpr
{
    private PExpr _expr_;
    private TMinus _minus_;
    private PTerm _term_;

    public ATwoExpr ()
    {
    }

    public ATwoExpr (
            PExpr _expr_,
            TMinus _minus_,
            PTerm _term_
    )
    {
        SetExpr (_expr_);
        SetMinus (_minus_);
        SetTerm (_term_);
    }

    public override Object Clone()
    {
        return new ATwoExpr (
            (PExpr)CloneNode (_expr_),
            (TMinus)CloneNode (_minus_),
            (PTerm)CloneNode (_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_minus_)
            + ToString (_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
    }

}
public sealed class AThreeExpr : PExpr
{
    private PTerm _term_;

    public AThreeExpr ()
    {
    }

    public AThreeExpr (
            PTerm _term_
    )
    {
        SetTerm (_term_);
    }

    public override Object Clone()
    {
        return new AThreeExpr (
            (PTerm)CloneNode (_term_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeExpr(this);
    }

    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_term_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
    }

}
public sealed class AOneTerm : PTerm
{
    private PTerm _term_;
    private TMult _mult_;
    private PFactor _factor_;

    public AOneTerm ()
    {
    }

    public AOneTerm (
            PTerm _term_,
            TMult _mult_,
            PFactor _factor_
    )
    {
        SetTerm (_term_);
        SetMult (_mult_);
        SetFactor (_factor_);
    }

    public override Object Clone()
    {
        return new AOneTerm (
            (PTerm)CloneNode (_term_),
            (TMult)CloneNode (_mult_),
            (PFactor)CloneNode (_factor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneTerm(this);
    }

    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PFactor GetFactor ()
    {
        return _factor_;
    }

    public void SetFactor (PFactor node)
    {
        if(_factor_ != null)
        {
            _factor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _factor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_term_)
            + ToString (_mult_)
            + ToString (_factor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _factor_ == child )
        {
            _factor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _factor_ == oldChild )
        {
            SetFactor ((PFactor) newChild);
            return;
        }
    }

}
public sealed class ATwoTerm : PTerm
{
    private PTerm _term_;
    private TDivide _divide_;
    private PFactor _factor_;

    public ATwoTerm ()
    {
    }

    public ATwoTerm (
            PTerm _term_,
            TDivide _divide_,
            PFactor _factor_
    )
    {
        SetTerm (_term_);
        SetDivide (_divide_);
        SetFactor (_factor_);
    }

    public override Object Clone()
    {
        return new ATwoTerm (
            (PTerm)CloneNode (_term_),
            (TDivide)CloneNode (_divide_),
            (PFactor)CloneNode (_factor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoTerm(this);
    }

    public PTerm GetTerm ()
    {
        return _term_;
    }

    public void SetTerm (PTerm node)
    {
        if(_term_ != null)
        {
            _term_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _term_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PFactor GetFactor ()
    {
        return _factor_;
    }

    public void SetFactor (PFactor node)
    {
        if(_factor_ != null)
        {
            _factor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _factor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_term_)
            + ToString (_divide_)
            + ToString (_factor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _term_ == child )
        {
            _term_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _factor_ == child )
        {
            _factor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _term_ == oldChild )
        {
            SetTerm ((PTerm) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _factor_ == oldChild )
        {
            SetFactor ((PFactor) newChild);
            return;
        }
    }

}
public sealed class AThreeTerm : PTerm
{
    private PFactor _factor_;

    public AThreeTerm ()
    {
    }

    public AThreeTerm (
            PFactor _factor_
    )
    {
        SetFactor (_factor_);
    }

    public override Object Clone()
    {
        return new AThreeTerm (
            (PFactor)CloneNode (_factor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeTerm(this);
    }

    public PFactor GetFactor ()
    {
        return _factor_;
    }

    public void SetFactor (PFactor node)
    {
        if(_factor_ != null)
        {
            _factor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _factor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_factor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _factor_ == child )
        {
            _factor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _factor_ == oldChild )
        {
            SetFactor ((PFactor) newChild);
            return;
        }
    }

}
public sealed class AOneFactor : PFactor
{
    private PFactor _factor_;
    private TPow _pow_;
    private PValue _value_;

    public AOneFactor ()
    {
    }

    public AOneFactor (
            PFactor _factor_,
            TPow _pow_,
            PValue _value_
    )
    {
        SetFactor (_factor_);
        SetPow (_pow_);
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AOneFactor (
            (PFactor)CloneNode (_factor_),
            (TPow)CloneNode (_pow_),
            (PValue)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneFactor(this);
    }

    public PFactor GetFactor ()
    {
        return _factor_;
    }

    public void SetFactor (PFactor node)
    {
        if(_factor_ != null)
        {
            _factor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _factor_ = node;
    }
    public TPow GetPow ()
    {
        return _pow_;
    }

    public void SetPow (TPow node)
    {
        if(_pow_ != null)
        {
            _pow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _pow_ = node;
    }
    public PValue GetValue ()
    {
        return _value_;
    }

    public void SetValue (PValue node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_factor_)
            + ToString (_pow_)
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _factor_ == child )
        {
            _factor_ = null;
            return;
        }
        if ( _pow_ == child )
        {
            _pow_ = null;
            return;
        }
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _factor_ == oldChild )
        {
            SetFactor ((PFactor) newChild);
            return;
        }
        if ( _pow_ == oldChild )
        {
            SetPow ((TPow) newChild);
            return;
        }
        if ( _value_ == oldChild )
        {
            SetValue ((PValue) newChild);
            return;
        }
    }

}
public sealed class ATwoFactor : PFactor
{
    private PValue _value_;

    public ATwoFactor ()
    {
    }

    public ATwoFactor (
            PValue _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new ATwoFactor (
            (PValue)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoFactor(this);
    }

    public PValue GetValue ()
    {
        return _value_;
    }

    public void SetValue (PValue node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((PValue) newChild);
            return;
        }
    }

}
public sealed class AOneValue : PValue
{
    private PConstant _constant_;

    public AOneValue ()
    {
    }

    public AOneValue (
            PConstant _constant_
    )
    {
        SetConstant (_constant_);
    }

    public override Object Clone()
    {
        return new AOneValue (
            (PConstant)CloneNode (_constant_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneValue(this);
    }

    public PConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (PConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((PConstant) newChild);
            return;
        }
    }

}
public sealed class ATwoValue : PValue
{
    private TId _id_;
    private PArrindex _arrindex_;

    public ATwoValue ()
    {
    }

    public ATwoValue (
            TId _id_,
            PArrindex _arrindex_
    )
    {
        SetId (_id_);
        SetArrindex (_arrindex_);
    }

    public override Object Clone()
    {
        return new ATwoValue (
            (TId)CloneNode (_id_),
            (PArrindex)CloneNode (_arrindex_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoValue(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PArrindex GetArrindex ()
    {
        return _arrindex_;
    }

    public void SetArrindex (PArrindex node)
    {
        if(_arrindex_ != null)
        {
            _arrindex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrindex_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_arrindex_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrindex_ == child )
        {
            _arrindex_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrindex_ == oldChild )
        {
            SetArrindex ((PArrindex) newChild);
            return;
        }
    }

}
public sealed class AThreeValue : PValue
{
    private TLparen _lparen_;
    private PLogicexpr _logicexpr_;
    private TRparen _rparen_;

    public AThreeValue ()
    {
    }

    public AThreeValue (
            TLparen _lparen_,
            PLogicexpr _logicexpr_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetLogicexpr (_logicexpr_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AThreeValue (
            (TLparen)CloneNode (_lparen_),
            (PLogicexpr)CloneNode (_logicexpr_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeValue(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_logicexpr_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AFourValue : PValue
{
    private PFunccall _funccall_;

    public AFourValue ()
    {
    }

    public AFourValue (
            PFunccall _funccall_
    )
    {
        SetFunccall (_funccall_);
    }

    public override Object Clone()
    {
        return new AFourValue (
            (PFunccall)CloneNode (_funccall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourValue(this);
    }

    public PFunccall GetFunccall ()
    {
        return _funccall_;
    }

    public void SetFunccall (PFunccall node)
    {
        if(_funccall_ != null)
        {
            _funccall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funccall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funccall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funccall_ == child )
        {
            _funccall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funccall_ == oldChild )
        {
            SetFunccall ((PFunccall) newChild);
            return;
        }
    }

}
public sealed class AOneConstant : PConstant
{
    private TMinus _minus_;
    private TNumliteral _numliteral_;

    public AOneConstant ()
    {
    }

    public AOneConstant (
            TMinus _minus_,
            TNumliteral _numliteral_
    )
    {
        SetMinus (_minus_);
        SetNumliteral (_numliteral_);
    }

    public override Object Clone()
    {
        return new AOneConstant (
            (TMinus)CloneNode (_minus_),
            (TNumliteral)CloneNode (_numliteral_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneConstant(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TNumliteral GetNumliteral ()
    {
        return _numliteral_;
    }

    public void SetNumliteral (TNumliteral node)
    {
        if(_numliteral_ != null)
        {
            _numliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numliteral_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_numliteral_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _numliteral_ == child )
        {
            _numliteral_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _numliteral_ == oldChild )
        {
            SetNumliteral ((TNumliteral) newChild);
            return;
        }
    }

}
public sealed class ATwoConstant : PConstant
{
    private TStrliteral _strliteral_;

    public ATwoConstant ()
    {
    }

    public ATwoConstant (
            TStrliteral _strliteral_
    )
    {
        SetStrliteral (_strliteral_);
    }

    public override Object Clone()
    {
        return new ATwoConstant (
            (TStrliteral)CloneNode (_strliteral_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoConstant(this);
    }

    public TStrliteral GetStrliteral ()
    {
        return _strliteral_;
    }

    public void SetStrliteral (TStrliteral node)
    {
        if(_strliteral_ != null)
        {
            _strliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _strliteral_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_strliteral_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _strliteral_ == child )
        {
            _strliteral_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _strliteral_ == oldChild )
        {
            SetStrliteral ((TStrliteral) newChild);
            return;
        }
    }

}
public sealed class AThreeConstant : PConstant
{
    private TBoolliteral _boolliteral_;

    public AThreeConstant ()
    {
    }

    public AThreeConstant (
            TBoolliteral _boolliteral_
    )
    {
        SetBoolliteral (_boolliteral_);
    }

    public override Object Clone()
    {
        return new AThreeConstant (
            (TBoolliteral)CloneNode (_boolliteral_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeConstant(this);
    }

    public TBoolliteral GetBoolliteral ()
    {
        return _boolliteral_;
    }

    public void SetBoolliteral (TBoolliteral node)
    {
        if(_boolliteral_ != null)
        {
            _boolliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolliteral_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolliteral_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolliteral_ == child )
        {
            _boolliteral_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolliteral_ == oldChild )
        {
            SetBoolliteral ((TBoolliteral) newChild);
            return;
        }
    }

}
public sealed class AOneLogicexpr : PLogicexpr
{
    private PLogicexpr _logicexpr_;
    private TAnd _and_;
    private PLogicequal _logicequal_;

    public AOneLogicexpr ()
    {
    }

    public AOneLogicexpr (
            PLogicexpr _logicexpr_,
            TAnd _and_,
            PLogicequal _logicequal_
    )
    {
        SetLogicexpr (_logicexpr_);
        SetAnd (_and_);
        SetLogicequal (_logicequal_);
    }

    public override Object Clone()
    {
        return new AOneLogicexpr (
            (PLogicexpr)CloneNode (_logicexpr_),
            (TAnd)CloneNode (_and_),
            (PLogicequal)CloneNode (_logicequal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneLogicexpr(this);
    }

    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PLogicequal GetLogicequal ()
    {
        return _logicequal_;
    }

    public void SetLogicequal (PLogicequal node)
    {
        if(_logicequal_ != null)
        {
            _logicequal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicequal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicexpr_)
            + ToString (_and_)
            + ToString (_logicequal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _logicequal_ == child )
        {
            _logicequal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _logicequal_ == oldChild )
        {
            SetLogicequal ((PLogicequal) newChild);
            return;
        }
    }

}
public sealed class ATwoLogicexpr : PLogicexpr
{
    private PLogicexpr _logicexpr_;
    private TOr _or_;
    private PLogicequal _logicequal_;

    public ATwoLogicexpr ()
    {
    }

    public ATwoLogicexpr (
            PLogicexpr _logicexpr_,
            TOr _or_,
            PLogicequal _logicequal_
    )
    {
        SetLogicexpr (_logicexpr_);
        SetOr (_or_);
        SetLogicequal (_logicequal_);
    }

    public override Object Clone()
    {
        return new ATwoLogicexpr (
            (PLogicexpr)CloneNode (_logicexpr_),
            (TOr)CloneNode (_or_),
            (PLogicequal)CloneNode (_logicequal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoLogicexpr(this);
    }

    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PLogicequal GetLogicequal ()
    {
        return _logicequal_;
    }

    public void SetLogicequal (PLogicequal node)
    {
        if(_logicequal_ != null)
        {
            _logicequal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicequal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicexpr_)
            + ToString (_or_)
            + ToString (_logicequal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _logicequal_ == child )
        {
            _logicequal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _logicequal_ == oldChild )
        {
            SetLogicequal ((PLogicequal) newChild);
            return;
        }
    }

}
public sealed class AThreeLogicexpr : PLogicexpr
{
    private PLogicequal _logicequal_;

    public AThreeLogicexpr ()
    {
    }

    public AThreeLogicexpr (
            PLogicequal _logicequal_
    )
    {
        SetLogicequal (_logicequal_);
    }

    public override Object Clone()
    {
        return new AThreeLogicexpr (
            (PLogicequal)CloneNode (_logicequal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeLogicexpr(this);
    }

    public PLogicequal GetLogicequal ()
    {
        return _logicequal_;
    }

    public void SetLogicequal (PLogicequal node)
    {
        if(_logicequal_ != null)
        {
            _logicequal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicequal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicequal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicequal_ == child )
        {
            _logicequal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicequal_ == oldChild )
        {
            SetLogicequal ((PLogicequal) newChild);
            return;
        }
    }

}
public sealed class AOneLogicequal : PLogicequal
{
    private PLogiccomp _fst_;
    private TEq _eq_;
    private PLogiccomp _snd_;

    public AOneLogicequal ()
    {
    }

    public AOneLogicequal (
            PLogiccomp _fst_,
            TEq _eq_,
            PLogiccomp _snd_
    )
    {
        SetFst (_fst_);
        SetEq (_eq_);
        SetSnd (_snd_);
    }

    public override Object Clone()
    {
        return new AOneLogicequal (
            (PLogiccomp)CloneNode (_fst_),
            (TEq)CloneNode (_eq_),
            (PLogiccomp)CloneNode (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneLogicequal(this);
    }

    public PLogiccomp GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PLogiccomp node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public TEq GetEq ()
    {
        return _eq_;
    }

    public void SetEq (TEq node)
    {
        if(_eq_ != null)
        {
            _eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eq_ = node;
    }
    public PLogiccomp GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PLogiccomp node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fst_)
            + ToString (_eq_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _eq_ == child )
        {
            _eq_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fst_ == oldChild )
        {
            SetFst ((PLogiccomp) newChild);
            return;
        }
        if ( _eq_ == oldChild )
        {
            SetEq ((TEq) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PLogiccomp) newChild);
            return;
        }
    }

}
public sealed class ATwoLogicequal : PLogicequal
{
    private PLogiccomp _fst_;
    private TNeq _neq_;
    private PLogiccomp _snd_;

    public ATwoLogicequal ()
    {
    }

    public ATwoLogicequal (
            PLogiccomp _fst_,
            TNeq _neq_,
            PLogiccomp _snd_
    )
    {
        SetFst (_fst_);
        SetNeq (_neq_);
        SetSnd (_snd_);
    }

    public override Object Clone()
    {
        return new ATwoLogicequal (
            (PLogiccomp)CloneNode (_fst_),
            (TNeq)CloneNode (_neq_),
            (PLogiccomp)CloneNode (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoLogicequal(this);
    }

    public PLogiccomp GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PLogiccomp node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public TNeq GetNeq ()
    {
        return _neq_;
    }

    public void SetNeq (TNeq node)
    {
        if(_neq_ != null)
        {
            _neq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _neq_ = node;
    }
    public PLogiccomp GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PLogiccomp node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fst_)
            + ToString (_neq_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _neq_ == child )
        {
            _neq_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fst_ == oldChild )
        {
            SetFst ((PLogiccomp) newChild);
            return;
        }
        if ( _neq_ == oldChild )
        {
            SetNeq ((TNeq) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PLogiccomp) newChild);
            return;
        }
    }

}
public sealed class AThreeLogicequal : PLogicequal
{
    private PLogiccomp _logiccomp_;

    public AThreeLogicequal ()
    {
    }

    public AThreeLogicequal (
            PLogiccomp _logiccomp_
    )
    {
        SetLogiccomp (_logiccomp_);
    }

    public override Object Clone()
    {
        return new AThreeLogicequal (
            (PLogiccomp)CloneNode (_logiccomp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeLogicequal(this);
    }

    public PLogiccomp GetLogiccomp ()
    {
        return _logiccomp_;
    }

    public void SetLogiccomp (PLogiccomp node)
    {
        if(_logiccomp_ != null)
        {
            _logiccomp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logiccomp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logiccomp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logiccomp_ == child )
        {
            _logiccomp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logiccomp_ == oldChild )
        {
            SetLogiccomp ((PLogiccomp) newChild);
            return;
        }
    }

}
public sealed class AOneLogiccomp : PLogiccomp
{
    private PLogicvalue _fst_;
    private PLogiccompop _logiccompop_;
    private PLogicvalue _snd_;

    public AOneLogiccomp ()
    {
    }

    public AOneLogiccomp (
            PLogicvalue _fst_,
            PLogiccompop _logiccompop_,
            PLogicvalue _snd_
    )
    {
        SetFst (_fst_);
        SetLogiccompop (_logiccompop_);
        SetSnd (_snd_);
    }

    public override Object Clone()
    {
        return new AOneLogiccomp (
            (PLogicvalue)CloneNode (_fst_),
            (PLogiccompop)CloneNode (_logiccompop_),
            (PLogicvalue)CloneNode (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneLogiccomp(this);
    }

    public PLogicvalue GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PLogicvalue node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public PLogiccompop GetLogiccompop ()
    {
        return _logiccompop_;
    }

    public void SetLogiccompop (PLogiccompop node)
    {
        if(_logiccompop_ != null)
        {
            _logiccompop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logiccompop_ = node;
    }
    public PLogicvalue GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PLogicvalue node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fst_)
            + ToString (_logiccompop_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _logiccompop_ == child )
        {
            _logiccompop_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fst_ == oldChild )
        {
            SetFst ((PLogicvalue) newChild);
            return;
        }
        if ( _logiccompop_ == oldChild )
        {
            SetLogiccompop ((PLogiccompop) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PLogicvalue) newChild);
            return;
        }
    }

}
public sealed class ATwoLogiccomp : PLogiccomp
{
    private PLogicvalue _logicvalue_;

    public ATwoLogiccomp ()
    {
    }

    public ATwoLogiccomp (
            PLogicvalue _logicvalue_
    )
    {
        SetLogicvalue (_logicvalue_);
    }

    public override Object Clone()
    {
        return new ATwoLogiccomp (
            (PLogicvalue)CloneNode (_logicvalue_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoLogiccomp(this);
    }

    public PLogicvalue GetLogicvalue ()
    {
        return _logicvalue_;
    }

    public void SetLogicvalue (PLogicvalue node)
    {
        if(_logicvalue_ != null)
        {
            _logicvalue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicvalue_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicvalue_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicvalue_ == child )
        {
            _logicvalue_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicvalue_ == oldChild )
        {
            SetLogicvalue ((PLogicvalue) newChild);
            return;
        }
    }

}
public sealed class AOneLogiccompop : PLogiccompop
{
    private TGrthaneq _grthaneq_;

    public AOneLogiccompop ()
    {
    }

    public AOneLogiccompop (
            TGrthaneq _grthaneq_
    )
    {
        SetGrthaneq (_grthaneq_);
    }

    public override Object Clone()
    {
        return new AOneLogiccompop (
            (TGrthaneq)CloneNode (_grthaneq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneLogiccompop(this);
    }

    public TGrthaneq GetGrthaneq ()
    {
        return _grthaneq_;
    }

    public void SetGrthaneq (TGrthaneq node)
    {
        if(_grthaneq_ != null)
        {
            _grthaneq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grthaneq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_grthaneq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _grthaneq_ == child )
        {
            _grthaneq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _grthaneq_ == oldChild )
        {
            SetGrthaneq ((TGrthaneq) newChild);
            return;
        }
    }

}
public sealed class ATwoLogiccompop : PLogiccompop
{
    private TGrthan _grthan_;

    public ATwoLogiccompop ()
    {
    }

    public ATwoLogiccompop (
            TGrthan _grthan_
    )
    {
        SetGrthan (_grthan_);
    }

    public override Object Clone()
    {
        return new ATwoLogiccompop (
            (TGrthan)CloneNode (_grthan_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoLogiccompop(this);
    }

    public TGrthan GetGrthan ()
    {
        return _grthan_;
    }

    public void SetGrthan (TGrthan node)
    {
        if(_grthan_ != null)
        {
            _grthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grthan_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_grthan_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _grthan_ == child )
        {
            _grthan_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _grthan_ == oldChild )
        {
            SetGrthan ((TGrthan) newChild);
            return;
        }
    }

}
public sealed class AThreeLogiccompop : PLogiccompop
{
    private TLthaneq _lthaneq_;

    public AThreeLogiccompop ()
    {
    }

    public AThreeLogiccompop (
            TLthaneq _lthaneq_
    )
    {
        SetLthaneq (_lthaneq_);
    }

    public override Object Clone()
    {
        return new AThreeLogiccompop (
            (TLthaneq)CloneNode (_lthaneq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeLogiccompop(this);
    }

    public TLthaneq GetLthaneq ()
    {
        return _lthaneq_;
    }

    public void SetLthaneq (TLthaneq node)
    {
        if(_lthaneq_ != null)
        {
            _lthaneq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lthaneq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lthaneq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lthaneq_ == child )
        {
            _lthaneq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lthaneq_ == oldChild )
        {
            SetLthaneq ((TLthaneq) newChild);
            return;
        }
    }

}
public sealed class AFourLogiccompop : PLogiccompop
{
    private TLthan _lthan_;

    public AFourLogiccompop ()
    {
    }

    public AFourLogiccompop (
            TLthan _lthan_
    )
    {
        SetLthan (_lthan_);
    }

    public override Object Clone()
    {
        return new AFourLogiccompop (
            (TLthan)CloneNode (_lthan_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourLogiccompop(this);
    }

    public TLthan GetLthan ()
    {
        return _lthan_;
    }

    public void SetLthan (TLthan node)
    {
        if(_lthan_ != null)
        {
            _lthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lthan_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lthan_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lthan_ == child )
        {
            _lthan_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lthan_ == oldChild )
        {
            SetLthan ((TLthan) newChild);
            return;
        }
    }

}
public sealed class ALogicvalue : PLogicvalue
{
    private TNeg _neg_;
    private PExpr _expr_;

    public ALogicvalue ()
    {
    }

    public ALogicvalue (
            TNeg _neg_,
            PExpr _expr_
    )
    {
        SetNeg (_neg_);
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new ALogicvalue (
            (TNeg)CloneNode (_neg_),
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicvalue(this);
    }

    public TNeg GetNeg ()
    {
        return _neg_;
    }

    public void SetNeg (TNeg node)
    {
        if(_neg_ != null)
        {
            _neg_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _neg_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_neg_)
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _neg_ == child )
        {
            _neg_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _neg_ == oldChild )
        {
            SetNeg ((TNeg) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AVardcl : PVardcl
{
    private TConstant _constant_;
    private PVarOptions _var_options_;

    public AVardcl ()
    {
    }

    public AVardcl (
            TConstant _constant_,
            PVarOptions _var_options_
    )
    {
        SetConstant (_constant_);
        SetVarOptions (_var_options_);
    }

    public override Object Clone()
    {
        return new AVardcl (
            (TConstant)CloneNode (_constant_),
            (PVarOptions)CloneNode (_var_options_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVardcl(this);
    }

    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public PVarOptions GetVarOptions ()
    {
        return _var_options_;
    }

    public void SetVarOptions (PVarOptions node)
    {
        if(_var_options_ != null)
        {
            _var_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_options_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_var_options_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _var_options_ == child )
        {
            _var_options_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _var_options_ == oldChild )
        {
            SetVarOptions ((PVarOptions) newChild);
            return;
        }
    }

}
public sealed class AOneVarOptions : PVarOptions
{
    private PNumdcl _numdcl_;

    public AOneVarOptions ()
    {
    }

    public AOneVarOptions (
            PNumdcl _numdcl_
    )
    {
        SetNumdcl (_numdcl_);
    }

    public override Object Clone()
    {
        return new AOneVarOptions (
            (PNumdcl)CloneNode (_numdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneVarOptions(this);
    }

    public PNumdcl GetNumdcl ()
    {
        return _numdcl_;
    }

    public void SetNumdcl (PNumdcl node)
    {
        if(_numdcl_ != null)
        {
            _numdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numdcl_ == child )
        {
            _numdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numdcl_ == oldChild )
        {
            SetNumdcl ((PNumdcl) newChild);
            return;
        }
    }

}
public sealed class ATwoVarOptions : PVarOptions
{
    private PStringdcl _stringdcl_;

    public ATwoVarOptions ()
    {
    }

    public ATwoVarOptions (
            PStringdcl _stringdcl_
    )
    {
        SetStringdcl (_stringdcl_);
    }

    public override Object Clone()
    {
        return new ATwoVarOptions (
            (PStringdcl)CloneNode (_stringdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoVarOptions(this);
    }

    public PStringdcl GetStringdcl ()
    {
        return _stringdcl_;
    }

    public void SetStringdcl (PStringdcl node)
    {
        if(_stringdcl_ != null)
        {
            _stringdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stringdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stringdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stringdcl_ == child )
        {
            _stringdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stringdcl_ == oldChild )
        {
            SetStringdcl ((PStringdcl) newChild);
            return;
        }
    }

}
public sealed class AThreeVarOptions : PVarOptions
{
    private PBooldcl _booldcl_;

    public AThreeVarOptions ()
    {
    }

    public AThreeVarOptions (
            PBooldcl _booldcl_
    )
    {
        SetBooldcl (_booldcl_);
    }

    public override Object Clone()
    {
        return new AThreeVarOptions (
            (PBooldcl)CloneNode (_booldcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeVarOptions(this);
    }

    public PBooldcl GetBooldcl ()
    {
        return _booldcl_;
    }

    public void SetBooldcl (PBooldcl node)
    {
        if(_booldcl_ != null)
        {
            _booldcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _booldcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_booldcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _booldcl_ == child )
        {
            _booldcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _booldcl_ == oldChild )
        {
            SetBooldcl ((PBooldcl) newChild);
            return;
        }
    }

}
public sealed class AFourVarOptions : PVarOptions
{
    private PArrdcl _arrdcl_;

    public AFourVarOptions ()
    {
    }

    public AFourVarOptions (
            PArrdcl _arrdcl_
    )
    {
        SetArrdcl (_arrdcl_);
    }

    public override Object Clone()
    {
        return new AFourVarOptions (
            (PArrdcl)CloneNode (_arrdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourVarOptions(this);
    }

    public PArrdcl GetArrdcl ()
    {
        return _arrdcl_;
    }

    public void SetArrdcl (PArrdcl node)
    {
        if(_arrdcl_ != null)
        {
            _arrdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arrdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arrdcl_ == child )
        {
            _arrdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arrdcl_ == oldChild )
        {
            SetArrdcl ((PArrdcl) newChild);
            return;
        }
    }

}
public sealed class ANumdcl : PNumdcl
{
    private TNumber _number_;
    private TId _id_;
    private TAssign _assign_;
    private PExpr _expr_;

    public ANumdcl ()
    {
    }

    public ANumdcl (
            TNumber _number_,
            TId _id_,
            TAssign _assign_,
            PExpr _expr_
    )
    {
        SetNumber (_number_);
        SetId (_id_);
        SetAssign (_assign_);
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new ANumdcl (
            (TNumber)CloneNode (_number_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumdcl(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AStringdcl : PStringdcl
{
    private TString _string_;
    private TId _id_;
    private TAssign _assign_;
    private PExpr _expr_;

    public AStringdcl ()
    {
    }

    public AStringdcl (
            TString _string_,
            TId _id_,
            TAssign _assign_,
            PExpr _expr_
    )
    {
        SetString (_string_);
        SetId (_id_);
        SetAssign (_assign_);
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AStringdcl (
            (TString)CloneNode (_string_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringdcl(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class ABooldcl : PBooldcl
{
    private TBoolean _boolean_;
    private TId _id_;
    private TAssign _assign_;
    private PLogicexpr _logicexpr_;

    public ABooldcl ()
    {
    }

    public ABooldcl (
            TBoolean _boolean_,
            TId _id_,
            TAssign _assign_,
            PLogicexpr _logicexpr_
    )
    {
        SetBoolean (_boolean_);
        SetId (_id_);
        SetAssign (_assign_);
        SetLogicexpr (_logicexpr_);
    }

    public override Object Clone()
    {
        return new ABooldcl (
            (TBoolean)CloneNode (_boolean_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PLogicexpr)CloneNode (_logicexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooldcl(this);
    }

    public TBoolean GetBoolean ()
    {
        return _boolean_;
    }

    public void SetBoolean (TBoolean node)
    {
        if(_boolean_ != null)
        {
            _boolean_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PLogicexpr GetLogicexpr ()
    {
        return _logicexpr_;
    }

    public void SetLogicexpr (PLogicexpr node)
    {
        if(_logicexpr_ != null)
        {
            _logicexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_logicexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_ == child )
        {
            _boolean_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _logicexpr_ == child )
        {
            _logicexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_ == oldChild )
        {
            SetBoolean ((TBoolean) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _logicexpr_ == oldChild )
        {
            SetLogicexpr ((PLogicexpr) newChild);
            return;
        }
    }

}
public sealed class AArrdcl : PArrdcl
{
    private PType _type_;
    private PArrsizedcl _arrsizedcl_;
    private TId _id_;
    private TAssign _assign_;
    private PArrIdOrLit _arr_id_or_lit_;

    public AArrdcl ()
    {
    }

    public AArrdcl (
            PType _type_,
            PArrsizedcl _arrsizedcl_,
            TId _id_,
            TAssign _assign_,
            PArrIdOrLit _arr_id_or_lit_
    )
    {
        SetType (_type_);
        SetArrsizedcl (_arrsizedcl_);
        SetId (_id_);
        SetAssign (_assign_);
        SetArrIdOrLit (_arr_id_or_lit_);
    }

    public override Object Clone()
    {
        return new AArrdcl (
            (PType)CloneNode (_type_),
            (PArrsizedcl)CloneNode (_arrsizedcl_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PArrIdOrLit)CloneNode (_arr_id_or_lit_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrdcl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PArrsizedcl GetArrsizedcl ()
    {
        return _arrsizedcl_;
    }

    public void SetArrsizedcl (PArrsizedcl node)
    {
        if(_arrsizedcl_ != null)
        {
            _arrsizedcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrsizedcl_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PArrIdOrLit GetArrIdOrLit ()
    {
        return _arr_id_or_lit_;
    }

    public void SetArrIdOrLit (PArrIdOrLit node)
    {
        if(_arr_id_or_lit_ != null)
        {
            _arr_id_or_lit_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arr_id_or_lit_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_arrsizedcl_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_arr_id_or_lit_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _arrsizedcl_ == child )
        {
            _arrsizedcl_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _arr_id_or_lit_ == child )
        {
            _arr_id_or_lit_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _arrsizedcl_ == oldChild )
        {
            SetArrsizedcl ((PArrsizedcl) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _arr_id_or_lit_ == oldChild )
        {
            SetArrIdOrLit ((PArrIdOrLit) newChild);
            return;
        }
    }

}
public sealed class AOneArrIdOrLit : PArrIdOrLit
{
    private TId _id_;

    public AOneArrIdOrLit ()
    {
    }

    public AOneArrIdOrLit (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AOneArrIdOrLit (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneArrIdOrLit(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ATwoArrIdOrLit : PArrIdOrLit
{
    private TLbrack _lbrack_;
    private PParamsOptions _params_options_;
    private TRbrack _rbrack_;

    public ATwoArrIdOrLit ()
    {
    }

    public ATwoArrIdOrLit (
            TLbrack _lbrack_,
            PParamsOptions _params_options_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetParamsOptions (_params_options_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new ATwoArrIdOrLit (
            (TLbrack)CloneNode (_lbrack_),
            (PParamsOptions)CloneNode (_params_options_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoArrIdOrLit(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public PParamsOptions GetParamsOptions ()
    {
        return _params_options_;
    }

    public void SetParamsOptions (PParamsOptions node)
    {
        if(_params_options_ != null)
        {
            _params_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_options_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_params_options_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _params_options_ == child )
        {
            _params_options_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _params_options_ == oldChild )
        {
            SetParamsOptions ((PParamsOptions) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}
public sealed class AArrsizedcl : PArrsizedcl
{
    private TLbrack _lbrack_;
    private TNumliteral _numliteral_;
    private TRbrack _rbrack_;

    public AArrsizedcl ()
    {
    }

    public AArrsizedcl (
            TLbrack _lbrack_,
            TNumliteral _numliteral_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetNumliteral (_numliteral_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new AArrsizedcl (
            (TLbrack)CloneNode (_lbrack_),
            (TNumliteral)CloneNode (_numliteral_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrsizedcl(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public TNumliteral GetNumliteral ()
    {
        return _numliteral_;
    }

    public void SetNumliteral (TNumliteral node)
    {
        if(_numliteral_ != null)
        {
            _numliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numliteral_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_numliteral_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _numliteral_ == child )
        {
            _numliteral_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _numliteral_ == oldChild )
        {
            SetNumliteral ((TNumliteral) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
