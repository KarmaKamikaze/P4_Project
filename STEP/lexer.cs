/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using STEP.node;

namespace STEP.lexer {

internal class PushbackReader {
  private TextReader reader;
  private Stack stack = new Stack ();


  internal PushbackReader (TextReader reader)
  {
    this.reader = reader;
  }

  internal int Peek ()
  {
    if ( stack.Count > 0 ) return (int)stack.Peek();
    return reader.Peek();
  }

  internal int Read ()
  {
    if ( stack.Count > 0 ) return (int)stack.Pop();
    return reader.Read();
  }

  internal void Unread (int v)
  {
    stack.Push (v);
  }
}

public class LexerException : ApplicationException
{
    public LexerException(String message) : base (message)
    {
    }
}

public class Lexer
{
    protected Token token;
    protected State currentState = State.INITIAL;

    private PushbackReader input;
    private int line;
    private int pos;
    private bool cr;
    private bool eof;
    private StringBuilder text = new StringBuilder();

    protected virtual void Filter()
    {
    }

    public Lexer(TextReader input)
    {
        this.input = new PushbackReader(input);
    }

    public virtual Token Peek()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        return token;
    }

    public virtual Token Next()
    {
        while(token == null)
        {
            token = GetToken();
            Filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected virtual Token GetToken()
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = Lexer.gotoTable[currentState.id()];
        int[] accept = Lexer.accept[currentState.id()];
        text.Length = 0;

        while(true)
        {
            int c = GetChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.Append((char) c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.Length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.Length;
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = New0(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = New1(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = New2(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = New3(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = New4(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = New5(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = New6(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = New7(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = New8(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = New9(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = New10(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = New11(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = New12(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = New13(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = New14(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = New15(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = New16(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = New17(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = New18(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = New19(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = New20(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = New21(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = New22(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = New23(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = New24(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = New25(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = New26(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = New27(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = New28(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = New29(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = New30(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = New31(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = New32(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = New33(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = New34(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = New35(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = New36(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = New37(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = New38(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = New39(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = New40(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = New41(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = New42(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = New43(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = New44(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = New45(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = New46(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = New47(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = New48(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = New49(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = New50(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = New51(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = New52(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = New53(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = New54(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = New55(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = New56(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = New57(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = New58(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = New59(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = New60(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = New61(
                                GetText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            PushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.Length > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    private Token New0(String text, int line, int pos) { return new TEndOfLineComment(text, line, pos); }
    private Token New1(String text, int line, int pos) { return new TMultilineComment(text, line, pos); }
    private Token New2(String text, int line, int pos) { return new TLparen(text, line, pos); }
    private Token New3(String text, int line, int pos) { return new TRparen(text, line, pos); }
    private Token New4(String text, int line, int pos) { return new TLbrack(text, line, pos); }
    private Token New5(String text, int line, int pos) { return new TRbrack(text, line, pos); }
    private Token New6(String text, int line, int pos) { return new TAssign(text, line, pos); }
    private Token New7(String text, int line, int pos) { return new TPlus(text, line, pos); }
    private Token New8(String text, int line, int pos) { return new TMinus(text, line, pos); }
    private Token New9(String text, int line, int pos) { return new TDivide(text, line, pos); }
    private Token New10(String text, int line, int pos) { return new TMult(text, line, pos); }
    private Token New11(String text, int line, int pos) { return new TPow(text, line, pos); }
    private Token New12(String text, int line, int pos) { return new TGrthan(text, line, pos); }
    private Token New13(String text, int line, int pos) { return new TGrthaneq(text, line, pos); }
    private Token New14(String text, int line, int pos) { return new TLthan(text, line, pos); }
    private Token New15(String text, int line, int pos) { return new TLthaneq(text, line, pos); }
    private Token New16(String text, int line, int pos) { return new TEq(text, line, pos); }
    private Token New17(String text, int line, int pos) { return new TNeq(text, line, pos); }
    private Token New18(String text, int line, int pos) { return new TNeg(text, line, pos); }
    private Token New19(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    private Token New20(String text, int line, int pos) { return new TNl(text, line, pos); }
    private Token New21(String text, int line, int pos) { return new TComma(text, line, pos); }
    private Token New22(String text, int line, int pos) { return new TNumliteral(text, line, pos); }
    private Token New23(String text, int line, int pos) { return new TStrliteral(text, line, pos); }
    private Token New24(String text, int line, int pos) { return new TBoolliteral(text, line, pos); }
    private Token New25(String text, int line, int pos) { return new TSetup(text, line, pos); }
    private Token New26(String text, int line, int pos) { return new TEndsetup(text, line, pos); }
    private Token New27(String text, int line, int pos) { return new TLoop(text, line, pos); }
    private Token New28(String text, int line, int pos) { return new TEndloop(text, line, pos); }
    private Token New29(String text, int line, int pos) { return new TFunctions(text, line, pos); }
    private Token New30(String text, int line, int pos) { return new TEndfunctions(text, line, pos); }
    private Token New31(String text, int line, int pos) { return new TFunction(text, line, pos); }
    private Token New32(String text, int line, int pos) { return new TEndfunction(text, line, pos); }
    private Token New33(String text, int line, int pos) { return new TVariables(text, line, pos); }
    private Token New34(String text, int line, int pos) { return new TEndvariables(text, line, pos); }
    private Token New35(String text, int line, int pos) { return new TBlank(text, line, pos); }
    private Token New36(String text, int line, int pos) { return new TNumber(text, line, pos); }
    private Token New37(String text, int line, int pos) { return new TString(text, line, pos); }
    private Token New38(String text, int line, int pos) { return new TBoolean(text, line, pos); }
    private Token New39(String text, int line, int pos) { return new TIf(text, line, pos); }
    private Token New40(String text, int line, int pos) { return new TEndif(text, line, pos); }
    private Token New41(String text, int line, int pos) { return new TElse(text, line, pos); }
    private Token New42(String text, int line, int pos) { return new TContinue(text, line, pos); }
    private Token New43(String text, int line, int pos) { return new TBreak(text, line, pos); }
    private Token New44(String text, int line, int pos) { return new TRepeatwhile(text, line, pos); }
    private Token New45(String text, int line, int pos) { return new TEndwhile(text, line, pos); }
    private Token New46(String text, int line, int pos) { return new TRepeatfor(text, line, pos); }
    private Token New47(String text, int line, int pos) { return new TEndfor(text, line, pos); }
    private Token New48(String text, int line, int pos) { return new TTo(text, line, pos); }
    private Token New49(String text, int line, int pos) { return new TIncreaseby(text, line, pos); }
    private Token New50(String text, int line, int pos) { return new TDecreaseby(text, line, pos); }
    private Token New51(String text, int line, int pos) { return new TSwitch(text, line, pos); }
    private Token New52(String text, int line, int pos) { return new TEndswitch(text, line, pos); }
    private Token New53(String text, int line, int pos) { return new TWhen(text, line, pos); }
    private Token New54(String text, int line, int pos) { return new TDo(text, line, pos); }
    private Token New55(String text, int line, int pos) { return new TFallthrough(text, line, pos); }
    private Token New56(String text, int line, int pos) { return new TOtherwisedo(text, line, pos); }
    private Token New57(String text, int line, int pos) { return new TReturn(text, line, pos); }
    private Token New58(String text, int line, int pos) { return new TAnd(text, line, pos); }
    private Token New59(String text, int line, int pos) { return new TOr(text, line, pos); }
    private Token New60(String text, int line, int pos) { return new TConstant(text, line, pos); }
    private Token New61(String text, int line, int pos) { return new TId(text, line, pos); }

    private int GetChar()
    {
        if(eof)
        {
            return -1;
        }

        int result = input.Read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void PushBack(int acceptLength)
    {
        int length = text.Length;
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }
    }


    protected virtual void Unread(Token token)
    {
        String text = token.Text;
        int length = text.Length;

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            input.Unread(text[i]);
        }

        pos = token.Pos - 1;
        line = token.Line - 1;
    }

    private string GetText(int acceptLength)
    {
        StringBuilder s = new StringBuilder(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.Append(text[i]);
        }

        return s.ToString();
    }

    private static int[][][][] gotoTable = {
      new int[][][] {
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {10, 10, 2},
          new int[] {13, 13, 3},
          new int[] {32, 32, 4},
          new int[] {33, 33, 5},
          new int[] {34, 34, 6},
          new int[] {35, 35, 7},
          new int[] {40, 40, 8},
          new int[] {41, 41, 9},
          new int[] {42, 42, 10},
          new int[] {43, 43, 11},
          new int[] {44, 44, 12},
          new int[] {45, 45, 13},
          new int[] {47, 47, 14},
          new int[] {48, 57, 15},
          new int[] {60, 60, 16},
          new int[] {61, 61, 17},
          new int[] {62, 62, 18},
          new int[] {65, 90, 19},
          new int[] {91, 91, 20},
          new int[] {93, 93, 21},
          new int[] {94, 94, 22},
          new int[] {97, 97, 23},
          new int[] {98, 98, 24},
          new int[] {99, 99, 25},
          new int[] {100, 100, 26},
          new int[] {101, 101, 27},
          new int[] {102, 102, 28},
          new int[] {103, 104, 29},
          new int[] {105, 105, 30},
          new int[] {106, 107, 29},
          new int[] {108, 108, 31},
          new int[] {109, 109, 29},
          new int[] {110, 110, 32},
          new int[] {111, 111, 33},
          new int[] {112, 113, 29},
          new int[] {114, 114, 34},
          new int[] {115, 115, 35},
          new int[] {116, 116, 36},
          new int[] {117, 117, 29},
          new int[] {118, 118, 37},
          new int[] {119, 119, 38},
          new int[] {120, 122, 29},
        },
        new int[][] {
          new int[] {9, 9, 1},
          new int[] {32, 32, 4},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {10, 10, 39},
        },
        new int[][] {
          new int[] {9, 32, -3},
        },
        new int[][] {
          new int[] {61, 61, 40},
          new int[] {102, 102, 41},
          new int[] {116, 116, 42},
        },
        new int[][] {
          new int[] {0, 33, 43},
          new int[] {34, 34, 44},
          new int[] {35, 65535, 43},
        },
        new int[][] {
          new int[] {0, 9, 45},
          new int[] {10, 10, 46},
          new int[] {11, 12, 45},
          new int[] {13, 13, 47},
          new int[] {14, 34, 45},
          new int[] {35, 35, 48},
          new int[] {36, 65535, 45},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {46, 46, 49},
          new int[] {48, 57, 15},
        },
        new int[][] {
          new int[] {61, 61, 50},
        },
        new int[][] {
          new int[] {61, 61, 51},
        },
        new int[][] {
          new int[] {61, 61, 52},
        },
        new int[][] {
          new int[] {48, 57, 53},
          new int[] {65, 90, 54},
          new int[] {95, 95, 55},
          new int[] {97, 122, 56},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 109, 56},
          new int[] {110, 110, 57},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 107, 56},
          new int[] {108, 108, 58},
          new int[] {109, 110, 56},
          new int[] {111, 111, 59},
          new int[] {112, 113, 56},
          new int[] {114, 114, 60},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 110, 56},
          new int[] {111, 111, 61},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 100, 56},
          new int[] {101, 101, 62},
          new int[] {102, 110, 56},
          new int[] {111, 111, 63},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 107, -26},
          new int[] {108, 108, 64},
          new int[] {109, 109, 56},
          new int[] {110, 110, 65},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 66},
          new int[] {98, 116, 56},
          new int[] {117, 117, 67},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 101, 56},
          new int[] {102, 102, 68},
          new int[] {103, 109, 56},
          new int[] {110, 110, 69},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 110, -27},
          new int[] {111, 111, 70},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 116, 56},
          new int[] {117, 117, 71},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 113, 56},
          new int[] {114, 114, 72},
          new int[] {115, 115, 56},
          new int[] {116, 116, 73},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 74},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 75},
          new int[] {102, 115, 56},
          new int[] {116, 116, 76},
          new int[] {117, 118, 56},
          new int[] {119, 119, 77},
          new int[] {120, 122, 56},
        },
        new int[][] {
          new int[] {48, 110, -27},
          new int[] {111, 111, 78},
          new int[] {112, 113, 56},
          new int[] {114, 114, 79},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 80},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 103, 56},
          new int[] {104, 104, 81},
          new int[] {105, 122, 56},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {97, 97, 82},
        },
        new int[][] {
          new int[] {114, 114, 83},
        },
        new int[][] {
          new int[] {0, 65535, -8},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 34, -9},
          new int[] {36, 65535, 45},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {10, 10, 84},
        },
        new int[][] {
          new int[] {0, 34, 85},
          new int[] {35, 35, 86},
          new int[] {36, 65535, 85},
        },
        new int[][] {
          new int[] {48, 57, 87},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 99, 56},
          new int[] {100, 100, 88},
          new int[] {101, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 89},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 110, -27},
          new int[] {111, 111, 90},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 91},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 92},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 98, 56},
          new int[] {99, 99, 93},
          new int[] {100, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 114, 56},
          new int[] {115, 115, 94},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {48, 99, -59},
          new int[] {100, 100, 95},
          new int[] {101, 122, 56},
        },
        new int[][] {
          new int[] {48, 107, -26},
          new int[] {108, 108, 96},
          new int[] {109, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 97},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 98, -64},
          new int[] {99, 99, 98},
          new int[] {100, 122, 56},
        },
        new int[][] {
          new int[] {48, 110, -27},
          new int[] {111, 111, 99},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 108, 56},
          new int[] {109, 109, 100},
          new int[] {110, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 103, -40},
          new int[] {104, 104, 101},
          new int[] {105, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 111, 56},
          new int[] {112, 112, 102},
          new int[] {113, 115, 56},
          new int[] {116, 116, 103},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 115, 56},
          new int[] {116, 116, 104},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 105},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 104, 56},
          new int[] {105, 105, 106},
          new int[] {106, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 116, -34},
          new int[] {117, 117, 107},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 108},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 109},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {108, 108, 110},
        },
        new int[][] {
          new int[] {117, 117, 111},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {0, 65535, -50},
        },
        new int[][] {
          new int[] {35, 35, 112},
        },
        new int[][] {
          new int[] {48, 57, 87},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 113},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 107, -26},
          new int[] {108, 108, 114},
          new int[] {109, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 115},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 114, -66},
          new int[] {115, 115, 116},
          new int[] {116, 116, 117},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 118},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 119},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {32, 32, 120},
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 107, -26},
          new int[] {108, 108, 121},
          new int[] {109, 114, 56},
          new int[] {115, 115, 122},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {48, 98, -64},
          new int[] {99, 99, 123},
          new int[] {100, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 124},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 111, -76},
          new int[] {112, 112, 125},
          new int[] {113, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 56},
          new int[] {98, 98, 126},
          new int[] {99, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 127},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 128},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 116, -34},
          new int[] {117, 117, 129},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 116, -34},
          new int[] {117, 117, 130},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 104, -79},
          new int[] {105, 105, 131},
          new int[] {106, 122, 56},
        },
        new int[][] {
          new int[] {48, 115, -77},
          new int[] {116, 116, 132},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 133},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 104, -79},
          new int[] {105, 105, 134},
          new int[] {106, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 135},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {115, 115, 136},
        },
        new int[][] {
          new int[] {101, 101, 137},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 106, 56},
          new int[] {107, 107, 138},
          new int[] {108, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 139},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 106, -115},
          new int[] {107, 107, 140},
          new int[] {108, 122, 56},
        },
        new int[][] {
          new int[] {48, 115, -77},
          new int[] {116, 116, 141},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 104, -79},
          new int[] {105, 105, 142},
          new int[] {106, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 143},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {102, 102, 144},
          new int[] {105, 105, 145},
          new int[] {108, 108, 146},
          new int[] {115, 115, 147},
          new int[] {118, 118, 148},
          new int[] {119, 119, 149},
        },
        new int[][] {
          new int[] {48, 115, -77},
          new int[] {116, 116, 150},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 151},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 115, -77},
          new int[] {116, 116, 152},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 153},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 154},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 155},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 156},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 157},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 111, -76},
          new int[] {112, 112, 158},
          new int[] {113, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 159},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 98, -64},
          new int[] {99, 99, 160},
          new int[] {100, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 161},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {101, 101, 162},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 163},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 164},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 165},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 166},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {111, 111, 167},
          new int[] {117, 117, 168},
        },
        new int[][] {
          new int[] {102, 102, 169},
        },
        new int[][] {
          new int[] {111, 111, 170},
        },
        new int[][] {
          new int[] {101, 101, 171},
          new int[] {119, 119, 172},
        },
        new int[][] {
          new int[] {97, 97, 173},
        },
        new int[][] {
          new int[] {104, 104, 174},
        },
        new int[][] {
          new int[] {48, 103, -40},
          new int[] {104, 104, 175},
          new int[] {105, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 104, -79},
          new int[] {105, 105, 176},
          new int[] {106, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 97, 177},
          new int[] {98, 122, 56},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 178},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 118, 56},
          new int[] {119, 119, 179},
          new int[] {120, 122, 56},
        },
        new int[][] {
          new int[] {48, 115, -77},
          new int[] {116, 116, 180},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 181},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 95, -21},
          new int[] {97, 102, 56},
          new int[] {103, 103, 182},
          new int[] {104, 122, 56},
        },
        new int[][] {
          new int[] {48, 103, -40},
          new int[] {104, 104, 183},
          new int[] {105, 122, 56},
        },
        new int[][] {
          new int[] {48, 97, -102},
          new int[] {98, 98, 184},
          new int[] {99, 122, 56},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 185},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 186},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 116, -34},
          new int[] {117, 117, 187},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 114, -66},
          new int[] {115, 115, 188},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {114, 114, 189},
        },
        new int[][] {
          new int[] {110, 110, 190},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {111, 111, 191},
        },
        new int[][] {
          new int[] {116, 116, 192},
        },
        new int[][] {
          new int[] {105, 105, 193},
        },
        new int[][] {
          new int[] {114, 114, 194},
        },
        new int[][] {
          new int[] {105, 105, 195},
        },
        new int[][] {
          new int[] {48, 113, -35},
          new int[] {114, 114, 196},
          new int[] {115, 122, 56},
        },
        new int[][] {
          new int[] {48, 110, -27},
          new int[] {111, 111, 197},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 114, -66},
          new int[] {115, 115, 198},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 104, -79},
          new int[] {105, 105, 199},
          new int[] {106, 122, 56},
        },
        new int[][] {
          new int[] {32, 32, 200},
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 107, -26},
          new int[] {108, 108, 201},
          new int[] {109, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 115, -77},
          new int[] {116, 116, 202},
          new int[] {117, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 203},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 204},
          new int[] {102, 122, 56},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {99, 99, 205},
        },
        new int[][] {
          new int[] {112, 112, 206},
        },
        new int[][] {
          new int[] {117, 117, 207},
        },
        new int[][] {
          new int[] {116, 116, 208},
        },
        new int[][] {
          new int[] {105, 105, 209},
        },
        new int[][] {
          new int[] {108, 108, 210},
        },
        new int[][] {
          new int[] {48, 110, -27},
          new int[] {111, 111, 211},
          new int[] {112, 122, 56},
        },
        new int[][] {
          new int[] {48, 109, -25},
          new int[] {110, 110, 212},
          new int[] {111, 122, 56},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 213},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 114, -66},
          new int[] {115, 115, 214},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {102, 102, 215},
          new int[] {119, 119, 216},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 217},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {32, 32, 218},
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {116, 116, 219},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {112, 112, 220},
        },
        new int[][] {
          new int[] {99, 99, 221},
        },
        new int[][] {
          new int[] {97, 97, 222},
        },
        new int[][] {
          new int[] {101, 101, 223},
        },
        new int[][] {
          new int[] {48, 116, -34},
          new int[] {117, 117, 224},
          new int[] {118, 122, 56},
        },
        new int[][] {
          new int[] {48, 114, -66},
          new int[] {115, 115, 225},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {32, 32, 226},
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {48, 100, -28},
          new int[] {101, 101, 227},
          new int[] {102, 122, 56},
        },
        new int[][] {
          new int[] {111, 111, 228},
        },
        new int[][] {
          new int[] {104, 104, 229},
        },
        new int[][] {
          new int[] {48, 114, -66},
          new int[] {115, 115, 230},
          new int[] {116, 122, 56},
        },
        new int[][] {
          new int[] {98, 98, 231},
        },
        new int[][] {
          new int[] {105, 105, 232},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {104, 104, 233},
        },
        new int[][] {
          new int[] {98, 98, 234},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {48, 102, -161},
          new int[] {103, 103, 235},
          new int[] {104, 122, 56},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {98, 98, 236},
        },
        new int[][] {
          new int[] {32, 32, 237},
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {114, 114, 238},
        },
        new int[][] {
          new int[] {105, 105, 239},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
          new int[] {121, 121, 240},
        },
        new int[][] {
          new int[] {111, 111, 241},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {108, 108, 242},
        },
        new int[][] {
          new int[] {48, 103, -40},
          new int[] {104, 104, 243},
          new int[] {105, 122, 56},
        },
        new int[][] {
          new int[] {121, 121, 244},
        },
        new int[][] {
          new int[] {100, 100, 245},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {108, 108, 246},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {110, 110, 247},
        },
        new int[][] {
          new int[] {101, 101, 248},
        },
        new int[][] {
          new int[] {48, 122, -21},
        },
        new int[][] {
        },
        new int[][] {
          new int[] {111, 111, 249},
        },
        new int[][] {
          new int[] {101, 101, 250},
        },
        new int[][] {
          new int[] {115, 115, 251},
        },
        new int[][] {
          new int[] {115, 115, 252},
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
        new int[][] {
        },
      },
    };

    private static int[][] accept = {
      new int[] {
        -1, 19, 20, 20, 19, 18, -1, 0, 2, 3, 10, 7, 21, 8, 9, 22, 
        14, 6, 12, 61, 4, 5, 11, 61, 61, 61, 61, 61, 61, 61, 61, 61, 
        61, 61, 61, 61, 61, 61, 61, 20, 17, -1, -1, -1, 23, 0, 0, 0, 
        -1, 22, 15, 16, 13, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 54, 
        61, 61, 61, 61, 39, 61, 61, 61, 59, 61, 61, 61, 61, 61, 48, 61, 
        61, 61, -1, -1, 0, -1, -1, 22, 58, 61, 61, 61, 61, 61, 61, 61, 
        61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, -1, -1, 
        1, 61, 61, 61, 61, 61, 61, 41, -1, 61, 61, 61, 61, 27, 61, 61, 
        61, 61, 61, 61, 61, 24, 61, 53, -1, 24, 35, 61, 43, 61, 61, 61, 
        -1, -1, -1, -1, -1, -1, 61, 24, 61, 61, 61, 61, 61, 61, 25, 61, 
        61, 61, 24, 61, 61, 61, 61, -1, -1, 40, -1, -1, -1, -1, -1, 61, 
        61, 61, 36, 61, 61, 57, 37, 51, 61, 38, 61, 61, 61, 47, -1, -1, 
        -1, -1, -1, -1, 61, 61, 61, 61, -1, 61, 60, 42, 61, -1, 28, -1, 
        -1, -1, -1, 61, 31, 61, 61, -1, -1, 61, -1, -1, 26, -1, -1, 45, 
        61, 29, -1, 61, -1, -1, 33, -1, -1, 52, -1, 61, -1, -1, 46, -1, 
        50, -1, -1, 55, 49, -1, -1, 32, -1, 56, 44, 30, 34, 
      },
    };

    public class State
    {
        public static State INITIAL = new State(0);

        private int _id;

        private State(int _id)
        {
            this._id = _id;
        }

        public int id()
        {
            return _id;
        }
    }
}
}
