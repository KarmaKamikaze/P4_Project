/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  STEP.analysis;

namespace STEP.node {

public abstract class PProgram : Node
{
}

public abstract class PSetuploop : Node
{
}

public abstract class PSetup : Node
{
}

public abstract class PLoop : Node
{
}

public abstract class PFunctions : Node
{
}

public abstract class PFuncdcl : Node
{
}

public abstract class PBrackets : Node
{
}

public abstract class PParams : Node
{
}

public abstract class PParamsContent : Node
{
}

public abstract class PParamsMulti : Node
{
}

public abstract class PType : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PIfstmt : Node
{
}

public abstract class PWhilestmt : Node
{
}

public abstract class POptionStmtContinueBreak : Node
{
}

public abstract class PForstmt : Node
{
}

public abstract class PForstmtIteratorOptions : Node
{
}

public abstract class POptionIncreaseDecrease : Node
{
}

public abstract class PSwitchstmt : Node
{
}

public abstract class PWhencase : Node
{
}

public abstract class POtherwisecase : Node
{
}

public abstract class PAssstmt : Node
{
}

public abstract class PFunccall : Node
{
}

public abstract class PParamsOptions : Node
{
}

public abstract class PMultiExpr : Node
{
}

public abstract class PRetstmt : Node
{
}

public abstract class PArrindex : Node
{
}

public abstract class PSkipstmt : Node
{
}

public abstract class PExpr : Node
{
}

public abstract class PValue : Node
{
}

public abstract class PConstant : Node
{
}

public abstract class PComp : Node
{
}

public abstract class PRelop : Node
{
}

public abstract class PCond : Node
{
}

public abstract class PBop : Node
{
}

public abstract class PVardcl : Node
{
}

public abstract class PVarOptions : Node
{
}

public abstract class PNumdcl : Node
{
}

public abstract class PStringdcl : Node
{
}

public abstract class PBooldcl : Node
{
}

public abstract class PArrdcl : Node
{
}

public abstract class PArrIdOrExpr : Node
{
}

public abstract class PArrsizedcl : Node
{
}


public sealed class AProgram : PProgram
{
    private PSetuploop _setuploop_;
    private PFunctions _functions_;

    public AProgram ()
    {
    }

    public AProgram (
            PSetuploop _setuploop_,
            PFunctions _functions_
    )
    {
        SetSetuploop (_setuploop_);
        SetFunctions (_functions_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PSetuploop)CloneNode (_setuploop_),
            (PFunctions)CloneNode (_functions_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PSetuploop GetSetuploop ()
    {
        return _setuploop_;
    }

    public void SetSetuploop (PSetuploop node)
    {
        if(_setuploop_ != null)
        {
            _setuploop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setuploop_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_setuploop_)
            + ToString (_functions_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setuploop_ == child )
        {
            _setuploop_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setuploop_ == oldChild )
        {
            SetSetuploop ((PSetuploop) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
    }

}
public sealed class AOneSetuploop : PSetuploop
{
    private PSetup _setup_;

    public AOneSetuploop ()
    {
    }

    public AOneSetuploop (
            PSetup _setup_
    )
    {
        SetSetup (_setup_);
    }

    public override Object Clone()
    {
        return new AOneSetuploop (
            (PSetup)CloneNode (_setup_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneSetuploop(this);
    }

    public PSetup GetSetup ()
    {
        return _setup_;
    }

    public void SetSetup (PSetup node)
    {
        if(_setup_ != null)
        {
            _setup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setup_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_setup_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setup_ == child )
        {
            _setup_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setup_ == oldChild )
        {
            SetSetup ((PSetup) newChild);
            return;
        }
    }

}
public sealed class ATwoSetuploop : PSetuploop
{
    private PLoop _loop_;

    public ATwoSetuploop ()
    {
    }

    public ATwoSetuploop (
            PLoop _loop_
    )
    {
        SetLoop (_loop_);
    }

    public override Object Clone()
    {
        return new ATwoSetuploop (
            (PLoop)CloneNode (_loop_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoSetuploop(this);
    }

    public PLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (PLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_ == oldChild )
        {
            SetLoop ((PLoop) newChild);
            return;
        }
    }

}
public sealed class AThreeSetuploop : PSetuploop
{
    private PSetup _setup_;
    private PLoop _loop_;

    public AThreeSetuploop ()
    {
    }

    public AThreeSetuploop (
            PSetup _setup_,
            PLoop _loop_
    )
    {
        SetSetup (_setup_);
        SetLoop (_loop_);
    }

    public override Object Clone()
    {
        return new AThreeSetuploop (
            (PSetup)CloneNode (_setup_),
            (PLoop)CloneNode (_loop_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeSetuploop(this);
    }

    public PSetup GetSetup ()
    {
        return _setup_;
    }

    public void SetSetup (PSetup node)
    {
        if(_setup_ != null)
        {
            _setup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setup_ = node;
    }
    public PLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (PLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_setup_)
            + ToString (_loop_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setup_ == child )
        {
            _setup_ = null;
            return;
        }
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setup_ == oldChild )
        {
            SetSetup ((PSetup) newChild);
            return;
        }
        if ( _loop_ == oldChild )
        {
            SetLoop ((PLoop) newChild);
            return;
        }
    }

}
public sealed class ASetup : PSetup
{
    private TSetup _setup_;
    private TypedList _stmt_;
    private TEndsetup _endsetup_;
    private TNl _nl_;

    public ASetup ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ASetup (
            TSetup _setup_,
            IList _stmt_,
            TEndsetup _endsetup_,
            TNl _nl_
    )
    {
        SetSetup (_setup_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndsetup (_endsetup_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ASetup (
            (TSetup)CloneNode (_setup_),
            CloneList (_stmt_),
            (TEndsetup)CloneNode (_endsetup_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASetup(this);
    }

    public TSetup GetSetup ()
    {
        return _setup_;
    }

    public void SetSetup (TSetup node)
    {
        if(_setup_ != null)
        {
            _setup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _setup_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndsetup GetEndsetup ()
    {
        return _endsetup_;
    }

    public void SetEndsetup (TEndsetup node)
    {
        if(_endsetup_ != null)
        {
            _endsetup_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endsetup_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_setup_)
            + ToString (_stmt_)
            + ToString (_endsetup_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _setup_ == child )
        {
            _setup_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endsetup_ == child )
        {
            _endsetup_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _setup_ == oldChild )
        {
            SetSetup ((TSetup) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endsetup_ == oldChild )
        {
            SetEndsetup ((TEndsetup) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ASetup obj;

        internal Stmt_Cast (ASetup obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ALoop : PLoop
{
    private TLoop _loop_;
    private TypedList _stmt_;
    private TEndloop _endloop_;
    private TNl _nl_;

    public ALoop ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ALoop (
            TLoop _loop_,
            IList _stmt_,
            TEndloop _endloop_,
            TNl _nl_
    )
    {
        SetLoop (_loop_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndloop (_endloop_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ALoop (
            (TLoop)CloneNode (_loop_),
            CloneList (_stmt_),
            (TEndloop)CloneNode (_endloop_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoop(this);
    }

    public TLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (TLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndloop GetEndloop ()
    {
        return _endloop_;
    }

    public void SetEndloop (TEndloop node)
    {
        if(_endloop_ != null)
        {
            _endloop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endloop_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_)
            + ToString (_stmt_)
            + ToString (_endloop_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endloop_ == child )
        {
            _endloop_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_ == oldChild )
        {
            SetLoop ((TLoop) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endloop_ == oldChild )
        {
            SetEndloop ((TEndloop) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ALoop obj;

        internal Stmt_Cast (ALoop obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AFunctions : PFunctions
{
    private TFunctions _functions_;
    private TypedList _funcdcl_;
    private TEndfunctions _endfunctions_;
    private TNl _nl_;

    public AFunctions ()
    {
        this._funcdcl_ = new TypedList(new Funcdcl_Cast(this));
    }

    public AFunctions (
            TFunctions _functions_,
            IList _funcdcl_,
            TEndfunctions _endfunctions_,
            TNl _nl_
    )
    {
        SetFunctions (_functions_);
        this._funcdcl_ = new TypedList(new Funcdcl_Cast(this));
        this._funcdcl_.Clear();
        this._funcdcl_.AddAll(_funcdcl_);
        SetEndfunctions (_endfunctions_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AFunctions (
            (TFunctions)CloneNode (_functions_),
            CloneList (_funcdcl_),
            (TEndfunctions)CloneNode (_endfunctions_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctions(this);
    }

    public TFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (TFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }
    public IList GetFuncdcl ()
    {
        return _funcdcl_;
    }

    public void setFuncdcl (IList list)
    {
        _funcdcl_.Clear();
        _funcdcl_.AddAll(list);
    }
    public TEndfunctions GetEndfunctions ()
    {
        return _endfunctions_;
    }

    public void SetEndfunctions (TEndfunctions node)
    {
        if(_endfunctions_ != null)
        {
            _endfunctions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfunctions_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functions_)
            + ToString (_funcdcl_)
            + ToString (_endfunctions_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
        if ( _funcdcl_.Contains(child) )
        {
            _funcdcl_.Remove(child);
            return;
        }
        if ( _endfunctions_ == child )
        {
            _endfunctions_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functions_ == oldChild )
        {
            SetFunctions ((TFunctions) newChild);
            return;
        }
        for ( int i = 0; i < _funcdcl_.Count; i++ )
        {
            Node n = (Node)_funcdcl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _funcdcl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _funcdcl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endfunctions_ == oldChild )
        {
            SetEndfunctions ((TEndfunctions) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

    private class Funcdcl_Cast : Cast
    {
        AFunctions obj;

        internal Funcdcl_Cast (AFunctions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PFuncdcl node = (PFuncdcl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PFuncdcl node = (PFuncdcl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneFuncdcl : PFuncdcl
{
    private PType _type_;
    private PBrackets _brackets_;
    private TFunction _function_;
    private TId _id_;
    private PParams _params_;
    private TypedList _stmt_;
    private PRetstmt _retstmt_;
    private TEndfunction _endfunction_;
    private TNl _nl_;

    public AOneFuncdcl ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public AOneFuncdcl (
            PType _type_,
            PBrackets _brackets_,
            TFunction _function_,
            TId _id_,
            PParams _params_,
            IList _stmt_,
            PRetstmt _retstmt_,
            TEndfunction _endfunction_,
            TNl _nl_
    )
    {
        SetType (_type_);
        SetBrackets (_brackets_);
        SetFunction (_function_);
        SetId (_id_);
        SetParams (_params_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetRetstmt (_retstmt_);
        SetEndfunction (_endfunction_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AOneFuncdcl (
            (PType)CloneNode (_type_),
            (PBrackets)CloneNode (_brackets_),
            (TFunction)CloneNode (_function_),
            (TId)CloneNode (_id_),
            (PParams)CloneNode (_params_),
            CloneList (_stmt_),
            (PRetstmt)CloneNode (_retstmt_),
            (TEndfunction)CloneNode (_endfunction_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneFuncdcl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PBrackets GetBrackets ()
    {
        return _brackets_;
    }

    public void SetBrackets (PBrackets node)
    {
        if(_brackets_ != null)
        {
            _brackets_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _brackets_ = node;
    }
    public TFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public PRetstmt GetRetstmt ()
    {
        return _retstmt_;
    }

    public void SetRetstmt (PRetstmt node)
    {
        if(_retstmt_ != null)
        {
            _retstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _retstmt_ = node;
    }
    public TEndfunction GetEndfunction ()
    {
        return _endfunction_;
    }

    public void SetEndfunction (TEndfunction node)
    {
        if(_endfunction_ != null)
        {
            _endfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfunction_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_brackets_)
            + ToString (_function_)
            + ToString (_id_)
            + ToString (_params_)
            + ToString (_stmt_)
            + ToString (_retstmt_)
            + ToString (_endfunction_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _brackets_ == child )
        {
            _brackets_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _retstmt_ == child )
        {
            _retstmt_ = null;
            return;
        }
        if ( _endfunction_ == child )
        {
            _endfunction_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _brackets_ == oldChild )
        {
            SetBrackets ((PBrackets) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((TFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _retstmt_ == oldChild )
        {
            SetRetstmt ((PRetstmt) newChild);
            return;
        }
        if ( _endfunction_ == oldChild )
        {
            SetEndfunction ((TEndfunction) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        AOneFuncdcl obj;

        internal Stmt_Cast (AOneFuncdcl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATwoFuncdcl : PFuncdcl
{
    private TBlank _blank_;
    private TFunction _function_;
    private TId _id_;
    private PParams _params_;
    private TypedList _stmt_;
    private TEndfunction _endfunction_;
    private TNl _nl_;

    public ATwoFuncdcl ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ATwoFuncdcl (
            TBlank _blank_,
            TFunction _function_,
            TId _id_,
            PParams _params_,
            IList _stmt_,
            TEndfunction _endfunction_,
            TNl _nl_
    )
    {
        SetBlank (_blank_);
        SetFunction (_function_);
        SetId (_id_);
        SetParams (_params_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndfunction (_endfunction_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoFuncdcl (
            (TBlank)CloneNode (_blank_),
            (TFunction)CloneNode (_function_),
            (TId)CloneNode (_id_),
            (PParams)CloneNode (_params_),
            CloneList (_stmt_),
            (TEndfunction)CloneNode (_endfunction_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoFuncdcl(this);
    }

    public TBlank GetBlank ()
    {
        return _blank_;
    }

    public void SetBlank (TBlank node)
    {
        if(_blank_ != null)
        {
            _blank_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _blank_ = node;
    }
    public TFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (TFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndfunction GetEndfunction ()
    {
        return _endfunction_;
    }

    public void SetEndfunction (TEndfunction node)
    {
        if(_endfunction_ != null)
        {
            _endfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfunction_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_blank_)
            + ToString (_function_)
            + ToString (_id_)
            + ToString (_params_)
            + ToString (_stmt_)
            + ToString (_endfunction_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _blank_ == child )
        {
            _blank_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endfunction_ == child )
        {
            _endfunction_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _blank_ == oldChild )
        {
            SetBlank ((TBlank) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((TFunction) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endfunction_ == oldChild )
        {
            SetEndfunction ((TEndfunction) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ATwoFuncdcl obj;

        internal Stmt_Cast (ATwoFuncdcl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ABrackets : PBrackets
{
    private TLbrack _lbrack_;
    private TRbrack _rbrack_;

    public ABrackets ()
    {
    }

    public ABrackets (
            TLbrack _lbrack_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new ABrackets (
            (TLbrack)CloneNode (_lbrack_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABrackets(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}
public sealed class AParams : PParams
{
    private TLparen _lparen_;
    private PParamsContent _params_content_;
    private TRparen _rparen_;

    public AParams ()
    {
    }

    public AParams (
            TLparen _lparen_,
            PParamsContent _params_content_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetParamsContent (_params_content_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AParams (
            (TLparen)CloneNode (_lparen_),
            (PParamsContent)CloneNode (_params_content_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParams(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PParamsContent GetParamsContent ()
    {
        return _params_content_;
    }

    public void SetParamsContent (PParamsContent node)
    {
        if(_params_content_ != null)
        {
            _params_content_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_content_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_params_content_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _params_content_ == child )
        {
            _params_content_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _params_content_ == oldChild )
        {
            SetParamsContent ((PParamsContent) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AParamsContent : PParamsContent
{
    private PType _type_;
    private TypedList _brackets_;
    private TId _id_;
    private TypedList _params_multi_;

    public AParamsContent ()
    {
        this._brackets_ = new TypedList(new Brackets_Cast(this));
        this._params_multi_ = new TypedList(new ParamsMulti_Cast(this));
    }

    public AParamsContent (
            PType _type_,
            IList _brackets_,
            TId _id_,
            IList _params_multi_
    )
    {
        SetType (_type_);
        this._brackets_ = new TypedList(new Brackets_Cast(this));
        this._brackets_.Clear();
        this._brackets_.AddAll(_brackets_);
        SetId (_id_);
        this._params_multi_ = new TypedList(new ParamsMulti_Cast(this));
        this._params_multi_.Clear();
        this._params_multi_.AddAll(_params_multi_);
    }

    public override Object Clone()
    {
        return new AParamsContent (
            (PType)CloneNode (_type_),
            CloneList (_brackets_),
            (TId)CloneNode (_id_),
            CloneList (_params_multi_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsContent(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public IList GetBrackets ()
    {
        return _brackets_;
    }

    public void setBrackets (IList list)
    {
        _brackets_.Clear();
        _brackets_.AddAll(list);
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public IList GetParamsMulti ()
    {
        return _params_multi_;
    }

    public void setParamsMulti (IList list)
    {
        _params_multi_.Clear();
        _params_multi_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_brackets_)
            + ToString (_id_)
            + ToString (_params_multi_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _brackets_.Contains(child) )
        {
            _brackets_.Remove(child);
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _params_multi_.Contains(child) )
        {
            _params_multi_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _brackets_.Count; i++ )
        {
            Node n = (Node)_brackets_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _brackets_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _brackets_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _params_multi_.Count; i++ )
        {
            Node n = (Node)_params_multi_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _params_multi_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _params_multi_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Brackets_Cast : Cast
    {
        AParamsContent obj;

        internal Brackets_Cast (AParamsContent obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PBrackets node = (PBrackets) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PBrackets node = (PBrackets) o;
            node.Parent(null);
            return node;
        }
    }
    private class ParamsMulti_Cast : Cast
    {
        AParamsContent obj;

        internal ParamsMulti_Cast (AParamsContent obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PParamsMulti node = (PParamsMulti) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PParamsMulti node = (PParamsMulti) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AParamsMulti : PParamsMulti
{
    private TComma _comma_;
    private PType _type_;
    private TypedList _brackets_;
    private TId _id_;

    public AParamsMulti ()
    {
        this._brackets_ = new TypedList(new Brackets_Cast(this));
    }

    public AParamsMulti (
            TComma _comma_,
            PType _type_,
            IList _brackets_,
            TId _id_
    )
    {
        SetComma (_comma_);
        SetType (_type_);
        this._brackets_ = new TypedList(new Brackets_Cast(this));
        this._brackets_.Clear();
        this._brackets_.AddAll(_brackets_);
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AParamsMulti (
            (TComma)CloneNode (_comma_),
            (PType)CloneNode (_type_),
            CloneList (_brackets_),
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsMulti(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public IList GetBrackets ()
    {
        return _brackets_;
    }

    public void setBrackets (IList list)
    {
        _brackets_.Clear();
        _brackets_.AddAll(list);
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_type_)
            + ToString (_brackets_)
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _brackets_.Contains(child) )
        {
            _brackets_.Remove(child);
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        for ( int i = 0; i < _brackets_.Count; i++ )
        {
            Node n = (Node)_brackets_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _brackets_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _brackets_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

    private class Brackets_Cast : Cast
    {
        AParamsMulti obj;

        internal Brackets_Cast (AParamsMulti obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PBrackets node = (PBrackets) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PBrackets node = (PBrackets) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneType : PType
{
    private TNumber _number_;

    public AOneType ()
    {
    }

    public AOneType (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new AOneType (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneType(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}
public sealed class ATwoType : PType
{
    private TString _string_;

    public ATwoType ()
    {
    }

    public ATwoType (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new ATwoType (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoType(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AThreeType : PType
{
    private TBoolean _boolean_;

    public AThreeType ()
    {
    }

    public AThreeType (
            TBoolean _boolean_
    )
    {
        SetBoolean (_boolean_);
    }

    public override Object Clone()
    {
        return new AThreeType (
            (TBoolean)CloneNode (_boolean_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeType(this);
    }

    public TBoolean GetBoolean ()
    {
        return _boolean_;
    }

    public void SetBoolean (TBoolean node)
    {
        if(_boolean_ != null)
        {
            _boolean_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_ == child )
        {
            _boolean_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_ == oldChild )
        {
            SetBoolean ((TBoolean) newChild);
            return;
        }
    }

}
public sealed class AOneStmt : PStmt
{
    private PIfstmt _ifstmt_;
    private TNl _nl_;

    public AOneStmt ()
    {
    }

    public AOneStmt (
            PIfstmt _ifstmt_,
            TNl _nl_
    )
    {
        SetIfstmt (_ifstmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AOneStmt (
            (PIfstmt)CloneNode (_ifstmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneStmt(this);
    }

    public PIfstmt GetIfstmt ()
    {
        return _ifstmt_;
    }

    public void SetIfstmt (PIfstmt node)
    {
        if(_ifstmt_ != null)
        {
            _ifstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifstmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ifstmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ifstmt_ == child )
        {
            _ifstmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ifstmt_ == oldChild )
        {
            SetIfstmt ((PIfstmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ATwoStmt : PStmt
{
    private PWhilestmt _whilestmt_;
    private TNl _nl_;

    public ATwoStmt ()
    {
    }

    public ATwoStmt (
            PWhilestmt _whilestmt_,
            TNl _nl_
    )
    {
        SetWhilestmt (_whilestmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoStmt (
            (PWhilestmt)CloneNode (_whilestmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoStmt(this);
    }

    public PWhilestmt GetWhilestmt ()
    {
        return _whilestmt_;
    }

    public void SetWhilestmt (PWhilestmt node)
    {
        if(_whilestmt_ != null)
        {
            _whilestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _whilestmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_whilestmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _whilestmt_ == child )
        {
            _whilestmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _whilestmt_ == oldChild )
        {
            SetWhilestmt ((PWhilestmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AThreeStmt : PStmt
{
    private PForstmt _forstmt_;
    private TNl _nl_;

    public AThreeStmt ()
    {
    }

    public AThreeStmt (
            PForstmt _forstmt_,
            TNl _nl_
    )
    {
        SetForstmt (_forstmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AThreeStmt (
            (PForstmt)CloneNode (_forstmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeStmt(this);
    }

    public PForstmt GetForstmt ()
    {
        return _forstmt_;
    }

    public void SetForstmt (PForstmt node)
    {
        if(_forstmt_ != null)
        {
            _forstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _forstmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_forstmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _forstmt_ == child )
        {
            _forstmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _forstmt_ == oldChild )
        {
            SetForstmt ((PForstmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AFourStmt : PStmt
{
    private PVardcl _vardcl_;
    private TNl _nl_;

    public AFourStmt ()
    {
    }

    public AFourStmt (
            PVardcl _vardcl_,
            TNl _nl_
    )
    {
        SetVardcl (_vardcl_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AFourStmt (
            (PVardcl)CloneNode (_vardcl_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourStmt(this);
    }

    public PVardcl GetVardcl ()
    {
        return _vardcl_;
    }

    public void SetVardcl (PVardcl node)
    {
        if(_vardcl_ != null)
        {
            _vardcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _vardcl_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_vardcl_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _vardcl_ == child )
        {
            _vardcl_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _vardcl_ == oldChild )
        {
            SetVardcl ((PVardcl) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AFiveStmt : PStmt
{
    private PAssstmt _assstmt_;
    private TNl _nl_;

    public AFiveStmt ()
    {
    }

    public AFiveStmt (
            PAssstmt _assstmt_,
            TNl _nl_
    )
    {
        SetAssstmt (_assstmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AFiveStmt (
            (PAssstmt)CloneNode (_assstmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFiveStmt(this);
    }

    public PAssstmt GetAssstmt ()
    {
        return _assstmt_;
    }

    public void SetAssstmt (PAssstmt node)
    {
        if(_assstmt_ != null)
        {
            _assstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assstmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assstmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assstmt_ == child )
        {
            _assstmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assstmt_ == oldChild )
        {
            SetAssstmt ((PAssstmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ASixStmt : PStmt
{
    private PFunccall _funccall_;
    private TNl _nl_;

    public ASixStmt ()
    {
    }

    public ASixStmt (
            PFunccall _funccall_,
            TNl _nl_
    )
    {
        SetFunccall (_funccall_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ASixStmt (
            (PFunccall)CloneNode (_funccall_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASixStmt(this);
    }

    public PFunccall GetFunccall ()
    {
        return _funccall_;
    }

    public void SetFunccall (PFunccall node)
    {
        if(_funccall_ != null)
        {
            _funccall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funccall_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funccall_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funccall_ == child )
        {
            _funccall_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funccall_ == oldChild )
        {
            SetFunccall ((PFunccall) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ASevenStmt : PStmt
{
    private PRetstmt _retstmt_;
    private TNl _nl_;

    public ASevenStmt ()
    {
    }

    public ASevenStmt (
            PRetstmt _retstmt_,
            TNl _nl_
    )
    {
        SetRetstmt (_retstmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ASevenStmt (
            (PRetstmt)CloneNode (_retstmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASevenStmt(this);
    }

    public PRetstmt GetRetstmt ()
    {
        return _retstmt_;
    }

    public void SetRetstmt (PRetstmt node)
    {
        if(_retstmt_ != null)
        {
            _retstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _retstmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_retstmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _retstmt_ == child )
        {
            _retstmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _retstmt_ == oldChild )
        {
            SetRetstmt ((PRetstmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AEightStmt : PStmt
{
    private PSwitchstmt _switchstmt_;
    private TNl _nl_;

    public AEightStmt ()
    {
    }

    public AEightStmt (
            PSwitchstmt _switchstmt_,
            TNl _nl_
    )
    {
        SetSwitchstmt (_switchstmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AEightStmt (
            (PSwitchstmt)CloneNode (_switchstmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEightStmt(this);
    }

    public PSwitchstmt GetSwitchstmt ()
    {
        return _switchstmt_;
    }

    public void SetSwitchstmt (PSwitchstmt node)
    {
        if(_switchstmt_ != null)
        {
            _switchstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _switchstmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_switchstmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _switchstmt_ == child )
        {
            _switchstmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _switchstmt_ == oldChild )
        {
            SetSwitchstmt ((PSwitchstmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ANineStmt : PStmt
{
    private PSkipstmt _skipstmt_;
    private TNl _nl_;

    public ANineStmt ()
    {
    }

    public ANineStmt (
            PSkipstmt _skipstmt_,
            TNl _nl_
    )
    {
        SetSkipstmt (_skipstmt_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ANineStmt (
            (PSkipstmt)CloneNode (_skipstmt_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANineStmt(this);
    }

    public PSkipstmt GetSkipstmt ()
    {
        return _skipstmt_;
    }

    public void SetSkipstmt (PSkipstmt node)
    {
        if(_skipstmt_ != null)
        {
            _skipstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _skipstmt_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_skipstmt_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _skipstmt_ == child )
        {
            _skipstmt_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _skipstmt_ == oldChild )
        {
            SetSkipstmt ((PSkipstmt) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ANonelseIfstmt : PIfstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PCond _cond_;
    private TRparen _rparen_;
    private TypedList _stmt_;
    private TEndif _endif_;

    public ANonelseIfstmt ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ANonelseIfstmt (
            TIf _if_,
            TLparen _lparen_,
            PCond _cond_,
            TRparen _rparen_,
            IList _stmt_,
            TEndif _endif_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetCond (_cond_);
        SetRparen (_rparen_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetEndif (_endif_);
    }

    public override Object Clone()
    {
        return new ANonelseIfstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PCond)CloneNode (_cond_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_stmt_),
            (TEndif)CloneNode (_endif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANonelseIfstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PCond GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PCond node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TEndif GetEndif ()
    {
        return _endif_;
    }

    public void SetEndif (TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_cond_)
            + ToString (_rparen_)
            + ToString (_stmt_)
            + ToString (_endif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _endif_ == child )
        {
            _endif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PCond) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endif_ == oldChild )
        {
            SetEndif ((TEndif) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        ANonelseIfstmt obj;

        internal Stmt_Cast (ANonelseIfstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWithelseIfstmt : PIfstmt
{
    private TIf _if_;
    private TLparen _lparen_;
    private PCond _cond_;
    private TRparen _rparen_;
    private TypedList _fst_;
    private TElse _else_;
    private TypedList _snd_;
    private TEndif _endif_;

    public AWithelseIfstmt ()
    {
        this._fst_ = new TypedList(new Fst_Cast(this));
        this._snd_ = new TypedList(new Snd_Cast(this));
    }

    public AWithelseIfstmt (
            TIf _if_,
            TLparen _lparen_,
            PCond _cond_,
            TRparen _rparen_,
            IList _fst_,
            TElse _else_,
            IList _snd_,
            TEndif _endif_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetCond (_cond_);
        SetRparen (_rparen_);
        this._fst_ = new TypedList(new Fst_Cast(this));
        this._fst_.Clear();
        this._fst_.AddAll(_fst_);
        SetElse (_else_);
        this._snd_ = new TypedList(new Snd_Cast(this));
        this._snd_.Clear();
        this._snd_.AddAll(_snd_);
        SetEndif (_endif_);
    }

    public override Object Clone()
    {
        return new AWithelseIfstmt (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PCond)CloneNode (_cond_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_fst_),
            (TElse)CloneNode (_else_),
            CloneList (_snd_),
            (TEndif)CloneNode (_endif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWithelseIfstmt(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PCond GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PCond node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetFst ()
    {
        return _fst_;
    }

    public void setFst (IList list)
    {
        _fst_.Clear();
        _fst_.AddAll(list);
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public IList GetSnd ()
    {
        return _snd_;
    }

    public void setSnd (IList list)
    {
        _snd_.Clear();
        _snd_.AddAll(list);
    }
    public TEndif GetEndif ()
    {
        return _endif_;
    }

    public void SetEndif (TEndif node)
    {
        if(_endif_ != null)
        {
            _endif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_cond_)
            + ToString (_rparen_)
            + ToString (_fst_)
            + ToString (_else_)
            + ToString (_snd_)
            + ToString (_endif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _fst_.Contains(child) )
        {
            _fst_.Remove(child);
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _snd_.Contains(child) )
        {
            _snd_.Remove(child);
            return;
        }
        if ( _endif_ == child )
        {
            _endif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PCond) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _fst_.Count; i++ )
        {
            Node n = (Node)_fst_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _fst_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _fst_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        for ( int i = 0; i < _snd_.Count; i++ )
        {
            Node n = (Node)_snd_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _snd_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _snd_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endif_ == oldChild )
        {
            SetEndif ((TEndif) newChild);
            return;
        }
    }

    private class Fst_Cast : Cast
    {
        AWithelseIfstmt obj;

        internal Fst_Cast (AWithelseIfstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
    private class Snd_Cast : Cast
    {
        AWithelseIfstmt obj;

        internal Snd_Cast (AWithelseIfstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWhilestmt : PWhilestmt
{
    private TRepeatwhile _repeatwhile_;
    private TLparen _lparen_;
    private PCond _cond_;
    private TRparen _rparen_;
    private TypedList _option_stmt_continue_break_;
    private TEndwhile _endwhile_;

    public AWhilestmt ()
    {
        this._option_stmt_continue_break_ = new TypedList(new OptionStmtContinueBreak_Cast(this));
    }

    public AWhilestmt (
            TRepeatwhile _repeatwhile_,
            TLparen _lparen_,
            PCond _cond_,
            TRparen _rparen_,
            IList _option_stmt_continue_break_,
            TEndwhile _endwhile_
    )
    {
        SetRepeatwhile (_repeatwhile_);
        SetLparen (_lparen_);
        SetCond (_cond_);
        SetRparen (_rparen_);
        this._option_stmt_continue_break_ = new TypedList(new OptionStmtContinueBreak_Cast(this));
        this._option_stmt_continue_break_.Clear();
        this._option_stmt_continue_break_.AddAll(_option_stmt_continue_break_);
        SetEndwhile (_endwhile_);
    }

    public override Object Clone()
    {
        return new AWhilestmt (
            (TRepeatwhile)CloneNode (_repeatwhile_),
            (TLparen)CloneNode (_lparen_),
            (PCond)CloneNode (_cond_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_option_stmt_continue_break_),
            (TEndwhile)CloneNode (_endwhile_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhilestmt(this);
    }

    public TRepeatwhile GetRepeatwhile ()
    {
        return _repeatwhile_;
    }

    public void SetRepeatwhile (TRepeatwhile node)
    {
        if(_repeatwhile_ != null)
        {
            _repeatwhile_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _repeatwhile_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PCond GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PCond node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetOptionStmtContinueBreak ()
    {
        return _option_stmt_continue_break_;
    }

    public void setOptionStmtContinueBreak (IList list)
    {
        _option_stmt_continue_break_.Clear();
        _option_stmt_continue_break_.AddAll(list);
    }
    public TEndwhile GetEndwhile ()
    {
        return _endwhile_;
    }

    public void SetEndwhile (TEndwhile node)
    {
        if(_endwhile_ != null)
        {
            _endwhile_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endwhile_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_repeatwhile_)
            + ToString (_lparen_)
            + ToString (_cond_)
            + ToString (_rparen_)
            + ToString (_option_stmt_continue_break_)
            + ToString (_endwhile_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _repeatwhile_ == child )
        {
            _repeatwhile_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _option_stmt_continue_break_.Contains(child) )
        {
            _option_stmt_continue_break_.Remove(child);
            return;
        }
        if ( _endwhile_ == child )
        {
            _endwhile_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _repeatwhile_ == oldChild )
        {
            SetRepeatwhile ((TRepeatwhile) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PCond) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _option_stmt_continue_break_.Count; i++ )
        {
            Node n = (Node)_option_stmt_continue_break_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _option_stmt_continue_break_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _option_stmt_continue_break_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endwhile_ == oldChild )
        {
            SetEndwhile ((TEndwhile) newChild);
            return;
        }
    }

    private class OptionStmtContinueBreak_Cast : Cast
    {
        AWhilestmt obj;

        internal OptionStmtContinueBreak_Cast (AWhilestmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            POptionStmtContinueBreak node = (POptionStmtContinueBreak) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            POptionStmtContinueBreak node = (POptionStmtContinueBreak) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneOptionStmtContinueBreak : POptionStmtContinueBreak
{
    private PStmt _stmt_;

    public AOneOptionStmtContinueBreak ()
    {
    }

    public AOneOptionStmtContinueBreak (
            PStmt _stmt_
    )
    {
        SetStmt (_stmt_);
    }

    public override Object Clone()
    {
        return new AOneOptionStmtContinueBreak (
            (PStmt)CloneNode (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneOptionStmtContinueBreak(this);
    }

    public PStmt GetStmt ()
    {
        return _stmt_;
    }

    public void SetStmt (PStmt node)
    {
        if(_stmt_ != null)
        {
            _stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmt_ == child )
        {
            _stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmt_ == oldChild )
        {
            SetStmt ((PStmt) newChild);
            return;
        }
    }

}
public sealed class ATwoOptionStmtContinueBreak : POptionStmtContinueBreak
{
    private TContinue _continue_;
    private TNl _nl_;

    public ATwoOptionStmtContinueBreak ()
    {
    }

    public ATwoOptionStmtContinueBreak (
            TContinue _continue_,
            TNl _nl_
    )
    {
        SetContinue (_continue_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ATwoOptionStmtContinueBreak (
            (TContinue)CloneNode (_continue_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoOptionStmtContinueBreak(this);
    }

    public TContinue GetContinue ()
    {
        return _continue_;
    }

    public void SetContinue (TContinue node)
    {
        if(_continue_ != null)
        {
            _continue_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _continue_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_continue_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _continue_ == child )
        {
            _continue_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _continue_ == oldChild )
        {
            SetContinue ((TContinue) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AThreeOptionStmtContinueBreak : POptionStmtContinueBreak
{
    private TBreak _break_;
    private TNl _nl_;

    public AThreeOptionStmtContinueBreak ()
    {
    }

    public AThreeOptionStmtContinueBreak (
            TBreak _break_,
            TNl _nl_
    )
    {
        SetBreak (_break_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AThreeOptionStmtContinueBreak (
            (TBreak)CloneNode (_break_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeOptionStmtContinueBreak(this);
    }

    public TBreak GetBreak ()
    {
        return _break_;
    }

    public void SetBreak (TBreak node)
    {
        if(_break_ != null)
        {
            _break_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _break_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_break_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _break_ == child )
        {
            _break_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _break_ == oldChild )
        {
            SetBreak ((TBreak) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AForstmt : PForstmt
{
    private TRepeatfor _repeatfor_;
    private TLparen _lparen_;
    private PForstmtIteratorOptions _forstmt_iterator_options_;
    private TTo _to_;
    private PExpr _fst_;
    private TComma _comma_;
    private POptionIncreaseDecrease _option_increase_decrease_;
    private PExpr _snd_;
    private TRparen _rparen_;
    private TypedList _option_stmt_continue_break_;
    private TEndfor _endfor_;

    public AForstmt ()
    {
        this._option_stmt_continue_break_ = new TypedList(new OptionStmtContinueBreak_Cast(this));
    }

    public AForstmt (
            TRepeatfor _repeatfor_,
            TLparen _lparen_,
            PForstmtIteratorOptions _forstmt_iterator_options_,
            TTo _to_,
            PExpr _fst_,
            TComma _comma_,
            POptionIncreaseDecrease _option_increase_decrease_,
            PExpr _snd_,
            TRparen _rparen_,
            IList _option_stmt_continue_break_,
            TEndfor _endfor_
    )
    {
        SetRepeatfor (_repeatfor_);
        SetLparen (_lparen_);
        SetForstmtIteratorOptions (_forstmt_iterator_options_);
        SetTo (_to_);
        SetFst (_fst_);
        SetComma (_comma_);
        SetOptionIncreaseDecrease (_option_increase_decrease_);
        SetSnd (_snd_);
        SetRparen (_rparen_);
        this._option_stmt_continue_break_ = new TypedList(new OptionStmtContinueBreak_Cast(this));
        this._option_stmt_continue_break_.Clear();
        this._option_stmt_continue_break_.AddAll(_option_stmt_continue_break_);
        SetEndfor (_endfor_);
    }

    public override Object Clone()
    {
        return new AForstmt (
            (TRepeatfor)CloneNode (_repeatfor_),
            (TLparen)CloneNode (_lparen_),
            (PForstmtIteratorOptions)CloneNode (_forstmt_iterator_options_),
            (TTo)CloneNode (_to_),
            (PExpr)CloneNode (_fst_),
            (TComma)CloneNode (_comma_),
            (POptionIncreaseDecrease)CloneNode (_option_increase_decrease_),
            (PExpr)CloneNode (_snd_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_option_stmt_continue_break_),
            (TEndfor)CloneNode (_endfor_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAForstmt(this);
    }

    public TRepeatfor GetRepeatfor ()
    {
        return _repeatfor_;
    }

    public void SetRepeatfor (TRepeatfor node)
    {
        if(_repeatfor_ != null)
        {
            _repeatfor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _repeatfor_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PForstmtIteratorOptions GetForstmtIteratorOptions ()
    {
        return _forstmt_iterator_options_;
    }

    public void SetForstmtIteratorOptions (PForstmtIteratorOptions node)
    {
        if(_forstmt_iterator_options_ != null)
        {
            _forstmt_iterator_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _forstmt_iterator_options_ = node;
    }
    public TTo GetTo ()
    {
        return _to_;
    }

    public void SetTo (TTo node)
    {
        if(_to_ != null)
        {
            _to_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _to_ = node;
    }
    public PExpr GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PExpr node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public POptionIncreaseDecrease GetOptionIncreaseDecrease ()
    {
        return _option_increase_decrease_;
    }

    public void SetOptionIncreaseDecrease (POptionIncreaseDecrease node)
    {
        if(_option_increase_decrease_ != null)
        {
            _option_increase_decrease_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _option_increase_decrease_ = node;
    }
    public PExpr GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PExpr node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetOptionStmtContinueBreak ()
    {
        return _option_stmt_continue_break_;
    }

    public void setOptionStmtContinueBreak (IList list)
    {
        _option_stmt_continue_break_.Clear();
        _option_stmt_continue_break_.AddAll(list);
    }
    public TEndfor GetEndfor ()
    {
        return _endfor_;
    }

    public void SetEndfor (TEndfor node)
    {
        if(_endfor_ != null)
        {
            _endfor_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endfor_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_repeatfor_)
            + ToString (_lparen_)
            + ToString (_forstmt_iterator_options_)
            + ToString (_to_)
            + ToString (_fst_)
            + ToString (_comma_)
            + ToString (_option_increase_decrease_)
            + ToString (_snd_)
            + ToString (_rparen_)
            + ToString (_option_stmt_continue_break_)
            + ToString (_endfor_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _repeatfor_ == child )
        {
            _repeatfor_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _forstmt_iterator_options_ == child )
        {
            _forstmt_iterator_options_ = null;
            return;
        }
        if ( _to_ == child )
        {
            _to_ = null;
            return;
        }
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _option_increase_decrease_ == child )
        {
            _option_increase_decrease_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _option_stmt_continue_break_.Contains(child) )
        {
            _option_stmt_continue_break_.Remove(child);
            return;
        }
        if ( _endfor_ == child )
        {
            _endfor_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _repeatfor_ == oldChild )
        {
            SetRepeatfor ((TRepeatfor) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _forstmt_iterator_options_ == oldChild )
        {
            SetForstmtIteratorOptions ((PForstmtIteratorOptions) newChild);
            return;
        }
        if ( _to_ == oldChild )
        {
            SetTo ((TTo) newChild);
            return;
        }
        if ( _fst_ == oldChild )
        {
            SetFst ((PExpr) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _option_increase_decrease_ == oldChild )
        {
            SetOptionIncreaseDecrease ((POptionIncreaseDecrease) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PExpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _option_stmt_continue_break_.Count; i++ )
        {
            Node n = (Node)_option_stmt_continue_break_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _option_stmt_continue_break_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _option_stmt_continue_break_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _endfor_ == oldChild )
        {
            SetEndfor ((TEndfor) newChild);
            return;
        }
    }

    private class OptionStmtContinueBreak_Cast : Cast
    {
        AForstmt obj;

        internal OptionStmtContinueBreak_Cast (AForstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            POptionStmtContinueBreak node = (POptionStmtContinueBreak) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            POptionStmtContinueBreak node = (POptionStmtContinueBreak) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneForstmtIteratorOptions : PForstmtIteratorOptions
{
    private PNumdcl _numdcl_;

    public AOneForstmtIteratorOptions ()
    {
    }

    public AOneForstmtIteratorOptions (
            PNumdcl _numdcl_
    )
    {
        SetNumdcl (_numdcl_);
    }

    public override Object Clone()
    {
        return new AOneForstmtIteratorOptions (
            (PNumdcl)CloneNode (_numdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneForstmtIteratorOptions(this);
    }

    public PNumdcl GetNumdcl ()
    {
        return _numdcl_;
    }

    public void SetNumdcl (PNumdcl node)
    {
        if(_numdcl_ != null)
        {
            _numdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numdcl_ == child )
        {
            _numdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numdcl_ == oldChild )
        {
            SetNumdcl ((PNumdcl) newChild);
            return;
        }
    }

}
public sealed class ATwoForstmtIteratorOptions : PForstmtIteratorOptions
{
    private PAssstmt _assstmt_;

    public ATwoForstmtIteratorOptions ()
    {
    }

    public ATwoForstmtIteratorOptions (
            PAssstmt _assstmt_
    )
    {
        SetAssstmt (_assstmt_);
    }

    public override Object Clone()
    {
        return new ATwoForstmtIteratorOptions (
            (PAssstmt)CloneNode (_assstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoForstmtIteratorOptions(this);
    }

    public PAssstmt GetAssstmt ()
    {
        return _assstmt_;
    }

    public void SetAssstmt (PAssstmt node)
    {
        if(_assstmt_ != null)
        {
            _assstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assstmt_ == child )
        {
            _assstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assstmt_ == oldChild )
        {
            SetAssstmt ((PAssstmt) newChild);
            return;
        }
    }

}
public sealed class AThreeForstmtIteratorOptions : PForstmtIteratorOptions
{
    private TId _id_;
    private PArrindex _arrindex_;

    public AThreeForstmtIteratorOptions ()
    {
    }

    public AThreeForstmtIteratorOptions (
            TId _id_,
            PArrindex _arrindex_
    )
    {
        SetId (_id_);
        SetArrindex (_arrindex_);
    }

    public override Object Clone()
    {
        return new AThreeForstmtIteratorOptions (
            (TId)CloneNode (_id_),
            (PArrindex)CloneNode (_arrindex_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeForstmtIteratorOptions(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PArrindex GetArrindex ()
    {
        return _arrindex_;
    }

    public void SetArrindex (PArrindex node)
    {
        if(_arrindex_ != null)
        {
            _arrindex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrindex_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_arrindex_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrindex_ == child )
        {
            _arrindex_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrindex_ == oldChild )
        {
            SetArrindex ((PArrindex) newChild);
            return;
        }
    }

}
public sealed class AOneOptionIncreaseDecrease : POptionIncreaseDecrease
{
    private TIncreaseby _increaseby_;

    public AOneOptionIncreaseDecrease ()
    {
    }

    public AOneOptionIncreaseDecrease (
            TIncreaseby _increaseby_
    )
    {
        SetIncreaseby (_increaseby_);
    }

    public override Object Clone()
    {
        return new AOneOptionIncreaseDecrease (
            (TIncreaseby)CloneNode (_increaseby_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneOptionIncreaseDecrease(this);
    }

    public TIncreaseby GetIncreaseby ()
    {
        return _increaseby_;
    }

    public void SetIncreaseby (TIncreaseby node)
    {
        if(_increaseby_ != null)
        {
            _increaseby_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _increaseby_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_increaseby_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _increaseby_ == child )
        {
            _increaseby_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _increaseby_ == oldChild )
        {
            SetIncreaseby ((TIncreaseby) newChild);
            return;
        }
    }

}
public sealed class ATwoOptionIncreaseDecrease : POptionIncreaseDecrease
{
    private TDecreaseby _decreaseby_;

    public ATwoOptionIncreaseDecrease ()
    {
    }

    public ATwoOptionIncreaseDecrease (
            TDecreaseby _decreaseby_
    )
    {
        SetDecreaseby (_decreaseby_);
    }

    public override Object Clone()
    {
        return new ATwoOptionIncreaseDecrease (
            (TDecreaseby)CloneNode (_decreaseby_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoOptionIncreaseDecrease(this);
    }

    public TDecreaseby GetDecreaseby ()
    {
        return _decreaseby_;
    }

    public void SetDecreaseby (TDecreaseby node)
    {
        if(_decreaseby_ != null)
        {
            _decreaseby_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decreaseby_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decreaseby_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decreaseby_ == child )
        {
            _decreaseby_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decreaseby_ == oldChild )
        {
            SetDecreaseby ((TDecreaseby) newChild);
            return;
        }
    }

}
public sealed class ASwitchstmt : PSwitchstmt
{
    private TSwitch _switch_;
    private TLparen _lparen_;
    private TId _id_;
    private PArrindex _arrindex_;
    private TRparen _rparen_;
    private TypedList _whencase_;
    private POtherwisecase _otherwisecase_;
    private TEndswitch _endswitch_;

    public ASwitchstmt ()
    {
        this._whencase_ = new TypedList(new Whencase_Cast(this));
    }

    public ASwitchstmt (
            TSwitch _switch_,
            TLparen _lparen_,
            TId _id_,
            PArrindex _arrindex_,
            TRparen _rparen_,
            IList _whencase_,
            POtherwisecase _otherwisecase_,
            TEndswitch _endswitch_
    )
    {
        SetSwitch (_switch_);
        SetLparen (_lparen_);
        SetId (_id_);
        SetArrindex (_arrindex_);
        SetRparen (_rparen_);
        this._whencase_ = new TypedList(new Whencase_Cast(this));
        this._whencase_.Clear();
        this._whencase_.AddAll(_whencase_);
        SetOtherwisecase (_otherwisecase_);
        SetEndswitch (_endswitch_);
    }

    public override Object Clone()
    {
        return new ASwitchstmt (
            (TSwitch)CloneNode (_switch_),
            (TLparen)CloneNode (_lparen_),
            (TId)CloneNode (_id_),
            (PArrindex)CloneNode (_arrindex_),
            (TRparen)CloneNode (_rparen_),
            CloneList (_whencase_),
            (POtherwisecase)CloneNode (_otherwisecase_),
            (TEndswitch)CloneNode (_endswitch_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASwitchstmt(this);
    }

    public TSwitch GetSwitch ()
    {
        return _switch_;
    }

    public void SetSwitch (TSwitch node)
    {
        if(_switch_ != null)
        {
            _switch_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _switch_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PArrindex GetArrindex ()
    {
        return _arrindex_;
    }

    public void SetArrindex (PArrindex node)
    {
        if(_arrindex_ != null)
        {
            _arrindex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrindex_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public IList GetWhencase ()
    {
        return _whencase_;
    }

    public void setWhencase (IList list)
    {
        _whencase_.Clear();
        _whencase_.AddAll(list);
    }
    public POtherwisecase GetOtherwisecase ()
    {
        return _otherwisecase_;
    }

    public void SetOtherwisecase (POtherwisecase node)
    {
        if(_otherwisecase_ != null)
        {
            _otherwisecase_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _otherwisecase_ = node;
    }
    public TEndswitch GetEndswitch ()
    {
        return _endswitch_;
    }

    public void SetEndswitch (TEndswitch node)
    {
        if(_endswitch_ != null)
        {
            _endswitch_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _endswitch_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_switch_)
            + ToString (_lparen_)
            + ToString (_id_)
            + ToString (_arrindex_)
            + ToString (_rparen_)
            + ToString (_whencase_)
            + ToString (_otherwisecase_)
            + ToString (_endswitch_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _switch_ == child )
        {
            _switch_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrindex_ == child )
        {
            _arrindex_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _whencase_.Contains(child) )
        {
            _whencase_.Remove(child);
            return;
        }
        if ( _otherwisecase_ == child )
        {
            _otherwisecase_ = null;
            return;
        }
        if ( _endswitch_ == child )
        {
            _endswitch_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _switch_ == oldChild )
        {
            SetSwitch ((TSwitch) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrindex_ == oldChild )
        {
            SetArrindex ((PArrindex) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        for ( int i = 0; i < _whencase_.Count; i++ )
        {
            Node n = (Node)_whencase_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _whencase_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _whencase_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _otherwisecase_ == oldChild )
        {
            SetOtherwisecase ((POtherwisecase) newChild);
            return;
        }
        if ( _endswitch_ == oldChild )
        {
            SetEndswitch ((TEndswitch) newChild);
            return;
        }
    }

    private class Whencase_Cast : Cast
    {
        ASwitchstmt obj;

        internal Whencase_Cast (ASwitchstmt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PWhencase node = (PWhencase) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PWhencase node = (PWhencase) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AWhencase : PWhencase
{
    private TWhen _when_;
    private TNumliteral _numliteral_;
    private TDo _do_;
    private TypedList _stmt_;
    private TFallthrough _fallthrough_;

    public AWhencase ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public AWhencase (
            TWhen _when_,
            TNumliteral _numliteral_,
            TDo _do_,
            IList _stmt_,
            TFallthrough _fallthrough_
    )
    {
        SetWhen (_when_);
        SetNumliteral (_numliteral_);
        SetDo (_do_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
        SetFallthrough (_fallthrough_);
    }

    public override Object Clone()
    {
        return new AWhencase (
            (TWhen)CloneNode (_when_),
            (TNumliteral)CloneNode (_numliteral_),
            (TDo)CloneNode (_do_),
            CloneList (_stmt_),
            (TFallthrough)CloneNode (_fallthrough_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhencase(this);
    }

    public TWhen GetWhen ()
    {
        return _when_;
    }

    public void SetWhen (TWhen node)
    {
        if(_when_ != null)
        {
            _when_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _when_ = node;
    }
    public TNumliteral GetNumliteral ()
    {
        return _numliteral_;
    }

    public void SetNumliteral (TNumliteral node)
    {
        if(_numliteral_ != null)
        {
            _numliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numliteral_ = node;
    }
    public TDo GetDo ()
    {
        return _do_;
    }

    public void SetDo (TDo node)
    {
        if(_do_ != null)
        {
            _do_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _do_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }
    public TFallthrough GetFallthrough ()
    {
        return _fallthrough_;
    }

    public void SetFallthrough (TFallthrough node)
    {
        if(_fallthrough_ != null)
        {
            _fallthrough_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fallthrough_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_when_)
            + ToString (_numliteral_)
            + ToString (_do_)
            + ToString (_stmt_)
            + ToString (_fallthrough_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _when_ == child )
        {
            _when_ = null;
            return;
        }
        if ( _numliteral_ == child )
        {
            _numliteral_ = null;
            return;
        }
        if ( _do_ == child )
        {
            _do_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
        if ( _fallthrough_ == child )
        {
            _fallthrough_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _when_ == oldChild )
        {
            SetWhen ((TWhen) newChild);
            return;
        }
        if ( _numliteral_ == oldChild )
        {
            SetNumliteral ((TNumliteral) newChild);
            return;
        }
        if ( _do_ == oldChild )
        {
            SetDo ((TDo) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _fallthrough_ == oldChild )
        {
            SetFallthrough ((TFallthrough) newChild);
            return;
        }
    }

    private class Stmt_Cast : Cast
    {
        AWhencase obj;

        internal Stmt_Cast (AWhencase obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOtherwisecase : POtherwisecase
{
    private TOtherwisedo _otherwisedo_;
    private TypedList _stmt_;

    public AOtherwisecase ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public AOtherwisecase (
            TOtherwisedo _otherwisedo_,
            IList _stmt_
    )
    {
        SetOtherwisedo (_otherwisedo_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
    }

    public override Object Clone()
    {
        return new AOtherwisecase (
            (TOtherwisedo)CloneNode (_otherwisedo_),
            CloneList (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOtherwisecase(this);
    }

    public TOtherwisedo GetOtherwisedo ()
    {
        return _otherwisedo_;
    }

    public void SetOtherwisedo (TOtherwisedo node)
    {
        if(_otherwisedo_ != null)
        {
            _otherwisedo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _otherwisedo_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_otherwisedo_)
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _otherwisedo_ == child )
        {
            _otherwisedo_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _otherwisedo_ == oldChild )
        {
            SetOtherwisedo ((TOtherwisedo) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Stmt_Cast : Cast
    {
        AOtherwisecase obj;

        internal Stmt_Cast (AOtherwisecase obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAssstmt : PAssstmt
{
    private TId _id_;
    private PArrindex _arrindex_;
    private TAssign _assign_;
    private PExpr _expr_;

    public AAssstmt ()
    {
    }

    public AAssstmt (
            TId _id_,
            PArrindex _arrindex_,
            TAssign _assign_,
            PExpr _expr_
    )
    {
        SetId (_id_);
        SetArrindex (_arrindex_);
        SetAssign (_assign_);
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AAssstmt (
            (TId)CloneNode (_id_),
            (PArrindex)CloneNode (_arrindex_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssstmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PArrindex GetArrindex ()
    {
        return _arrindex_;
    }

    public void SetArrindex (PArrindex node)
    {
        if(_arrindex_ != null)
        {
            _arrindex_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrindex_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_arrindex_)
            + ToString (_assign_)
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrindex_ == child )
        {
            _arrindex_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrindex_ == oldChild )
        {
            SetArrindex ((PArrindex) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AFunccall : PFunccall
{
    private TId _id_;
    private TLparen _lparen_;
    private PParamsOptions _params_options_;
    private TRparen _rparen_;

    public AFunccall ()
    {
    }

    public AFunccall (
            TId _id_,
            TLparen _lparen_,
            PParamsOptions _params_options_,
            TRparen _rparen_
    )
    {
        SetId (_id_);
        SetLparen (_lparen_);
        SetParamsOptions (_params_options_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AFunccall (
            (TId)CloneNode (_id_),
            (TLparen)CloneNode (_lparen_),
            (PParamsOptions)CloneNode (_params_options_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunccall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PParamsOptions GetParamsOptions ()
    {
        return _params_options_;
    }

    public void SetParamsOptions (PParamsOptions node)
    {
        if(_params_options_ != null)
        {
            _params_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_options_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_lparen_)
            + ToString (_params_options_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _params_options_ == child )
        {
            _params_options_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _params_options_ == oldChild )
        {
            SetParamsOptions ((PParamsOptions) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AParamsOptions : PParamsOptions
{
    private PExpr _expr_;
    private TypedList _multi_expr_;

    public AParamsOptions ()
    {
        this._multi_expr_ = new TypedList(new MultiExpr_Cast(this));
    }

    public AParamsOptions (
            PExpr _expr_,
            IList _multi_expr_
    )
    {
        SetExpr (_expr_);
        this._multi_expr_ = new TypedList(new MultiExpr_Cast(this));
        this._multi_expr_.Clear();
        this._multi_expr_.AddAll(_multi_expr_);
    }

    public override Object Clone()
    {
        return new AParamsOptions (
            (PExpr)CloneNode (_expr_),
            CloneList (_multi_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsOptions(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public IList GetMultiExpr ()
    {
        return _multi_expr_;
    }

    public void setMultiExpr (IList list)
    {
        _multi_expr_.Clear();
        _multi_expr_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_multi_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _multi_expr_.Contains(child) )
        {
            _multi_expr_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        for ( int i = 0; i < _multi_expr_.Count; i++ )
        {
            Node n = (Node)_multi_expr_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _multi_expr_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _multi_expr_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class MultiExpr_Cast : Cast
    {
        AParamsOptions obj;

        internal MultiExpr_Cast (AParamsOptions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PMultiExpr node = (PMultiExpr) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PMultiExpr node = (PMultiExpr) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AMultiExpr : PMultiExpr
{
    private TComma _comma_;
    private PExpr _expr_;

    public AMultiExpr ()
    {
    }

    public AMultiExpr (
            TComma _comma_,
            PExpr _expr_
    )
    {
        SetComma (_comma_);
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AMultiExpr (
            (TComma)CloneNode (_comma_),
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiExpr(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AOneRetstmt : PRetstmt
{
    private TReturn _return_;
    private PCond _cond_;

    public AOneRetstmt ()
    {
    }

    public AOneRetstmt (
            TReturn _return_,
            PCond _cond_
    )
    {
        SetReturn (_return_);
        SetCond (_cond_);
    }

    public override Object Clone()
    {
        return new AOneRetstmt (
            (TReturn)CloneNode (_return_),
            (PCond)CloneNode (_cond_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneRetstmt(this);
    }

    public TReturn GetReturn ()
    {
        return _return_;
    }

    public void SetReturn (TReturn node)
    {
        if(_return_ != null)
        {
            _return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_ = node;
    }
    public PCond GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PCond node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_return_)
            + ToString (_cond_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _return_ == child )
        {
            _return_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _return_ == oldChild )
        {
            SetReturn ((TReturn) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PCond) newChild);
            return;
        }
    }

}
public sealed class AArrindex : PArrindex
{
    private TLbrack _lbrack_;
    private PExpr _expr_;
    private TRbrack _rbrack_;

    public AArrindex ()
    {
    }

    public AArrindex (
            TLbrack _lbrack_,
            PExpr _expr_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetExpr (_expr_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new AArrindex (
            (TLbrack)CloneNode (_lbrack_),
            (PExpr)CloneNode (_expr_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrindex(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_expr_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}
public sealed class ASkipstmt : PSkipstmt
{
    private TNl _nl_;

    public ASkipstmt ()
    {
    }

    public ASkipstmt (
            TNl _nl_
    )
    {
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ASkipstmt (
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASkipstmt(this);
    }

    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AOneExpr : PExpr
{
    private PValue _value_;

    public AOneExpr ()
    {
    }

    public AOneExpr (
            PValue _value_
    )
    {
        SetValue (_value_);
    }

    public override Object Clone()
    {
        return new AOneExpr (
            (PValue)CloneNode (_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneExpr(this);
    }

    public PValue GetValue ()
    {
        return _value_;
    }

    public void SetValue (PValue node)
    {
        if(_value_ != null)
        {
            _value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _value_ == child )
        {
            _value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _value_ == oldChild )
        {
            SetValue ((PValue) newChild);
            return;
        }
    }

}
public sealed class ATwoExpr : PExpr
{
    private PValue _left_;
    private TPlus _plus_;
    private PValue _right_;

    public ATwoExpr ()
    {
    }

    public ATwoExpr (
            PValue _left_,
            TPlus _plus_,
            PValue _right_
    )
    {
        SetLeft (_left_);
        SetPlus (_plus_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ATwoExpr (
            (PValue)CloneNode (_left_),
            (TPlus)CloneNode (_plus_),
            (PValue)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoExpr(this);
    }

    public PValue GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PValue node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PValue GetRight ()
    {
        return _right_;
    }

    public void SetRight (PValue node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_plus_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PValue) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PValue) newChild);
            return;
        }
    }

}
public sealed class AThreeExpr : PExpr
{
    private PValue _left_;
    private TMinus _minus_;
    private PValue _right_;

    public AThreeExpr ()
    {
    }

    public AThreeExpr (
            PValue _left_,
            TMinus _minus_,
            PValue _right_
    )
    {
        SetLeft (_left_);
        SetMinus (_minus_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AThreeExpr (
            (PValue)CloneNode (_left_),
            (TMinus)CloneNode (_minus_),
            (PValue)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeExpr(this);
    }

    public PValue GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PValue node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PValue GetRight ()
    {
        return _right_;
    }

    public void SetRight (PValue node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_minus_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PValue) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PValue) newChild);
            return;
        }
    }

}
public sealed class AFourExpr : PExpr
{
    private PValue _left_;
    private TMult _mult_;
    private PValue _right_;

    public AFourExpr ()
    {
    }

    public AFourExpr (
            PValue _left_,
            TMult _mult_,
            PValue _right_
    )
    {
        SetLeft (_left_);
        SetMult (_mult_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AFourExpr (
            (PValue)CloneNode (_left_),
            (TMult)CloneNode (_mult_),
            (PValue)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourExpr(this);
    }

    public PValue GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PValue node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PValue GetRight ()
    {
        return _right_;
    }

    public void SetRight (PValue node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_mult_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PValue) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PValue) newChild);
            return;
        }
    }

}
public sealed class AFiveExpr : PExpr
{
    private PValue _left_;
    private TDivide _divide_;
    private PValue _right_;

    public AFiveExpr ()
    {
    }

    public AFiveExpr (
            PValue _left_,
            TDivide _divide_,
            PValue _right_
    )
    {
        SetLeft (_left_);
        SetDivide (_divide_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AFiveExpr (
            (PValue)CloneNode (_left_),
            (TDivide)CloneNode (_divide_),
            (PValue)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFiveExpr(this);
    }

    public PValue GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PValue node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PValue GetRight ()
    {
        return _right_;
    }

    public void SetRight (PValue node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_divide_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PValue) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PValue) newChild);
            return;
        }
    }

}
public sealed class ASixExpr : PExpr
{
    private PValue _left_;
    private TPow _pow_;
    private PValue _right_;

    public ASixExpr ()
    {
    }

    public ASixExpr (
            PValue _left_,
            TPow _pow_,
            PValue _right_
    )
    {
        SetLeft (_left_);
        SetPow (_pow_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ASixExpr (
            (PValue)CloneNode (_left_),
            (TPow)CloneNode (_pow_),
            (PValue)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASixExpr(this);
    }

    public PValue GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PValue node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TPow GetPow ()
    {
        return _pow_;
    }

    public void SetPow (TPow node)
    {
        if(_pow_ != null)
        {
            _pow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _pow_ = node;
    }
    public PValue GetRight ()
    {
        return _right_;
    }

    public void SetRight (PValue node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_pow_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _pow_ == child )
        {
            _pow_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PValue) newChild);
            return;
        }
        if ( _pow_ == oldChild )
        {
            SetPow ((TPow) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PValue) newChild);
            return;
        }
    }

}
public sealed class AOneValue : PValue
{
    private PConstant _constant_;

    public AOneValue ()
    {
    }

    public AOneValue (
            PConstant _constant_
    )
    {
        SetConstant (_constant_);
    }

    public override Object Clone()
    {
        return new AOneValue (
            (PConstant)CloneNode (_constant_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneValue(this);
    }

    public PConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (PConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((PConstant) newChild);
            return;
        }
    }

}
public sealed class ATwoValue : PValue
{
    private TId _id_;

    public ATwoValue ()
    {
    }

    public ATwoValue (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ATwoValue (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoValue(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AThreeValue : PValue
{
    private TLparen _lparen_;
    private PExpr _expr_;
    private TRparen _rparen_;

    public AThreeValue ()
    {
    }

    public AThreeValue (
            TLparen _lparen_,
            PExpr _expr_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetExpr (_expr_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AThreeValue (
            (TLparen)CloneNode (_lparen_),
            (PExpr)CloneNode (_expr_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeValue(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_expr_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AOneConstant : PConstant
{
    private TNumliteral _numliteral_;

    public AOneConstant ()
    {
    }

    public AOneConstant (
            TNumliteral _numliteral_
    )
    {
        SetNumliteral (_numliteral_);
    }

    public override Object Clone()
    {
        return new AOneConstant (
            (TNumliteral)CloneNode (_numliteral_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneConstant(this);
    }

    public TNumliteral GetNumliteral ()
    {
        return _numliteral_;
    }

    public void SetNumliteral (TNumliteral node)
    {
        if(_numliteral_ != null)
        {
            _numliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numliteral_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numliteral_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numliteral_ == child )
        {
            _numliteral_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numliteral_ == oldChild )
        {
            SetNumliteral ((TNumliteral) newChild);
            return;
        }
    }

}
public sealed class ATwoConstant : PConstant
{
    private TStrliteral _strliteral_;

    public ATwoConstant ()
    {
    }

    public ATwoConstant (
            TStrliteral _strliteral_
    )
    {
        SetStrliteral (_strliteral_);
    }

    public override Object Clone()
    {
        return new ATwoConstant (
            (TStrliteral)CloneNode (_strliteral_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoConstant(this);
    }

    public TStrliteral GetStrliteral ()
    {
        return _strliteral_;
    }

    public void SetStrliteral (TStrliteral node)
    {
        if(_strliteral_ != null)
        {
            _strliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _strliteral_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_strliteral_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _strliteral_ == child )
        {
            _strliteral_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _strliteral_ == oldChild )
        {
            SetStrliteral ((TStrliteral) newChild);
            return;
        }
    }

}
public sealed class AThreeConstant : PConstant
{
    private TBoolliteral _boolliteral_;

    public AThreeConstant ()
    {
    }

    public AThreeConstant (
            TBoolliteral _boolliteral_
    )
    {
        SetBoolliteral (_boolliteral_);
    }

    public override Object Clone()
    {
        return new AThreeConstant (
            (TBoolliteral)CloneNode (_boolliteral_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeConstant(this);
    }

    public TBoolliteral GetBoolliteral ()
    {
        return _boolliteral_;
    }

    public void SetBoolliteral (TBoolliteral node)
    {
        if(_boolliteral_ != null)
        {
            _boolliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolliteral_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolliteral_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolliteral_ == child )
        {
            _boolliteral_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolliteral_ == oldChild )
        {
            SetBoolliteral ((TBoolliteral) newChild);
            return;
        }
    }

}
public sealed class AOneComp : PComp
{
    private PExpr _expr_;

    public AOneComp ()
    {
    }

    public AOneComp (
            PExpr _expr_
    )
    {
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AOneComp (
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneComp(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class ATwoComp : PComp
{
    private PExpr _fst_;
    private PRelop _relop_;
    private PExpr _snd_;

    public ATwoComp ()
    {
    }

    public ATwoComp (
            PExpr _fst_,
            PRelop _relop_,
            PExpr _snd_
    )
    {
        SetFst (_fst_);
        SetRelop (_relop_);
        SetSnd (_snd_);
    }

    public override Object Clone()
    {
        return new ATwoComp (
            (PExpr)CloneNode (_fst_),
            (PRelop)CloneNode (_relop_),
            (PExpr)CloneNode (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoComp(this);
    }

    public PExpr GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PExpr node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public PRelop GetRelop ()
    {
        return _relop_;
    }

    public void SetRelop (PRelop node)
    {
        if(_relop_ != null)
        {
            _relop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _relop_ = node;
    }
    public PExpr GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PExpr node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fst_)
            + ToString (_relop_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _relop_ == child )
        {
            _relop_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fst_ == oldChild )
        {
            SetFst ((PExpr) newChild);
            return;
        }
        if ( _relop_ == oldChild )
        {
            SetRelop ((PRelop) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AOneRelop : PRelop
{
    private TGrthan _grthan_;

    public AOneRelop ()
    {
    }

    public AOneRelop (
            TGrthan _grthan_
    )
    {
        SetGrthan (_grthan_);
    }

    public override Object Clone()
    {
        return new AOneRelop (
            (TGrthan)CloneNode (_grthan_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneRelop(this);
    }

    public TGrthan GetGrthan ()
    {
        return _grthan_;
    }

    public void SetGrthan (TGrthan node)
    {
        if(_grthan_ != null)
        {
            _grthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grthan_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_grthan_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _grthan_ == child )
        {
            _grthan_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _grthan_ == oldChild )
        {
            SetGrthan ((TGrthan) newChild);
            return;
        }
    }

}
public sealed class ATwoRelop : PRelop
{
    private TGrthaneq _grthaneq_;

    public ATwoRelop ()
    {
    }

    public ATwoRelop (
            TGrthaneq _grthaneq_
    )
    {
        SetGrthaneq (_grthaneq_);
    }

    public override Object Clone()
    {
        return new ATwoRelop (
            (TGrthaneq)CloneNode (_grthaneq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoRelop(this);
    }

    public TGrthaneq GetGrthaneq ()
    {
        return _grthaneq_;
    }

    public void SetGrthaneq (TGrthaneq node)
    {
        if(_grthaneq_ != null)
        {
            _grthaneq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grthaneq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_grthaneq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _grthaneq_ == child )
        {
            _grthaneq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _grthaneq_ == oldChild )
        {
            SetGrthaneq ((TGrthaneq) newChild);
            return;
        }
    }

}
public sealed class AThreeRelop : PRelop
{
    private TLthan _lthan_;

    public AThreeRelop ()
    {
    }

    public AThreeRelop (
            TLthan _lthan_
    )
    {
        SetLthan (_lthan_);
    }

    public override Object Clone()
    {
        return new AThreeRelop (
            (TLthan)CloneNode (_lthan_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeRelop(this);
    }

    public TLthan GetLthan ()
    {
        return _lthan_;
    }

    public void SetLthan (TLthan node)
    {
        if(_lthan_ != null)
        {
            _lthan_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lthan_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lthan_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lthan_ == child )
        {
            _lthan_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lthan_ == oldChild )
        {
            SetLthan ((TLthan) newChild);
            return;
        }
    }

}
public sealed class AFourRelop : PRelop
{
    private TLthaneq _lthaneq_;

    public AFourRelop ()
    {
    }

    public AFourRelop (
            TLthaneq _lthaneq_
    )
    {
        SetLthaneq (_lthaneq_);
    }

    public override Object Clone()
    {
        return new AFourRelop (
            (TLthaneq)CloneNode (_lthaneq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourRelop(this);
    }

    public TLthaneq GetLthaneq ()
    {
        return _lthaneq_;
    }

    public void SetLthaneq (TLthaneq node)
    {
        if(_lthaneq_ != null)
        {
            _lthaneq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lthaneq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lthaneq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lthaneq_ == child )
        {
            _lthaneq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lthaneq_ == oldChild )
        {
            SetLthaneq ((TLthaneq) newChild);
            return;
        }
    }

}
public sealed class AFiveRelop : PRelop
{
    private TEq _eq_;

    public AFiveRelop ()
    {
    }

    public AFiveRelop (
            TEq _eq_
    )
    {
        SetEq (_eq_);
    }

    public override Object Clone()
    {
        return new AFiveRelop (
            (TEq)CloneNode (_eq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFiveRelop(this);
    }

    public TEq GetEq ()
    {
        return _eq_;
    }

    public void SetEq (TEq node)
    {
        if(_eq_ != null)
        {
            _eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_eq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _eq_ == child )
        {
            _eq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _eq_ == oldChild )
        {
            SetEq ((TEq) newChild);
            return;
        }
    }

}
public sealed class ASixRelop : PRelop
{
    private TNeq _neq_;

    public ASixRelop ()
    {
    }

    public ASixRelop (
            TNeq _neq_
    )
    {
        SetNeq (_neq_);
    }

    public override Object Clone()
    {
        return new ASixRelop (
            (TNeq)CloneNode (_neq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASixRelop(this);
    }

    public TNeq GetNeq ()
    {
        return _neq_;
    }

    public void SetNeq (TNeq node)
    {
        if(_neq_ != null)
        {
            _neq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _neq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_neq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _neq_ == child )
        {
            _neq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _neq_ == oldChild )
        {
            SetNeq ((TNeq) newChild);
            return;
        }
    }

}
public sealed class AOneCond : PCond
{
    private PComp _comp_;

    public AOneCond ()
    {
    }

    public AOneCond (
            PComp _comp_
    )
    {
        SetComp (_comp_);
    }

    public override Object Clone()
    {
        return new AOneCond (
            (PComp)CloneNode (_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneCond(this);
    }

    public PComp GetComp ()
    {
        return _comp_;
    }

    public void SetComp (PComp node)
    {
        if(_comp_ != null)
        {
            _comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp_ == child )
        {
            _comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp_ == oldChild )
        {
            SetComp ((PComp) newChild);
            return;
        }
    }

}
public sealed class ATwoCond : PCond
{
    private PComp _fst_;
    private PBop _bop_;
    private PCond _snd_;

    public ATwoCond ()
    {
    }

    public ATwoCond (
            PComp _fst_,
            PBop _bop_,
            PCond _snd_
    )
    {
        SetFst (_fst_);
        SetBop (_bop_);
        SetSnd (_snd_);
    }

    public override Object Clone()
    {
        return new ATwoCond (
            (PComp)CloneNode (_fst_),
            (PBop)CloneNode (_bop_),
            (PCond)CloneNode (_snd_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoCond(this);
    }

    public PComp GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PComp node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public PBop GetBop ()
    {
        return _bop_;
    }

    public void SetBop (PBop node)
    {
        if(_bop_ != null)
        {
            _bop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bop_ = node;
    }
    public PCond GetSnd ()
    {
        return _snd_;
    }

    public void SetSnd (PCond node)
    {
        if(_snd_ != null)
        {
            _snd_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _snd_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_fst_)
            + ToString (_bop_)
            + ToString (_snd_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _bop_ == child )
        {
            _bop_ = null;
            return;
        }
        if ( _snd_ == child )
        {
            _snd_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _fst_ == oldChild )
        {
            SetFst ((PComp) newChild);
            return;
        }
        if ( _bop_ == oldChild )
        {
            SetBop ((PBop) newChild);
            return;
        }
        if ( _snd_ == oldChild )
        {
            SetSnd ((PCond) newChild);
            return;
        }
    }

}
public sealed class AOneBop : PBop
{
    private TAnd _and_;

    public AOneBop ()
    {
    }

    public AOneBop (
            TAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AOneBop (
            (TAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneBop(this);
    }

    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
    }

}
public sealed class ATwoBop : PBop
{
    private TOr _or_;

    public ATwoBop ()
    {
    }

    public ATwoBop (
            TOr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new ATwoBop (
            (TOr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoBop(this);
    }

    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
    }

}
public sealed class AVardcl : PVardcl
{
    private TConstant _constant_;
    private PVarOptions _var_options_;
    private TNl _nl_;

    public AVardcl ()
    {
    }

    public AVardcl (
            TConstant _constant_,
            PVarOptions _var_options_,
            TNl _nl_
    )
    {
        SetConstant (_constant_);
        SetVarOptions (_var_options_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AVardcl (
            (TConstant)CloneNode (_constant_),
            (PVarOptions)CloneNode (_var_options_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVardcl(this);
    }

    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public PVarOptions GetVarOptions ()
    {
        return _var_options_;
    }

    public void SetVarOptions (PVarOptions node)
    {
        if(_var_options_ != null)
        {
            _var_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_options_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_var_options_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _var_options_ == child )
        {
            _var_options_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _var_options_ == oldChild )
        {
            SetVarOptions ((PVarOptions) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AOneVarOptions : PVarOptions
{
    private PNumdcl _numdcl_;

    public AOneVarOptions ()
    {
    }

    public AOneVarOptions (
            PNumdcl _numdcl_
    )
    {
        SetNumdcl (_numdcl_);
    }

    public override Object Clone()
    {
        return new AOneVarOptions (
            (PNumdcl)CloneNode (_numdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneVarOptions(this);
    }

    public PNumdcl GetNumdcl ()
    {
        return _numdcl_;
    }

    public void SetNumdcl (PNumdcl node)
    {
        if(_numdcl_ != null)
        {
            _numdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_numdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _numdcl_ == child )
        {
            _numdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _numdcl_ == oldChild )
        {
            SetNumdcl ((PNumdcl) newChild);
            return;
        }
    }

}
public sealed class ATwoVarOptions : PVarOptions
{
    private PStringdcl _stringdcl_;

    public ATwoVarOptions ()
    {
    }

    public ATwoVarOptions (
            PStringdcl _stringdcl_
    )
    {
        SetStringdcl (_stringdcl_);
    }

    public override Object Clone()
    {
        return new ATwoVarOptions (
            (PStringdcl)CloneNode (_stringdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoVarOptions(this);
    }

    public PStringdcl GetStringdcl ()
    {
        return _stringdcl_;
    }

    public void SetStringdcl (PStringdcl node)
    {
        if(_stringdcl_ != null)
        {
            _stringdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stringdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stringdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stringdcl_ == child )
        {
            _stringdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stringdcl_ == oldChild )
        {
            SetStringdcl ((PStringdcl) newChild);
            return;
        }
    }

}
public sealed class AThreeVarOptions : PVarOptions
{
    private PBooldcl _booldcl_;

    public AThreeVarOptions ()
    {
    }

    public AThreeVarOptions (
            PBooldcl _booldcl_
    )
    {
        SetBooldcl (_booldcl_);
    }

    public override Object Clone()
    {
        return new AThreeVarOptions (
            (PBooldcl)CloneNode (_booldcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThreeVarOptions(this);
    }

    public PBooldcl GetBooldcl ()
    {
        return _booldcl_;
    }

    public void SetBooldcl (PBooldcl node)
    {
        if(_booldcl_ != null)
        {
            _booldcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _booldcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_booldcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _booldcl_ == child )
        {
            _booldcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _booldcl_ == oldChild )
        {
            SetBooldcl ((PBooldcl) newChild);
            return;
        }
    }

}
public sealed class AFourVarOptions : PVarOptions
{
    private PArrdcl _arrdcl_;

    public AFourVarOptions ()
    {
    }

    public AFourVarOptions (
            PArrdcl _arrdcl_
    )
    {
        SetArrdcl (_arrdcl_);
    }

    public override Object Clone()
    {
        return new AFourVarOptions (
            (PArrdcl)CloneNode (_arrdcl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFourVarOptions(this);
    }

    public PArrdcl GetArrdcl ()
    {
        return _arrdcl_;
    }

    public void SetArrdcl (PArrdcl node)
    {
        if(_arrdcl_ != null)
        {
            _arrdcl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrdcl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_arrdcl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _arrdcl_ == child )
        {
            _arrdcl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _arrdcl_ == oldChild )
        {
            SetArrdcl ((PArrdcl) newChild);
            return;
        }
    }

}
public sealed class ANumdcl : PNumdcl
{
    private TNumber _number_;
    private TId _id_;
    private TAssign _assign_;
    private PExpr _expr_;
    private TNl _nl_;

    public ANumdcl ()
    {
    }

    public ANumdcl (
            TNumber _number_,
            TId _id_,
            TAssign _assign_,
            PExpr _expr_,
            TNl _nl_
    )
    {
        SetNumber (_number_);
        SetId (_id_);
        SetAssign (_assign_);
        SetExpr (_expr_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ANumdcl (
            (TNumber)CloneNode (_number_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumdcl(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expr_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AStringdcl : PStringdcl
{
    private TString _string_;
    private TId _id_;
    private TAssign _assign_;
    private PExpr _expr_;
    private TNl _nl_;

    public AStringdcl ()
    {
    }

    public AStringdcl (
            TString _string_,
            TId _id_,
            TAssign _assign_,
            PExpr _expr_,
            TNl _nl_
    )
    {
        SetString (_string_);
        SetId (_id_);
        SetAssign (_assign_);
        SetExpr (_expr_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new AStringdcl (
            (TString)CloneNode (_string_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringdcl(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expr_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class ABooldcl : PBooldcl
{
    private TBoolean _boolean_;
    private TId _id_;
    private TAssign _assign_;
    private PCond _cond_;
    private TNl _nl_;

    public ABooldcl ()
    {
    }

    public ABooldcl (
            TBoolean _boolean_,
            TId _id_,
            TAssign _assign_,
            PCond _cond_,
            TNl _nl_
    )
    {
        SetBoolean (_boolean_);
        SetId (_id_);
        SetAssign (_assign_);
        SetCond (_cond_);
        SetNl (_nl_);
    }

    public override Object Clone()
    {
        return new ABooldcl (
            (TBoolean)CloneNode (_boolean_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PCond)CloneNode (_cond_),
            (TNl)CloneNode (_nl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABooldcl(this);
    }

    public TBoolean GetBoolean ()
    {
        return _boolean_;
    }

    public void SetBoolean (TBoolean node)
    {
        if(_boolean_ != null)
        {
            _boolean_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PCond GetCond ()
    {
        return _cond_;
    }

    public void SetCond (PCond node)
    {
        if(_cond_ != null)
        {
            _cond_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cond_ = node;
    }
    public TNl GetNl ()
    {
        return _nl_;
    }

    public void SetNl (TNl node)
    {
        if(_nl_ != null)
        {
            _nl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_boolean_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_cond_)
            + ToString (_nl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _boolean_ == child )
        {
            _boolean_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _cond_ == child )
        {
            _cond_ = null;
            return;
        }
        if ( _nl_ == child )
        {
            _nl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _boolean_ == oldChild )
        {
            SetBoolean ((TBoolean) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _cond_ == oldChild )
        {
            SetCond ((PCond) newChild);
            return;
        }
        if ( _nl_ == oldChild )
        {
            SetNl ((TNl) newChild);
            return;
        }
    }

}
public sealed class AArrdcl : PArrdcl
{
    private PType _type_;
    private PArrsizedcl _fst_;
    private TypedList _multi_;
    private TId _id_;
    private TAssign _assign_;
    private PArrIdOrExpr _arr_id_or_expr_;

    public AArrdcl ()
    {
        this._multi_ = new TypedList(new Multi_Cast(this));
    }

    public AArrdcl (
            PType _type_,
            PArrsizedcl _fst_,
            IList _multi_,
            TId _id_,
            TAssign _assign_,
            PArrIdOrExpr _arr_id_or_expr_
    )
    {
        SetType (_type_);
        SetFst (_fst_);
        this._multi_ = new TypedList(new Multi_Cast(this));
        this._multi_.Clear();
        this._multi_.AddAll(_multi_);
        SetId (_id_);
        SetAssign (_assign_);
        SetArrIdOrExpr (_arr_id_or_expr_);
    }

    public override Object Clone()
    {
        return new AArrdcl (
            (PType)CloneNode (_type_),
            (PArrsizedcl)CloneNode (_fst_),
            CloneList (_multi_),
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PArrIdOrExpr)CloneNode (_arr_id_or_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrdcl(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PArrsizedcl GetFst ()
    {
        return _fst_;
    }

    public void SetFst (PArrsizedcl node)
    {
        if(_fst_ != null)
        {
            _fst_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _fst_ = node;
    }
    public IList GetMulti ()
    {
        return _multi_;
    }

    public void setMulti (IList list)
    {
        _multi_.Clear();
        _multi_.AddAll(list);
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PArrIdOrExpr GetArrIdOrExpr ()
    {
        return _arr_id_or_expr_;
    }

    public void SetArrIdOrExpr (PArrIdOrExpr node)
    {
        if(_arr_id_or_expr_ != null)
        {
            _arr_id_or_expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arr_id_or_expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_fst_)
            + ToString (_multi_)
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_arr_id_or_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _fst_ == child )
        {
            _fst_ = null;
            return;
        }
        if ( _multi_.Contains(child) )
        {
            _multi_.Remove(child);
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _arr_id_or_expr_ == child )
        {
            _arr_id_or_expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _fst_ == oldChild )
        {
            SetFst ((PArrsizedcl) newChild);
            return;
        }
        for ( int i = 0; i < _multi_.Count; i++ )
        {
            Node n = (Node)_multi_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _multi_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _multi_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _arr_id_or_expr_ == oldChild )
        {
            SetArrIdOrExpr ((PArrIdOrExpr) newChild);
            return;
        }
    }

    private class Multi_Cast : Cast
    {
        AArrdcl obj;

        internal Multi_Cast (AArrdcl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PArrsizedcl node = (PArrsizedcl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PArrsizedcl node = (PArrsizedcl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AOneArrIdOrExpr : PArrIdOrExpr
{
    private TId _id_;

    public AOneArrIdOrExpr ()
    {
    }

    public AOneArrIdOrExpr (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AOneArrIdOrExpr (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneArrIdOrExpr(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ATwoArrIdOrExpr : PArrIdOrExpr
{
    private TLbrack _lbrack_;
    private PParamsOptions _params_options_;
    private TRbrack _rbrack_;

    public ATwoArrIdOrExpr ()
    {
    }

    public ATwoArrIdOrExpr (
            TLbrack _lbrack_,
            PParamsOptions _params_options_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetParamsOptions (_params_options_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new ATwoArrIdOrExpr (
            (TLbrack)CloneNode (_lbrack_),
            (PParamsOptions)CloneNode (_params_options_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATwoArrIdOrExpr(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public PParamsOptions GetParamsOptions ()
    {
        return _params_options_;
    }

    public void SetParamsOptions (PParamsOptions node)
    {
        if(_params_options_ != null)
        {
            _params_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_options_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_params_options_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _params_options_ == child )
        {
            _params_options_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _params_options_ == oldChild )
        {
            SetParamsOptions ((PParamsOptions) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}
public sealed class AArrsizedcl : PArrsizedcl
{
    private TLbrack _lbrack_;
    private TNumliteral _numliteral_;
    private TRbrack _rbrack_;

    public AArrsizedcl ()
    {
    }

    public AArrsizedcl (
            TLbrack _lbrack_,
            TNumliteral _numliteral_,
            TRbrack _rbrack_
    )
    {
        SetLbrack (_lbrack_);
        SetNumliteral (_numliteral_);
        SetRbrack (_rbrack_);
    }

    public override Object Clone()
    {
        return new AArrsizedcl (
            (TLbrack)CloneNode (_lbrack_),
            (TNumliteral)CloneNode (_numliteral_),
            (TRbrack)CloneNode (_rbrack_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrsizedcl(this);
    }

    public TLbrack GetLbrack ()
    {
        return _lbrack_;
    }

    public void SetLbrack (TLbrack node)
    {
        if(_lbrack_ != null)
        {
            _lbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lbrack_ = node;
    }
    public TNumliteral GetNumliteral ()
    {
        return _numliteral_;
    }

    public void SetNumliteral (TNumliteral node)
    {
        if(_numliteral_ != null)
        {
            _numliteral_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _numliteral_ = node;
    }
    public TRbrack GetRbrack ()
    {
        return _rbrack_;
    }

    public void SetRbrack (TRbrack node)
    {
        if(_rbrack_ != null)
        {
            _rbrack_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rbrack_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lbrack_)
            + ToString (_numliteral_)
            + ToString (_rbrack_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lbrack_ == child )
        {
            _lbrack_ = null;
            return;
        }
        if ( _numliteral_ == child )
        {
            _numliteral_ = null;
            return;
        }
        if ( _rbrack_ == child )
        {
            _rbrack_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lbrack_ == oldChild )
        {
            SetLbrack ((TLbrack) newChild);
            return;
        }
        if ( _numliteral_ == oldChild )
        {
            SetNumliteral ((TNumliteral) newChild);
            return;
        }
        if ( _rbrack_ == oldChild )
        {
            SetRbrack ((TRbrack) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
